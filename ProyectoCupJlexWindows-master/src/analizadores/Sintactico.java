
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import arbol.Expresion;
import arbol.Nodo;
import arbol.Instruccion;
import arbol.Asignacion;
import arbol.Simbolo.*;
import arbol.TablaDeSimbolos;
import java.util.LinkedList;
import arbol.Operacion;
import arbol.Imprimir;
import arbol.If.If;
import arbol.If.IfElse;
import arbol.While.While;
import arbol.DoWhile.DoWhile;
import arbol.SwitchCase.NodoCase;
import arbol.SwitchCase.SwitchCase;
import arbol.SwitchCase.Break;
import arbol.Tipo.tipo.*;
import arbol.Tipo;
import arbol.Sentencias.Def;
import arbol.Sentencias.Asigna;
import arbol.Funciones.Parametro;
import arbol.Funciones.DefinicionDeFuncion;
import arbol.Funciones.Funcion;
import arbol.Funciones.LlamadaFuncion;
import arbol.Sentencias.DefFunc;
import arbol.Sentencias.DefFuncP;
import arbol.Funciones.LlamadaFuncionExp;
import arbol.Funciones.FuncionesDefinidas.TypeOf;
import arbol.Funciones.FuncionesDefinidas.Lenght;
import arbol.Funciones.FuncionesDefinidas.StringLenght;
import arbol.Funciones.FuncionesDefinidas.Remove;
import arbol.Funciones.FuncionesDefinidas.toLowerCase;
import arbol.Funciones.FuncionesDefinidas.toUperCase;
import arbol.Funciones.FuncionesDefinidas.Trunk;
import arbol.Funciones.FuncionesDefinidas.Round;
import arbol.Funciones.FuncionesDefinidas.C;
import arbol.Sentencias.Sentencia;
import arbol.Graficas.BarPlot;
import arbol.Funciones.FuncionesDefinidas.Lista;
import arbol.Graficas.PiePlot;
import arbol.Sentencias.Llamada;
import arbol.Sentencias.LlamadaAMetodo;
import arbol.Retorno.Retorno;
import java.util.ArrayList;
import arbol.Declaracion;
import arbol.DeclaracionVariable;
import arbol.Single;
import arbol.id;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\006" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\005\000\002\004\004\000\002" +
    "\004\004\000\002\023\004\000\002\024\004\000\002\024" +
    "\003\000\002\017\005\000\002\017\004\000\002\025\003" +
    "\000\002\025\003\000\002\016\005\000\002\016\004\000" +
    "\002\027\006\000\002\027\005\000\002\027\003\000\002" +
    "\030\005\000\002\030\006\000\002\030\007\000\002\011" +
    "\005\000\002\011\003\000\002\012\005\000\002\012\003" +
    "\000\002\013\003\000\002\013\003\000\002\014\005\000" +
    "\002\014\003\000\002\015\005\000\002\015\003\000\002" +
    "\020\007\000\002\020\007\000\002\021\011\000\002\021" +
    "\015\000\002\021\021\000\002\021\011\000\002\021\004" +
    "\000\002\021\011\000\002\021\013\000\002\007\004\000" +
    "\002\007\003\000\002\010\006\000\002\010\004\000\002" +
    "\005\004\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\011\000\002\005\003\000\002\005\003\000\002\005" +
    "\010\000\002\005\006\000\002\005\006\000\002\005\006" +
    "\000\002\005\006\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\005\006\000\002\005\007\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\030\003\014\027\015\031\023\033\017\041" +
    "\013\045\004\046\020\053\021\055\016\065\005\066\024" +
    "\001\002\000\004\005\342\001\002\000\004\005\336\001" +
    "\002\000\040\002\ufff9\003\ufff9\012\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\041\ufff9\045\ufff9\046\ufff9\053" +
    "\ufff9\055\ufff9\065\ufff9\066\ufff9\001\002\000\042\002\ufffa" +
    "\003\ufffa\004\335\012\ufffa\027\ufffa\030\ufffa\031\ufffa\032" +
    "\ufffa\033\ufffa\041\ufffa\045\ufffa\046\ufffa\053\ufffa\055\ufffa" +
    "\065\ufffa\066\ufffa\001\002\000\032\002\000\003\014\027" +
    "\015\031\023\033\017\041\013\045\004\046\020\053\021" +
    "\055\016\065\005\066\024\001\002\000\040\002\ufff8\003" +
    "\ufff8\012\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8" +
    "\041\ufff8\045\ufff8\046\ufff8\053\ufff8\055\ufff8\065\ufff8\066" +
    "\ufff8\001\002\000\040\002\ufffe\003\ufffe\012\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\032\ufffe\033\ufffe\041\ufffe\045\ufffe\046" +
    "\ufffe\053\ufffe\055\ufffe\065\ufffe\066\ufffe\001\002\000\004" +
    "\005\314\001\002\000\004\004\313\001\002\000\004\005" +
    "\275\001\002\000\004\005\271\001\002\000\054\004\267" +
    "\016\027\036\037\042\041\043\051\047\053\050\035\051" +
    "\031\053\052\060\050\062\042\063\032\064\054\067\047" +
    "\070\040\071\030\074\043\075\034\076\044\077\026\100" +
    "\046\001\002\000\004\011\256\001\002\000\006\005\205" +
    "\054\204\001\002\000\004\002\201\001\002\000\004\004" +
    "\200\001\002\000\004\005\025\001\002\000\052\016\027" +
    "\036\037\042\041\043\051\047\053\050\035\051\031\053" +
    "\052\060\050\062\042\063\032\064\054\067\047\070\040" +
    "\071\030\074\043\075\034\076\044\077\026\100\046\001" +
    "\002\000\004\005\175\001\002\000\052\016\027\036\037" +
    "\042\041\043\051\047\053\050\035\051\031\053\052\060" +
    "\050\062\042\063\032\064\054\067\047\070\040\071\030" +
    "\074\043\075\034\076\044\077\026\100\046\001\002\000" +
    "\004\005\171\001\002\000\110\002\uffc5\003\uffc5\004\uffc5" +
    "\006\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033" +
    "\uffc5\034\uffc5\035\uffc5\037\uffc5\040\uffc5\041\uffc5\045\uffc5" +
    "\046\uffc5\053\uffc5\055\uffc5\061\uffc5\065\uffc5\066\uffc5\001" +
    "\002\000\004\005\166\001\002\000\010\034\153\035\155" +
    "\037\154\001\002\000\004\005\163\001\002\000\110\002" +
    "\uffc6\003\uffc6\004\uffc6\006\uffc6\010\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\045\uffc6\046\uffc6\053\uffc6\055\uffc6\061\uffc6" +
    "\065\uffc6\066\uffc6\001\002\000\036\006\uffe4\013\066\014" +
    "\076\015\073\016\065\017\071\020\072\021\077\022\075" +
    "\023\067\024\074\025\064\026\070\061\uffe4\001\002\000" +
    "\052\016\027\036\037\042\041\043\051\047\053\050\035" +
    "\051\031\053\052\060\050\062\042\063\032\064\054\067" +
    "\047\070\040\071\030\074\043\075\034\076\044\077\026" +
    "\100\046\001\002\000\004\005\146\001\002\000\110\002" +
    "\uffc4\003\uffc4\004\uffc4\006\uffc4\010\uffc4\012\uffc4\013\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\045\uffc4\046\uffc4\053\uffc4\055\uffc4\061\uffc4" +
    "\065\uffc4\066\uffc4\001\002\000\004\005\143\001\002\000" +
    "\004\005\136\001\002\000\004\005\133\001\002\000\006" +
    "\006\130\061\127\001\002\000\004\005\124\001\002\000" +
    "\004\005\121\001\002\000\110\002\uffbf\003\uffbf\004\uffbf" +
    "\006\uffbf\010\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033" +
    "\uffbf\034\uffbf\035\uffbf\037\uffbf\040\uffbf\041\uffbf\045\uffbf" +
    "\046\uffbf\053\uffbf\055\uffbf\061\uffbf\065\uffbf\066\uffbf\001" +
    "\002\000\110\002\uffc3\003\uffc3\004\uffc3\006\uffc3\010\uffc3" +
    "\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\045\uffc3\046\uffc3\053\uffc3" +
    "\055\uffc3\061\uffc3\065\uffc3\066\uffc3\001\002\000\114\002" +
    "\uffc2\003\uffc2\004\uffc2\005\056\006\uffc2\007\055\010\uffc2" +
    "\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020" +
    "\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035" +
    "\uffc2\037\uffc2\040\uffc2\041\uffc2\045\uffc2\046\uffc2\053\uffc2" +
    "\055\uffc2\061\uffc2\065\uffc2\066\uffc2\001\002\000\110\002" +
    "\uffc7\003\uffc7\004\uffc7\006\uffc7\010\uffc7\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\037\uffc7\040" +
    "\uffc7\041\uffc7\045\uffc7\046\uffc7\053\uffc7\055\uffc7\061\uffc7" +
    "\065\uffc7\066\uffc7\001\002\000\110\002\uffc0\003\uffc0\004" +
    "\uffc0\006\uffc0\010\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\037\uffc0\040\uffc0\041\uffc0\045" +
    "\uffc0\046\uffc0\053\uffc0\055\uffc0\061\uffc0\065\uffc0\066\uffc0" +
    "\001\002\000\052\016\027\036\037\042\041\043\051\047" +
    "\053\050\035\051\031\053\052\060\050\062\042\063\032" +
    "\064\054\067\047\070\040\071\030\074\043\075\034\076" +
    "\044\077\026\100\046\001\002\000\052\016\027\036\037" +
    "\042\041\043\051\047\053\050\035\051\031\053\052\060" +
    "\050\062\042\063\032\064\054\067\047\070\040\071\030" +
    "\074\043\075\034\076\044\077\026\100\046\001\002\000" +
    "\036\006\uffe2\013\066\014\076\015\073\016\065\017\071" +
    "\020\072\021\077\022\075\023\067\024\074\025\064\026" +
    "\070\061\uffe2\001\002\000\006\006\062\061\061\001\002" +
    "\000\052\016\027\036\037\042\041\043\051\047\053\050" +
    "\035\051\031\053\052\060\050\062\042\063\032\064\054" +
    "\067\047\070\040\071\030\074\043\075\034\076\044\077" +
    "\026\100\046\001\002\000\110\002\uffb7\003\uffb7\004\uffb7" +
    "\006\uffb7\010\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\034\uffb7\035\uffb7\037\uffb7\040\uffb7\041\uffb7\045\uffb7" +
    "\046\uffb7\053\uffb7\055\uffb7\061\uffb7\065\uffb7\066\uffb7\001" +
    "\002\000\036\006\uffe3\013\066\014\076\015\073\016\065" +
    "\017\071\020\072\021\077\022\075\023\067\024\074\025" +
    "\064\026\070\061\uffe3\001\002\000\052\016\027\036\037" +
    "\042\041\043\051\047\053\050\035\051\031\053\052\060" +
    "\050\062\042\063\032\064\054\067\047\070\040\071\030" +
    "\074\043\075\034\076\044\077\026\100\046\001\002\000" +
    "\052\016\027\036\037\042\041\043\051\047\053\050\035" +
    "\051\031\053\052\060\050\062\042\063\032\064\054\067" +
    "\047\070\040\071\030\074\043\075\034\076\044\077\026" +
    "\100\046\001\002\000\052\016\027\036\037\042\041\043" +
    "\051\047\053\050\035\051\031\053\052\060\050\062\042" +
    "\063\032\064\054\067\047\070\040\071\030\074\043\075" +
    "\034\076\044\077\026\100\046\001\002\000\052\016\027" +
    "\036\037\042\041\043\051\047\053\050\035\051\031\053" +
    "\052\060\050\062\042\063\032\064\054\067\047\070\040" +
    "\071\030\074\043\075\034\076\044\077\026\100\046\001" +
    "\002\000\052\016\027\036\037\042\041\043\051\047\053" +
    "\050\035\051\031\053\052\060\050\062\042\063\032\064" +
    "\054\067\047\070\040\071\030\074\043\075\034\076\044" +
    "\077\026\100\046\001\002\000\052\016\027\036\037\042" +
    "\041\043\051\047\053\050\035\051\031\053\052\060\050" +
    "\062\042\063\032\064\054\067\047\070\040\071\030\074" +
    "\043\075\034\076\044\077\026\100\046\001\002\000\052" +
    "\016\027\036\037\042\041\043\051\047\053\050\035\051" +
    "\031\053\052\060\050\062\042\063\032\064\054\067\047" +
    "\070\040\071\030\074\043\075\034\076\044\077\026\100" +
    "\046\001\002\000\052\016\027\036\037\042\041\043\051" +
    "\047\053\050\035\051\031\053\052\060\050\062\042\063" +
    "\032\064\054\067\047\070\040\071\030\074\043\075\034" +
    "\076\044\077\026\100\046\001\002\000\052\016\027\036" +
    "\037\042\041\043\051\047\053\050\035\051\031\053\052" +
    "\060\050\062\042\063\032\064\054\067\047\070\040\071" +
    "\030\074\043\075\034\076\044\077\026\100\046\001\002" +
    "\000\052\016\027\036\037\042\041\043\051\047\053\050" +
    "\035\051\031\053\052\060\050\062\042\063\032\064\054" +
    "\067\047\070\040\071\030\074\043\075\034\076\044\077" +
    "\026\100\046\001\002\000\052\016\027\036\037\042\041" +
    "\043\051\047\053\050\035\051\031\053\052\060\050\062" +
    "\042\063\032\064\054\067\047\070\040\071\030\074\043" +
    "\075\034\076\044\077\026\100\046\001\002\000\052\016" +
    "\027\036\037\042\041\043\051\047\053\050\035\051\031" +
    "\053\052\060\050\062\042\063\032\064\054\067\047\070" +
    "\040\071\030\074\043\075\034\076\044\077\026\100\046" +
    "\001\002\000\042\006\uffb2\013\066\014\076\015\073\016" +
    "\065\017\071\020\072\021\077\022\075\023\067\024\074" +
    "\025\064\026\070\034\uffb2\035\uffb2\037\uffb2\001\002\000" +
    "\110\002\uffc8\003\uffc8\004\uffc8\006\uffc8\010\uffc8\012\uffc8" +
    "\013\066\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021" +
    "\077\022\075\023\067\024\074\025\064\026\070\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\045\uffc8\046\uffc8\053\uffc8\055\uffc8" +
    "\061\uffc8\065\uffc8\066\uffc8\001\002\000\042\006\uffb0\013" +
    "\066\014\076\015\073\016\065\017\071\020\072\021\077" +
    "\022\075\023\067\024\074\025\064\026\070\034\uffb0\035" +
    "\uffb0\037\uffb0\001\002\000\042\006\uffae\013\066\014\076" +
    "\015\073\016\065\017\071\020\072\021\077\022\075\023" +
    "\067\024\074\025\064\026\070\034\uffae\035\uffae\037\uffae" +
    "\001\002\000\110\002\uffcd\003\uffcd\004\uffcd\006\uffcd\010" +
    "\uffcd\012\uffcd\013\066\014\076\015\uffcd\016\uffcd\017\071" +
    "\020\072\021\077\022\075\023\067\024\074\025\064\026" +
    "\070\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\037\uffcd\040\uffcd\041\uffcd\045\uffcd\046\uffcd\053" +
    "\uffcd\055\uffcd\061\uffcd\065\uffcd\066\uffcd\001\002\000\110" +
    "\002\uffca\003\uffca\004\uffca\006\uffca\010\uffca\012\uffca\013" +
    "\066\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\077" +
    "\022\075\023\067\024\074\025\064\026\070\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\037\uffca" +
    "\040\uffca\041\uffca\045\uffca\046\uffca\053\uffca\055\uffca\061" +
    "\uffca\065\uffca\066\uffca\001\002\000\110\002\uffcb\003\uffcb" +
    "\004\uffcb\006\uffcb\010\uffcb\012\uffcb\013\066\014\uffcb\015" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\021\077\022\075\023\067" +
    "\024\074\025\064\026\070\027\uffcb\030\uffcb\031\uffcb\032" +
    "\uffcb\033\uffcb\034\uffcb\035\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\045\uffcb\046\uffcb\053\uffcb\055\uffcb\061\uffcb\065\uffcb\066" +
    "\uffcb\001\002\000\042\006\uffb1\013\066\014\076\015\073" +
    "\016\065\017\071\020\072\021\077\022\075\023\067\024" +
    "\074\025\064\026\070\034\uffb1\035\uffb1\037\uffb1\001\002" +
    "\000\042\006\uffaf\013\066\014\076\015\073\016\065\017" +
    "\071\020\072\021\077\022\075\023\067\024\074\025\064" +
    "\026\070\034\uffaf\035\uffaf\037\uffaf\001\002\000\110\002" +
    "\uffc9\003\uffc9\004\uffc9\006\uffc9\010\uffc9\012\uffc9\013\uffc9" +
    "\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\077\022" +
    "\075\023\067\024\074\025\064\026\070\027\uffc9\030\uffc9" +
    "\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\037\uffc9\040" +
    "\uffc9\041\uffc9\045\uffc9\046\uffc9\053\uffc9\055\uffc9\061\uffc9" +
    "\065\uffc9\066\uffc9\001\002\000\110\002\uffcc\003\uffcc\004" +
    "\uffcc\006\uffcc\010\uffcc\012\uffcc\013\066\014\076\015\uffcc" +
    "\016\uffcc\017\071\020\072\021\077\022\075\023\067\024" +
    "\074\025\064\026\070\027\uffcc\030\uffcc\031\uffcc\032\uffcc" +
    "\033\uffcc\034\uffcc\035\uffcc\037\uffcc\040\uffcc\041\uffcc\045" +
    "\uffcc\046\uffcc\053\uffcc\055\uffcc\061\uffcc\065\uffcc\066\uffcc" +
    "\001\002\000\042\006\uffad\013\066\014\076\015\073\016" +
    "\065\017\071\020\072\021\077\022\075\023\067\024\074" +
    "\025\064\026\070\034\uffad\035\uffad\037\uffad\001\002\000" +
    "\034\010\115\013\066\014\076\015\073\016\065\017\071" +
    "\020\072\021\077\022\075\023\067\024\074\025\064\026" +
    "\070\001\002\000\004\007\116\001\002\000\052\016\027" +
    "\036\037\042\041\043\051\047\053\050\035\051\031\053" +
    "\052\060\050\062\042\063\032\064\054\067\047\070\040" +
    "\071\030\074\043\075\034\076\044\077\026\100\046\001" +
    "\002\000\034\010\120\013\066\014\076\015\073\016\065" +
    "\017\071\020\072\021\077\022\075\023\067\024\074\025" +
    "\064\026\070\001\002\000\110\002\uffc1\003\uffc1\004\uffc1" +
    "\006\uffc1\010\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016" +
    "\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\037\uffc1\040\uffc1\041\uffc1\045\uffc1" +
    "\046\uffc1\053\uffc1\055\uffc1\061\uffc1\065\uffc1\066\uffc1\001" +
    "\002\000\052\016\027\036\037\042\041\043\051\047\053" +
    "\050\035\051\031\053\052\060\050\062\042\063\032\064" +
    "\054\067\047\070\040\071\030\074\043\075\034\076\044" +
    "\077\026\100\046\001\002\000\034\006\123\013\066\014" +
    "\076\015\073\016\065\017\071\020\072\021\077\022\075" +
    "\023\067\024\074\025\064\026\070\001\002\000\110\002" +
    "\uffb5\003\uffb5\004\uffb5\006\uffb5\010\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\037\uffb5\040" +
    "\uffb5\041\uffb5\045\uffb5\046\uffb5\053\uffb5\055\uffb5\061\uffb5" +
    "\065\uffb5\066\uffb5\001\002\000\052\016\027\036\037\042" +
    "\041\043\051\047\053\050\035\051\031\053\052\060\050" +
    "\062\042\063\032\064\054\067\047\070\040\071\030\074" +
    "\043\075\034\076\044\077\026\100\046\001\002\000\034" +
    "\006\126\013\066\014\076\015\073\016\065\017\071\020" +
    "\072\021\077\022\075\023\067\024\074\025\064\026\070" +
    "\001\002\000\110\002\uffba\003\uffba\004\uffba\006\uffba\010" +
    "\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba" +
    "\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\037\uffba\040\uffba\041\uffba\045\uffba\046\uffba\053" +
    "\uffba\055\uffba\061\uffba\065\uffba\066\uffba\001\002\000\052" +
    "\016\027\036\037\042\041\043\051\047\053\050\035\051" +
    "\031\053\052\060\050\062\042\063\032\064\054\067\047" +
    "\070\040\071\030\074\043\075\034\076\044\077\026\100" +
    "\046\001\002\000\004\004\131\001\002\000\040\002\uffda" +
    "\003\uffda\012\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\041\uffda\045\uffda\046\uffda\053\uffda\055\uffda\065\uffda" +
    "\066\uffda\001\002\000\036\006\uffe5\013\066\014\076\015" +
    "\073\016\065\017\071\020\072\021\077\022\075\023\067" +
    "\024\074\025\064\026\070\061\uffe5\001\002\000\052\016" +
    "\027\036\037\042\041\043\051\047\053\050\035\051\031" +
    "\053\052\060\050\062\042\063\032\064\054\067\047\070" +
    "\040\071\030\074\043\075\034\076\044\077\026\100\046" +
    "\001\002\000\034\006\135\013\066\014\076\015\073\016" +
    "\065\017\071\020\072\021\077\022\075\023\067\024\074" +
    "\025\064\026\070\001\002\000\110\002\uffbc\003\uffbc\004" +
    "\uffbc\006\uffbc\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\037\uffbc\040\uffbc\041\uffbc\045" +
    "\uffbc\046\uffbc\053\uffbc\055\uffbc\061\uffbc\065\uffbc\066\uffbc" +
    "\001\002\000\052\016\027\036\037\042\041\043\051\047" +
    "\053\050\035\051\031\053\052\060\050\062\042\063\032" +
    "\064\054\067\047\070\040\071\030\074\043\075\034\076" +
    "\044\077\026\100\046\001\002\000\034\013\066\014\076" +
    "\015\073\016\065\017\071\020\072\021\077\022\075\023" +
    "\067\024\074\025\064\026\070\061\140\001\002\000\052" +
    "\016\027\036\037\042\041\043\051\047\053\050\035\051" +
    "\031\053\052\060\050\062\042\063\032\064\054\067\047" +
    "\070\040\071\030\074\043\075\034\076\044\077\026\100" +
    "\046\001\002\000\034\006\142\013\066\014\076\015\073" +
    "\016\065\017\071\020\072\021\077\022\075\023\067\024" +
    "\074\025\064\026\070\001\002\000\110\002\uffbe\003\uffbe" +
    "\004\uffbe\006\uffbe\010\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\037\uffbe\040\uffbe\041\uffbe" +
    "\045\uffbe\046\uffbe\053\uffbe\055\uffbe\061\uffbe\065\uffbe\066" +
    "\uffbe\001\002\000\052\016\027\036\037\042\041\043\051" +
    "\047\053\050\035\051\031\053\052\060\050\062\042\063" +
    "\032\064\054\067\047\070\040\071\030\074\043\075\034" +
    "\076\044\077\026\100\046\001\002\000\006\006\145\061" +
    "\127\001\002\000\110\002\uffb9\003\uffb9\004\uffb9\006\uffb9" +
    "\010\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\037\uffb9\040\uffb9\041\uffb9\045\uffb9\046\uffb9" +
    "\053\uffb9\055\uffb9\061\uffb9\065\uffb9\066\uffb9\001\002\000" +
    "\052\016\027\036\037\042\041\043\051\047\053\050\035" +
    "\051\031\053\052\060\050\062\042\063\032\064\054\067" +
    "\047\070\040\071\030\074\043\075\034\076\044\077\026" +
    "\100\046\001\002\000\034\006\150\013\066\014\076\015" +
    "\073\016\065\017\071\020\072\021\077\022\075\023\067" +
    "\024\074\025\064\026\070\001\002\000\110\002\uffb4\003" +
    "\uffb4\004\uffb4\006\uffb4\010\uffb4\012\uffb4\013\uffb4\014\uffb4" +
    "\015\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\037\uffb4\040\uffb4\041" +
    "\uffb4\045\uffb4\046\uffb4\053\uffb4\055\uffb4\061\uffb4\065\uffb4" +
    "\066\uffb4\001\002\000\012\006\uffaa\034\uffaa\035\uffaa\037" +
    "\uffaa\001\002\000\032\013\066\014\076\015\073\016\065" +
    "\017\071\020\072\021\077\022\075\023\067\024\074\025" +
    "\064\026\070\001\002\000\052\016\027\036\037\042\041" +
    "\043\051\047\053\050\035\051\031\053\052\060\050\062" +
    "\042\063\032\064\054\067\047\070\040\071\030\074\043" +
    "\075\034\076\044\077\026\100\046\001\002\000\052\016" +
    "\027\036\037\042\041\043\051\047\053\050\035\051\031" +
    "\053\052\060\050\062\042\063\032\064\054\067\047\070" +
    "\040\071\030\074\043\075\034\076\044\077\026\100\046" +
    "\001\002\000\052\016\027\036\037\042\041\043\051\047" +
    "\053\050\035\051\031\053\052\060\050\062\042\063\032" +
    "\064\054\067\047\070\040\071\030\074\043\075\034\076" +
    "\044\077\026\100\046\001\002\000\012\006\uffab\034\uffab" +
    "\035\uffab\037\uffab\001\002\000\034\013\066\014\076\015" +
    "\073\016\065\017\071\020\072\021\077\022\075\023\067" +
    "\024\074\025\064\026\070\040\160\001\002\000\052\016" +
    "\027\036\037\042\041\043\051\047\053\050\035\051\031" +
    "\053\052\060\050\062\042\063\032\064\054\067\047\070" +
    "\040\071\030\074\043\075\034\076\044\077\026\100\046" +
    "\001\002\000\110\002\uffb3\003\uffb3\004\uffb3\006\uffb3\010" +
    "\uffb3\012\uffb3\013\066\014\076\015\073\016\065\017\071" +
    "\020\072\021\077\022\075\023\067\024\074\025\064\026" +
    "\070\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\037\uffb3\040\uffb3\041\uffb3\045\uffb3\046\uffb3\053" +
    "\uffb3\055\uffb3\061\uffb3\065\uffb3\066\uffb3\001\002\000\012" +
    "\006\uffac\034\uffac\035\uffac\037\uffac\001\002\000\052\016" +
    "\027\036\037\042\041\043\051\047\053\050\035\051\031" +
    "\053\052\060\050\062\042\063\032\064\054\067\047\070" +
    "\040\071\030\074\043\075\034\076\044\077\026\100\046" +
    "\001\002\000\034\006\165\013\066\014\076\015\073\016" +
    "\065\017\071\020\072\021\077\022\075\023\067\024\074" +
    "\025\064\026\070\001\002\000\110\002\uffbd\003\uffbd\004" +
    "\uffbd\006\uffbd\010\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\037\uffbd\040\uffbd\041\uffbd\045" +
    "\uffbd\046\uffbd\053\uffbd\055\uffbd\061\uffbd\065\uffbd\066\uffbd" +
    "\001\002\000\052\016\027\036\037\042\041\043\051\047" +
    "\053\050\035\051\031\053\052\060\050\062\042\063\032" +
    "\064\054\067\047\070\040\071\030\074\043\075\034\076" +
    "\044\077\026\100\046\001\002\000\006\006\170\061\127" +
    "\001\002\000\110\002\uffb8\003\uffb8\004\uffb8\006\uffb8\010" +
    "\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\037\uffb8\040\uffb8\041\uffb8\045\uffb8\046\uffb8\053" +
    "\uffb8\055\uffb8\061\uffb8\065\uffb8\066\uffb8\001\002\000\052" +
    "\016\027\036\037\042\041\043\051\047\053\050\035\051" +
    "\031\053\052\060\050\062\042\063\032\064\054\067\047" +
    "\070\040\071\030\074\043\075\034\076\044\077\026\100" +
    "\046\001\002\000\034\006\173\013\066\014\076\015\073" +
    "\016\065\017\071\020\072\021\077\022\075\023\067\024" +
    "\074\025\064\026\070\001\002\000\110\002\uffb6\003\uffb6" +
    "\004\uffb6\006\uffb6\010\uffb6\012\uffb6\013\uffb6\014\uffb6\015" +
    "\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6\032" +
    "\uffb6\033\uffb6\034\uffb6\035\uffb6\037\uffb6\040\uffb6\041\uffb6" +
    "\045\uffb6\046\uffb6\053\uffb6\055\uffb6\061\uffb6\065\uffb6\066" +
    "\uffb6\001\002\000\110\002\uffce\003\uffce\004\uffce\006\uffce" +
    "\010\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\017" +
    "\uffce\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\037\uffce\040\uffce\041\uffce\045\uffce\046\uffce" +
    "\053\uffce\055\uffce\061\uffce\065\uffce\066\uffce\001\002\000" +
    "\052\016\027\036\037\042\041\043\051\047\053\050\035" +
    "\051\031\053\052\060\050\062\042\063\032\064\054\067" +
    "\047\070\040\071\030\074\043\075\034\076\044\077\026" +
    "\100\046\001\002\000\034\006\177\013\066\014\076\015" +
    "\073\016\065\017\071\020\072\021\077\022\075\023\067" +
    "\024\074\025\064\026\070\001\002\000\110\002\uffbb\003" +
    "\uffbb\004\uffbb\006\uffbb\010\uffbb\012\uffbb\013\uffbb\014\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\032\uffbb\033\uffbb\034\uffbb\035\uffbb\037\uffbb\040\uffbb\041" +
    "\uffbb\045\uffbb\046\uffbb\053\uffbb\055\uffbb\061\uffbb\065\uffbb" +
    "\066\uffbb\001\002\000\040\002\uffd5\003\uffd5\012\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\041\uffd5\045\uffd5" +
    "\046\uffd5\053\uffd5\055\uffd5\065\uffd5\066\uffd5\001\002\000" +
    "\004\002\001\001\002\000\046\002\ufff2\003\ufff2\004\ufff2" +
    "\006\ufff2\012\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\041\ufff2\045\ufff2\046\ufff2\053\ufff2\055\ufff2\061\ufff2" +
    "\065\ufff2\066\ufff2\001\002\000\046\002\ufff4\003\ufff4\004" +
    "\ufff4\006\ufff4\012\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\033\ufff4\041\ufff4\045\ufff4\046\ufff4\053\ufff4\055\ufff4\061" +
    "\ufff4\065\ufff4\066\ufff4\001\002\000\056\005\215\016\027" +
    "\036\037\042\041\043\051\047\053\050\035\051\031\053" +
    "\052\056\216\060\050\062\042\063\032\064\054\067\047" +
    "\070\040\071\030\074\043\075\034\076\044\077\026\100" +
    "\046\001\002\000\054\006\207\016\027\036\037\042\041" +
    "\043\051\047\053\050\035\051\031\053\052\060\050\062" +
    "\042\063\032\064\054\067\047\070\040\071\030\074\043" +
    "\075\034\076\044\077\026\100\046\001\002\000\036\006" +
    "\uffdc\013\066\014\076\015\073\016\065\017\071\020\072" +
    "\021\077\022\075\023\067\024\074\025\064\026\070\061" +
    "\uffdc\001\002\000\046\002\ufff0\003\ufff0\004\ufff0\006\ufff0" +
    "\012\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\041" +
    "\ufff0\045\ufff0\046\ufff0\053\ufff0\055\ufff0\061\ufff0\065\ufff0" +
    "\066\ufff0\001\002\000\006\006\212\061\211\001\002\000" +
    "\052\016\027\036\037\042\041\043\051\047\053\050\035" +
    "\051\031\053\052\060\050\062\042\063\032\064\054\067" +
    "\047\070\040\071\030\074\043\075\034\076\044\077\026" +
    "\100\046\001\002\000\046\002\ufff1\003\ufff1\004\ufff1\006" +
    "\ufff1\012\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\041\ufff1\045\ufff1\046\ufff1\053\ufff1\055\ufff1\061\ufff1\065" +
    "\ufff1\066\ufff1\001\002\000\036\006\uffdd\013\066\014\076" +
    "\015\073\016\065\017\071\020\072\021\077\022\075\023" +
    "\067\024\074\025\064\026\070\061\uffdd\001\002\000\076" +
    "\002\uffef\003\uffef\004\uffef\006\uffef\012\uffef\013\066\014" +
    "\076\015\073\016\065\017\071\020\072\021\077\022\075" +
    "\023\067\024\074\025\064\026\070\027\uffef\030\uffef\031" +
    "\uffef\032\uffef\033\uffef\041\uffef\045\uffef\046\uffef\053\uffef" +
    "\055\uffef\061\uffef\065\uffef\066\uffef\001\002\000\012\006" +
    "\230\011\231\053\232\057\227\001\002\000\004\005\221" +
    "\001\002\000\046\002\uffee\003\uffee\004\uffee\006\uffee\012" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\041\uffee" +
    "\045\uffee\046\uffee\053\uffee\055\uffee\061\uffee\065\uffee\066" +
    "\uffee\001\002\000\046\002\ufff3\003\ufff3\004\ufff3\006\ufff3" +
    "\012\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\041" +
    "\ufff3\045\ufff3\046\ufff3\053\ufff3\055\ufff3\061\ufff3\065\ufff3" +
    "\066\ufff3\001\002\000\012\006\230\011\231\053\232\057" +
    "\227\001\002\000\046\002\uffed\003\uffed\004\uffed\006\uffed" +
    "\012\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\041" +
    "\uffed\045\uffed\046\uffed\053\uffed\055\uffed\061\uffed\065\uffed" +
    "\066\uffed\001\002\000\046\002\uffe9\003\uffe9\004\uffe9\006" +
    "\uffe9\012\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\041\uffe9\045\uffe9\046\uffe9\053\uffe9\055\uffe9\061\uffe9\065" +
    "\uffe9\066\uffe9\001\002\000\006\006\uffe0\061\uffe0\001\002" +
    "\000\006\006\251\061\250\001\002\000\006\006\uffde\061" +
    "\uffde\001\002\000\004\011\245\001\002\000\006\011\237" +
    "\057\236\001\002\000\030\003\014\027\015\031\023\033" +
    "\017\041\013\045\004\046\020\053\021\055\016\065\005" +
    "\066\024\001\002\000\012\005\205\006\uffe1\054\204\061" +
    "\uffe1\001\002\000\032\003\014\012\234\027\015\031\023" +
    "\033\017\041\013\045\004\046\020\053\021\055\016\065" +
    "\005\066\024\001\002\000\046\002\uffe8\003\uffe8\004\uffe8" +
    "\006\uffe8\012\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\041\uffe8\045\uffe8\046\uffe8\053\uffe8\055\uffe8\061\uffe8" +
    "\065\uffe8\066\uffe8\001\002\000\040\002\uffff\003\uffff\012" +
    "\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\041\uffff" +
    "\045\uffff\046\uffff\053\uffff\055\uffff\065\uffff\066\uffff\001" +
    "\002\000\004\011\242\001\002\000\030\003\014\027\015" +
    "\031\023\033\017\041\013\045\004\046\020\053\021\055" +
    "\016\065\005\066\024\001\002\000\032\003\014\012\241" +
    "\027\015\031\023\033\017\041\013\045\004\046\020\053" +
    "\021\055\016\065\005\066\024\001\002\000\046\002\uffeb" +
    "\003\uffeb\004\uffeb\006\uffeb\012\uffeb\027\uffeb\030\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\041\uffeb\045\uffeb\046\uffeb\053\uffeb" +
    "\055\uffeb\061\uffeb\065\uffeb\066\uffeb\001\002\000\030\003" +
    "\014\027\015\031\023\033\017\041\013\045\004\046\020" +
    "\053\021\055\016\065\005\066\024\001\002\000\032\003" +
    "\014\012\244\027\015\031\023\033\017\041\013\045\004" +
    "\046\020\053\021\055\016\065\005\066\024\001\002\000" +
    "\046\002\uffe6\003\uffe6\004\uffe6\006\uffe6\012\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\032\uffe6\033\uffe6\041\uffe6\045\uffe6\046" +
    "\uffe6\053\uffe6\055\uffe6\061\uffe6\065\uffe6\066\uffe6\001\002" +
    "\000\030\003\014\027\015\031\023\033\017\041\013\045" +
    "\004\046\020\053\021\055\016\065\005\066\024\001\002" +
    "\000\032\003\014\012\247\027\015\031\023\033\017\041" +
    "\013\045\004\046\020\053\021\055\016\065\005\066\024" +
    "\001\002\000\046\002\uffe7\003\uffe7\004\uffe7\006\uffe7\012" +
    "\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\041\uffe7" +
    "\045\uffe7\046\uffe7\053\uffe7\055\uffe7\061\uffe7\065\uffe7\066" +
    "\uffe7\001\002\000\004\053\232\001\002\000\010\006\252" +
    "\011\231\057\227\001\002\000\004\057\236\001\002\000" +
    "\046\002\uffea\003\uffea\004\uffea\006\uffea\012\uffea\027\uffea" +
    "\030\uffea\031\uffea\032\uffea\033\uffea\041\uffea\045\uffea\046" +
    "\uffea\053\uffea\055\uffea\061\uffea\065\uffea\066\uffea\001\002" +
    "\000\006\006\uffdf\061\uffdf\001\002\000\046\002\uffec\003" +
    "\uffec\004\uffec\006\uffec\012\uffec\027\uffec\030\uffec\031\uffec" +
    "\032\uffec\033\uffec\041\uffec\045\uffec\046\uffec\053\uffec\055" +
    "\uffec\061\uffec\065\uffec\066\uffec\001\002\000\030\003\014" +
    "\027\015\031\023\033\017\041\013\045\004\046\020\053" +
    "\021\055\016\065\005\066\024\001\002\000\032\003\014" +
    "\012\260\027\015\031\023\033\017\041\013\045\004\046" +
    "\020\053\021\055\016\065\005\066\024\001\002\000\004" +
    "\045\261\001\002\000\004\005\262\001\002\000\052\016" +
    "\027\036\037\042\041\043\051\047\053\050\035\051\031" +
    "\053\052\060\050\062\042\063\032\064\054\067\047\070" +
    "\040\071\030\074\043\075\034\076\044\077\026\100\046" +
    "\001\002\000\012\006\264\034\153\035\155\037\154\001" +
    "\002\000\004\004\265\001\002\000\040\002\uffd3\003\uffd3" +
    "\012\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\041" +
    "\uffd3\045\uffd3\046\uffd3\053\uffd3\055\uffd3\065\uffd3\066\uffd3" +
    "\001\002\000\034\004\270\013\066\014\076\015\073\016" +
    "\065\017\071\020\072\021\077\022\075\023\067\024\074" +
    "\025\064\026\070\001\002\000\040\002\ufff6\003\ufff6\012" +
    "\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\041\ufff6" +
    "\045\ufff6\046\ufff6\053\ufff6\055\ufff6\065\ufff6\066\ufff6\001" +
    "\002\000\040\002\ufff7\003\ufff7\012\ufff7\027\ufff7\030\ufff7" +
    "\031\ufff7\032\ufff7\033\ufff7\041\ufff7\045\ufff7\046\ufff7\053" +
    "\ufff7\055\ufff7\065\ufff7\066\ufff7\001\002\000\052\016\027" +
    "\036\037\042\041\043\051\047\053\050\035\051\031\053" +
    "\052\060\050\062\042\063\032\064\054\067\047\070\040" +
    "\071\030\074\043\075\034\076\044\077\026\100\046\001" +
    "\002\000\034\006\273\013\066\014\076\015\073\016\065" +
    "\017\071\020\072\021\077\022\075\023\067\024\074\025" +
    "\064\026\070\001\002\000\042\002\ufffc\003\ufffc\004\274" +
    "\012\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\041" +
    "\ufffc\045\ufffc\046\ufffc\053\ufffc\055\ufffc\065\ufffc\066\ufffc" +
    "\001\002\000\040\002\ufffd\003\ufffd\012\ufffd\027\ufffd\030" +
    "\ufffd\031\ufffd\032\ufffd\033\ufffd\041\ufffd\045\ufffd\046\ufffd" +
    "\053\ufffd\055\ufffd\065\ufffd\066\ufffd\001\002\000\052\016" +
    "\027\036\037\042\041\043\051\047\053\050\035\051\031" +
    "\053\052\060\050\062\042\063\032\064\054\067\047\070" +
    "\040\071\030\074\043\075\034\076\044\077\026\100\046" +
    "\001\002\000\034\006\277\013\066\014\076\015\073\016" +
    "\065\017\071\020\072\021\077\022\075\023\067\024\074" +
    "\025\064\026\070\001\002\000\004\011\300\001\002\000" +
    "\006\030\304\032\301\001\002\000\030\003\014\027\015" +
    "\031\023\033\017\041\013\045\004\046\020\053\021\055" +
    "\016\065\005\066\024\001\002\000\010\012\310\030\304" +
    "\032\301\001\002\000\010\012\uffd1\030\uffd1\032\uffd1\001" +
    "\002\000\052\016\027\036\037\042\041\043\051\047\053" +
    "\050\035\051\031\053\052\060\050\062\042\063\032\064" +
    "\054\067\047\070\040\071\030\074\043\075\034\076\044" +
    "\077\026\100\046\001\002\000\034\013\066\014\076\015" +
    "\073\016\065\017\071\020\072\021\077\022\075\023\067" +
    "\024\074\025\064\026\070\040\306\001\002\000\030\003" +
    "\014\027\015\031\023\033\017\041\013\045\004\046\020" +
    "\053\021\055\016\065\005\066\024\001\002\000\036\003" +
    "\014\012\uffd0\027\015\030\uffd0\031\023\032\uffd0\033\017" +
    "\041\013\045\004\046\020\053\021\055\016\065\005\066" +
    "\024\001\002\000\040\002\uffd6\003\uffd6\012\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\041\uffd6\045\uffd6\046" +
    "\uffd6\053\uffd6\055\uffd6\065\uffd6\066\uffd6\001\002\000\010" +
    "\012\uffd2\030\uffd2\032\uffd2\001\002\000\036\003\014\012" +
    "\uffcf\027\015\030\uffcf\031\023\032\uffcf\033\017\041\013" +
    "\045\004\046\020\053\021\055\016\065\005\066\024\001" +
    "\002\000\040\002\ufff5\003\ufff5\012\ufff5\027\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\041\ufff5\045\ufff5\046\ufff5\053" +
    "\ufff5\055\ufff5\065\ufff5\066\ufff5\001\002\000\052\016\027" +
    "\036\037\042\041\043\051\047\053\050\035\051\031\053" +
    "\052\060\050\062\042\063\032\064\054\067\047\070\040" +
    "\071\030\074\043\075\034\076\044\077\026\100\046\001" +
    "\002\000\012\006\316\034\153\035\155\037\154\001\002" +
    "\000\004\011\317\001\002\000\030\003\014\027\015\031" +
    "\023\033\017\041\013\045\004\046\020\053\021\055\016" +
    "\065\005\066\024\001\002\000\032\003\014\012\321\027" +
    "\015\031\023\033\017\041\013\045\004\046\020\053\021" +
    "\055\016\065\005\066\024\001\002\000\042\002\uffd9\003" +
    "\uffd9\012\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\041\uffd9\044\322\045\uffd9\046\uffd9\053\uffd9\055\uffd9\065" +
    "\uffd9\066\uffd9\001\002\000\006\011\323\041\324\001\002" +
    "\000\030\003\014\027\015\031\023\033\017\041\013\045" +
    "\004\046\020\053\021\055\016\065\005\066\024\001\002" +
    "\000\004\005\325\001\002\000\052\016\027\036\037\042" +
    "\041\043\051\047\053\050\035\051\031\053\052\060\050" +
    "\062\042\063\032\064\054\067\047\070\040\071\030\074" +
    "\043\075\034\076\044\077\026\100\046\001\002\000\012" +
    "\006\327\034\153\035\155\037\154\001\002\000\004\011" +
    "\330\001\002\000\030\003\014\027\015\031\023\033\017" +
    "\041\013\045\004\046\020\053\021\055\016\065\005\066" +
    "\024\001\002\000\032\003\014\012\332\027\015\031\023" +
    "\033\017\041\013\045\004\046\020\053\021\055\016\065" +
    "\005\066\024\001\002\000\040\002\uffd7\003\uffd7\012\uffd7" +
    "\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\041\uffd7\045" +
    "\uffd7\046\uffd7\053\uffd7\055\uffd7\065\uffd7\066\uffd7\001\002" +
    "\000\032\003\014\012\334\027\015\031\023\033\017\041" +
    "\013\045\004\046\020\053\021\055\016\065\005\066\024" +
    "\001\002\000\040\002\uffd8\003\uffd8\012\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\041\uffd8\045\uffd8\046\uffd8" +
    "\053\uffd8\055\uffd8\065\uffd8\066\uffd8\001\002\000\040\002" +
    "\ufffb\003\ufffb\012\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\041\ufffb\045\ufffb\046\ufffb\053\ufffb\055\ufffb\065" +
    "\ufffb\066\ufffb\001\002\000\052\016\027\036\037\042\041" +
    "\043\051\047\053\050\035\051\031\053\052\060\050\062" +
    "\042\063\032\064\054\067\047\070\040\071\030\074\043" +
    "\075\034\076\044\077\026\100\046\001\002\000\006\006" +
    "\340\061\127\001\002\000\004\004\341\001\002\000\040" +
    "\002\uffdb\003\uffdb\012\uffdb\027\uffdb\030\uffdb\031\uffdb\032" +
    "\uffdb\033\uffdb\041\uffdb\045\uffdb\046\uffdb\053\uffdb\055\uffdb" +
    "\065\uffdb\066\uffdb\001\002\000\052\016\027\036\037\042" +
    "\041\043\051\047\053\050\035\051\031\053\052\060\050" +
    "\062\042\063\032\064\054\067\047\070\040\071\030\074" +
    "\043\075\034\076\044\077\026\100\046\001\002\000\012" +
    "\006\344\034\153\035\155\037\154\001\002\000\004\011" +
    "\345\001\002\000\030\003\014\027\015\031\023\033\017" +
    "\041\013\045\004\046\020\053\021\055\016\065\005\066" +
    "\024\001\002\000\032\003\014\012\347\027\015\031\023" +
    "\033\017\041\013\045\004\046\020\053\021\055\016\065" +
    "\005\066\024\001\002\000\040\002\uffd4\003\uffd4\012\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\041\uffd4\045" +
    "\uffd4\046\uffd4\053\uffd4\055\uffd4\065\uffd4\066\uffd4\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\016\002\021\003\007\004\011\020\010\021" +
    "\005\023\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\234\020" +
    "\010\021\005\023\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\265\006\032\001\001" +
    "\000\002\001\001\000\006\017\201\024\202\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\035\006\032\011\044\001\001\000\002\001\001\000" +
    "\006\005\173\006\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\151" +
    "\006\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\113\006\032\001\001\000" +
    "\010\005\056\006\032\012\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\062\006\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\112\006\032" +
    "\001\001\000\006\005\111\006\032\001\001\000\006\005" +
    "\110\006\032\001\001\000\006\005\107\006\032\001\001" +
    "\000\006\005\106\006\032\001\001\000\006\005\105\006" +
    "\032\001\001\000\006\005\104\006\032\001\001\000\006" +
    "\005\103\006\032\001\001\000\006\005\102\006\032\001" +
    "\001\000\006\005\101\006\032\001\001\000\006\005\100" +
    "\006\032\001\001\000\006\005\077\006\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\116\006\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\121\006\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\124" +
    "\006\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\131\006\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\133\006\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\136" +
    "\006\032\001\001\000\002\001\001\000\006\005\140\006" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\035\006\032\011\143\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\146\006\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\151\006\161\001\001\000\006\005\156" +
    "\006\032\001\001\000\006\005\151\006\155\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\160\006\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\163\006\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\035\006\032\011\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\171\006\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\175\006\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\213\006\032\016\216" +
    "\025\217\001\001\000\010\005\205\006\032\015\207\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\212\006\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\225\014\224" +
    "\023\223\027\254\030\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\013\225\014\224" +
    "\023\223\027\221\030\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\003" +
    "\232\004\011\020\010\021\005\023\006\001\001\000\006" +
    "\017\201\024\202\001\001\000\012\004\234\020\010\021" +
    "\005\023\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\237\004\011\020\010\021" +
    "\005\023\006\001\001\000\012\004\234\020\010\021\005" +
    "\023\006\001\001\000\002\001\001\000\014\003\242\004" +
    "\011\020\010\021\005\023\006\001\001\000\012\004\234" +
    "\020\010\021\005\023\006\001\001\000\002\001\001\000" +
    "\014\003\245\004\011\020\010\021\005\023\006\001\001" +
    "\000\012\004\234\020\010\021\005\023\006\001\001\000" +
    "\002\001\001\000\006\013\253\023\223\001\001\000\004" +
    "\030\252\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\256\004\011" +
    "\020\010\021\005\023\006\001\001\000\012\004\234\020" +
    "\010\021\005\023\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\151\006\262\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\271\006" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\275\006\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\301\010\302\001\001" +
    "\000\014\003\311\004\011\020\010\021\005\023\006\001" +
    "\001\000\004\010\310\001\001\000\002\001\001\000\006" +
    "\005\304\006\032\001\001\000\002\001\001\000\014\003" +
    "\306\004\011\020\010\021\005\023\006\001\001\000\012" +
    "\004\234\020\010\021\005\023\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\234\020\010\021\005" +
    "\023\006\001\001\000\002\001\001\000\006\005\151\006" +
    "\314\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\317\004\011\020\010\021\005\023\006\001\001\000" +
    "\012\004\234\020\010\021\005\023\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\332\004\011\020" +
    "\010\021\005\023\006\001\001\000\002\001\001\000\006" +
    "\005\151\006\325\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\330\004\011\020\010\021\005\023\006" +
    "\001\001\000\012\004\234\020\010\021\005\023\006\001" +
    "\001\000\002\001\001\000\012\004\234\020\010\021\005" +
    "\023\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\035\006\032\011\336\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\151\006" +
    "\342\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\345\004\011\020\010\021\005\023\006\001\001\000" +
    "\012\004\234\020\010\021\005\023\006\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Nodo> AST;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
    public LinkedList<Nodo> getAST() {
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        parser.AST=a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT= a;
                        RESULT.add(b);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT= new LinkedList<>();
                        RESULT.add(a);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= PRINT PARIZQ expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		  RESULT  =  new Imprimir ((Expresion)a);   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= PRINT PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  RESULT  =  new Imprimir ((Expresion)a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= Sentencia PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  RESULT = new Sentencia(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= Sentencia 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT = new Sentencia(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= Ciclos 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
        RESULT = (Nodo)a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= Graficas 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT=(Nodo)a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= RETURN expresion PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
        RESULT = new Retorno((Expresion)a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= RETURN PTCOMA 
            {
              Nodo RESULT =null;
		
        RESULT = new Retorno();
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= error PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println("error");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Sentencia ::= IDENTIFICADOR SentIgual 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(b instanceof Def){ 
                                                RESULT = new Asigna(a,((Def)b).getExp());
                                            }else if(b instanceof Llamada){
                                                RESULT = new LlamadaAMetodo(a,(Llamada)b);
                                            }else if(b instanceof DefFunc){
                                                RESULT = new Funcion(a,((DefFunc) b).getInstruccionesFuncion());
                                            }else if(b instanceof DefFuncP){
                                                RESULT = new Funcion(a,((DefFuncP) b).getParametrosFuncion(),((DefFuncP) b).getInstruccionesFuncion());
                                            }else{
                                                RESULT=b;
                                            }
                                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Sentencia",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SentIgual ::= IGUAL SentDef 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentIgual",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SentIgual ::= Llamada 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentIgual",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Llamada ::= PARIZQ ParametrosLlamada PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Llamada(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Llamada",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Llamada ::= PARIZQ PARDER 
            {
              Object RESULT =null;
		 RESULT = new Llamada (); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Llamada",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SentDef ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Def((Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentDef",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SentDef ::= Funcion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentDef",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Funcion ::= FUNCTION PARIZQ SentFunc 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Funcion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Funcion ::= PARIZQ SentFunc 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Funcion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SentFunc ::= PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new DefFunc((LinkedList<Nodo>)a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentFunc",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SentFunc ::= ListaParametros PARDER SentParam 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Parametro> a = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  RESULT =  new DefFuncP (a,(LinkedList<Nodo>)b);    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentFunc",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SentFunc ::= SentParam 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new DefFunc((LinkedList<Nodo>)a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentFunc",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SentParam ::= LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = c; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentParam",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SentParam ::= DEFFUN LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = c; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentParam",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SentParam ::= PARDER DEFFUN LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = a; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentParam",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListaExp ::= ListaExp COMA expresion 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT= a;
                RESULT.add((Expresion)b);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaExp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListaExp ::= expresion 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = new ArrayList<>();
                RESULT.add((Expresion)a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaExp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ListaExp2 ::= ListaExp2 COMA expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT= a;
                RESULT.add((Expresion)b);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaExp2",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ListaExp2 ::= expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = new ArrayList<>();
                RESULT.add((Expresion)a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaExp2",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Parametros ::= IDENTIFICADOR 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Parametro(a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Parametros ::= Sentencia 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 if(a instanceof Asigna){ RESULT = new Parametro(((Asigna) a).getExp(),((Asigna) a).getIdentificador());  }
                            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListaParametros ::= ListaParametros COMA Parametros 
            {
              ArrayList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Parametro> a = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro b = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                RESULT = a;
                                RESULT.add((Parametro) b);
                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListaParametros ::= Parametros 
            {
              ArrayList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro a = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                RESULT = new ArrayList<Parametro>();
                                RESULT.add((Parametro)a);    
                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ParametrosLlamada ::= ParametrosLlamada COMA expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT=a;
                        RESULT.add((Expresion)b);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParametrosLlamada",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ParametrosLlamada ::= expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = new ArrayList<>();
                        RESULT.add((Expresion)a);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParametrosLlamada",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Graficas ::= BARPLOT PARIZQ ListaExp PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT= new BarPlot(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Graficas",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Graficas ::= PIE PARIZQ ListaExp PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT= new PiePlot(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Graficas",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Ciclos ::= IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new If((Operacion)a,b);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Ciclos ::= IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER ELSE LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new If((Operacion)a,b,c);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Ciclos ::= IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER ELSE IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new IfElse((Operacion)a,(Operacion)d,b,c);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Ciclos ::= SWITCH PARIZQ expresion PARDER LLAVEIZQ listacase LLAVEDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoCase> b = (LinkedList<NodoCase>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new SwitchCase(b,(Expresion)a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Ciclos ::= BREAK PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new Break (a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Ciclos ::= WHILE PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new While((Expresion)a, b);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Ciclos ::= DO LLAVEIZQ instrucciones LLAVEDER WHILE PARIZQ expresioncomp PARDER PTCOMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            RESULT = new DoWhile((Expresion)a,b);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // listacase ::= listacase CASES 
            {
              LinkedList<NodoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoCase> a = (LinkedList<NodoCase>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoCase b = (NodoCase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                    RESULT=a;
                    RESULT.add(b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listacase",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // listacase ::= CASES 
            {
              LinkedList<NodoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoCase a = (NodoCase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT=new LinkedList<>();
                    RESULT.add(a);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listacase",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CASES ::= CASE expresion DOSP instrucciones 
            {
              NodoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT= new NodoCase((Expresion)a,b);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CASES ::= DEFAULT instrucciones 
            {
              NodoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT= new NodoCase(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= MENOS expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.UMENOS,(Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion MAS expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.SUMA,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion MENOS expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.RESTA,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion POR expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MULTIPLICACION,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion DIVIDIDO expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.DIVISION,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= expresion POTENCIA expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.POTENCIA,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= expresion MODULO expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MODULO,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= ENTERO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.INT));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= DECIMAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.DOUBLE));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= CADENA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.STRING));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= TRUE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.BOOLEAN));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= FALSE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.BOOLEAN));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new id(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= IDENTIFICADOR CORIZQ expresion CORDER CORIZQ expresion CORDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= NULL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.STRING));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= DEF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new Single(a,new Tipo(Tipo.tipo.DEF));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= REMOVE PARIZQ expresion COMA expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Remove((Expresion)a, (Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= TOLOWERCASE PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new toLowerCase((Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= TOUPPERCASE PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new toUperCase((Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= TRUNK PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Trunk((Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= ROUND PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Round((Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= CC PARIZQ ListaExp PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new C (a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= LIST PARIZQ ListaExp PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 // System.out.println(a);
                                                                RESULT = new Lista (a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= IDENTIFICADOR PARIZQ ListaExp2 PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new LlamadaFuncionExp(b, a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresion ::= STRINGLENGHT PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new StringLenght((Expresion) a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresion ::= TYPEOF PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new TypeOf((Expresion)a);    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresion ::= LENGHT PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Lenght((Expresion)a);   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresion ::= expresioncomp INTERROGACION expresion DOSP expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                 RESULT=new Operacion(Operacion.Tipo_operacion.TERNARIO,(Expresion)a, (Expresion)b,(Expresion)c); 
                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresioncomp ::= expresion IGUALD expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.IGUALIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresioncomp ::= expresion DESIGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.DESIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresioncomp ::= expresion MAYOR expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MAYOR,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresioncomp ::= expresion MENOR expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MENOR,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresioncomp ::= expresion MAYORIGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MAYORIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresioncomp ::= expresion MENORIGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MENORIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expresioncomp ::= expresioncomp AND expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.AND,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expresioncomp ::= expresioncomp OR expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.OR,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expresioncomp ::= NOT expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.NOT,(Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
