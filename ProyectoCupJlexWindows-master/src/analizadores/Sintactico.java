
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import arbol.Expresion;
import arbol.Nodo;
import arbol.Instruccion;
import arbol.Asignacion;
import arbol.Simbolo.*;
import arbol.TablaDeSimbolos;
import java.util.LinkedList;
import arbol.Operacion;
import arbol.Imprimir;
import arbol.If.If;
import arbol.If.IfElse;
import arbol.While.While;
import arbol.DoWhile.DoWhile;
import arbol.SwitchCase.NodoCase;
import arbol.SwitchCase.SwitchCase;
import arbol.SwitchCase.Break;
import arbol.Tipo.tipo.*;
import arbol.Tipo;
import arbol.Funciones.Parametro;
import arbol.Funciones.DefinicionDeFuncion;
import arbol.Funciones.Funcion;
import arbol.Funciones.LlamadaFuncion;
import arbol.Funciones.FuncionesDefinidas.TypeOf;
import arbol.Funciones.FuncionesDefinidas.Lenght;
import arbol.Funciones.FuncionesDefinidas.StringLenght;
import arbol.Funciones.FuncionesDefinidas.Remove;
import arbol.Funciones.FuncionesDefinidas.toLowerCase;
import arbol.Funciones.FuncionesDefinidas.toUperCase;
import arbol.Funciones.FuncionesDefinidas.Trunk;
import arbol.Funciones.FuncionesDefinidas.Round;
import arbol.Funciones.FuncionesDefinidas.C;
import arbol.Graficas.BarPlot;
import arbol.Graficas.PiePlot;
import arbol.Retorno.Retorno;
import java.util.ArrayList;
import arbol.Declaracion;
import arbol.DeclaracionVariable;
import arbol.Single;
import arbol.id;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\007" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\005\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\016" +
    "\006\000\002\016\007\000\002\016\005\000\002\016\006" +
    "\000\002\014\005\000\002\014\003\000\002\017\007\000" +
    "\002\017\007\000\002\020\011\000\002\020\015\000\002" +
    "\020\021\000\002\020\011\000\002\020\004\000\002\020" +
    "\011\000\002\020\013\000\002\015\012\000\002\015\013" +
    "\000\002\015\012\000\002\015\011\000\002\013\005\000" +
    "\002\013\003\000\002\012\003\000\002\012\005\000\002" +
    "\007\004\000\002\007\003\000\002\010\006\000\002\010" +
    "\004\000\002\021\005\000\002\021\006\000\002\011\005" +
    "\000\002\011\003\000\002\005\004\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\011\000\002\005\003\000" +
    "\002\005\005\000\002\005\003\000\002\005\005\000\002" +
    "\005\005\000\002\005\010\000\002\005\006\000\002\005" +
    "\006\000\002\005\006\000\002\005\006\000\002\005\006" +
    "\000\002\005\007\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\100\005\023\016\032\027\041\031\036\033" +
    "\024\036\015\041\020\042\025\043\050\045\044\046\053" +
    "\047\007\050\022\051\030\053\014\055\051\060\047\062" +
    "\017\063\033\064\040\065\011\066\016\067\043\070\031" +
    "\071\004\072\042\073\006\074\012\075\005\076\035\077" +
    "\052\001\002\000\050\005\023\016\032\036\015\042\025" +
    "\043\050\047\007\050\022\051\030\053\071\060\047\062" +
    "\017\063\033\071\004\072\042\073\006\074\012\075\005" +
    "\076\035\077\052\001\002\000\004\005\343\001\002\000" +
    "\004\005\336\001\002\000\160\002\uffcc\004\uffcc\005\uffcc" +
    "\006\uffcc\010\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\045\uffcc\046\uffcc\047\uffcc\050\uffcc\051" +
    "\uffcc\053\uffcc\055\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc" +
    "\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067\uffcc\070\uffcc\071" +
    "\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc" +
    "\001\002\000\102\002\000\005\023\016\032\027\041\031" +
    "\036\033\024\036\015\041\020\042\025\043\050\045\044" +
    "\046\053\047\007\050\022\051\030\053\057\055\051\060" +
    "\047\062\017\063\033\064\040\065\011\066\016\067\043" +
    "\070\031\071\004\072\042\073\006\074\012\075\005\076" +
    "\035\077\052\001\002\000\004\005\332\001\002\000\004" +
    "\005\327\001\002\000\110\002\ufff7\005\ufff7\012\ufff7\016" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\036\ufff7" +
    "\041\ufff7\042\ufff7\043\ufff7\045\ufff7\046\ufff7\047\ufff7\050" +
    "\ufff7\051\ufff7\053\ufff7\055\ufff7\060\ufff7\062\ufff7\063\ufff7" +
    "\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072" +
    "\ufff7\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\001\002" +
    "\000\040\005\064\007\062\013\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7" +
    "\025\uffc7\026\uffc7\054\326\001\002\000\050\005\023\016" +
    "\032\036\015\042\025\043\050\047\007\050\022\051\030" +
    "\053\071\060\047\062\017\063\033\071\004\072\042\073" +
    "\006\074\012\075\005\076\035\077\052\001\002\000\004" +
    "\005\321\001\002\000\004\005\316\001\002\000\004\005" +
    "\275\001\002\000\110\002\ufffd\005\ufffd\012\ufffd\016\ufffd" +
    "\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\036\ufffd\041" +
    "\ufffd\042\ufffd\043\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\053\ufffd\055\ufffd\060\ufffd\062\ufffd\063\ufffd\064" +
    "\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd" +
    "\073\ufffd\074\ufffd\075\ufffd\076\ufffd\077\ufffd\001\002\000" +
    "\160\002\uffcb\004\uffcb\005\uffcb\006\uffcb\010\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\021" +
    "\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\053\uffcb\055\uffcb\057" +
    "\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb" +
    "\066\uffcb\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb\074" +
    "\uffcb\075\uffcb\076\uffcb\077\uffcb\001\002\000\050\005\023" +
    "\016\032\036\015\042\025\043\050\047\007\050\022\051" +
    "\030\053\071\060\047\062\017\063\033\071\004\072\042" +
    "\073\006\074\012\075\005\076\035\077\052\001\002\000" +
    "\050\005\023\016\032\036\015\042\025\043\050\047\007" +
    "\050\022\051\030\053\071\060\047\062\017\063\033\071" +
    "\004\072\042\073\006\074\012\075\005\076\035\077\052" +
    "\001\002\000\160\002\uffc9\004\uffc9\005\uffc9\006\uffc9\010" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9" +
    "\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\053\uffc9" +
    "\055\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064" +
    "\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9\072\uffc9" +
    "\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9\001\002\000" +
    "\110\002\ufff9\005\ufff9\012\ufff9\016\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\036\ufff9\041\ufff9\042\ufff9\043" +
    "\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\053\ufff9" +
    "\055\ufff9\060\ufff9\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066" +
    "\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9" +
    "\075\ufff9\076\ufff9\077\ufff9\001\002\000\116\002\ufffa\005" +
    "\ufffa\012\ufffa\016\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa" +
    "\033\ufffa\034\127\035\131\036\ufffa\037\130\041\ufffa\042" +
    "\ufffa\043\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa" +
    "\053\ufffa\055\ufffa\060\ufffa\062\ufffa\063\ufffa\064\ufffa\065" +
    "\ufffa\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa" +
    "\074\ufffa\075\ufffa\076\ufffa\077\ufffa\001\002\000\160\002" +
    "\uffca\004\uffca\005\uffca\006\uffca\010\uffca\012\uffca\013\uffca" +
    "\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\040\uffca\041\uffca\042\uffca\043\uffca\045\uffca\046\uffca" +
    "\047\uffca\050\uffca\051\uffca\053\uffca\055\uffca\057\uffca\060" +
    "\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca" +
    "\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca\075" +
    "\uffca\076\uffca\077\uffca\001\002\000\004\005\267\001\002" +
    "\000\050\005\023\016\032\036\015\042\025\043\050\047" +
    "\007\050\022\051\030\053\071\060\047\062\017\063\033" +
    "\071\004\072\042\073\006\074\012\075\005\076\035\077" +
    "\052\001\002\000\160\002\uffc5\004\uffc5\005\uffc5\006\uffc5" +
    "\010\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5\016\uffc5\017" +
    "\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5" +
    "\043\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\053" +
    "\uffc5\055\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5" +
    "\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\072" +
    "\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5\001\002" +
    "\000\032\013\100\014\110\015\105\016\077\017\103\020" +
    "\104\021\111\022\107\023\101\024\106\025\076\026\102" +
    "\001\002\000\004\005\263\001\002\000\004\004\262\001" +
    "\002\000\110\002\ufffb\005\ufffb\012\ufffb\016\ufffb\027\ufffb" +
    "\030\ufffb\031\ufffb\032\ufffb\033\ufffb\036\ufffb\041\ufffb\042" +
    "\ufffb\043\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb" +
    "\053\ufffb\055\ufffb\060\ufffb\062\ufffb\063\ufffb\064\ufffb\065" +
    "\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb" +
    "\074\ufffb\075\ufffb\076\ufffb\077\ufffb\001\002\000\004\005" +
    "\253\001\002\000\004\005\235\001\002\000\050\005\023" +
    "\016\032\036\015\042\025\043\050\047\007\050\022\051" +
    "\030\053\071\060\047\062\017\063\033\071\004\072\042" +
    "\073\006\074\012\075\005\076\035\077\052\001\002\000" +
    "\004\005\227\001\002\000\004\005\221\001\002\000\110" +
    "\002\ufff8\005\ufff8\012\ufff8\016\ufff8\027\ufff8\030\ufff8\031" +
    "\ufff8\032\ufff8\033\ufff8\036\ufff8\041\ufff8\042\ufff8\043\ufff8" +
    "\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\053\ufff8\055" +
    "\ufff8\060\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8" +
    "\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075" +
    "\ufff8\076\ufff8\077\ufff8\001\002\000\004\002\220\001\002" +
    "\000\160\002\uffc3\004\uffc3\005\uffc3\006\uffc3\010\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\053\uffc3\055\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065" +
    "\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3" +
    "\074\uffc3\075\uffc3\076\uffc3\077\uffc3\001\002\000\160\002" +
    "\uffc8\004\uffc8\005\uffc8\006\uffc8\010\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\053\uffc8\055\uffc8\057\uffc8\060" +
    "\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8" +
    "\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075" +
    "\uffc8\076\uffc8\077\uffc8\001\002\000\004\005\214\001\002" +
    "\000\004\005\211\001\002\000\004\011\054\001\002\000" +
    "\100\005\023\016\032\027\041\031\036\033\024\036\015" +
    "\041\020\042\025\043\050\045\044\046\053\047\007\050" +
    "\022\051\030\053\014\055\051\060\047\062\017\063\033" +
    "\064\040\065\011\066\016\067\043\070\031\071\004\072" +
    "\042\073\006\074\012\075\005\076\035\077\052\001\002" +
    "\000\102\005\023\012\056\016\032\027\041\031\036\033" +
    "\024\036\015\041\020\042\025\043\050\045\044\046\053" +
    "\047\007\050\022\051\030\053\057\055\051\060\047\062" +
    "\017\063\033\064\040\065\011\066\016\067\043\070\031" +
    "\071\004\072\042\073\006\074\012\075\005\076\035\077" +
    "\052\001\002\000\004\045\204\001\002\000\040\005\064" +
    "\007\062\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020" +
    "\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\054\063\001\002\000\110\002\uffff\005\uffff\012\uffff\016" +
    "\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033\uffff\036\uffff" +
    "\041\uffff\042\uffff\043\uffff\045\uffff\046\uffff\047\uffff\050" +
    "\uffff\051\uffff\053\uffff\055\uffff\060\uffff\062\uffff\063\uffff" +
    "\064\uffff\065\uffff\066\uffff\067\uffff\070\uffff\071\uffff\072" +
    "\uffff\073\uffff\074\uffff\075\uffff\076\uffff\077\uffff\001\002" +
    "\000\110\002\ufffe\005\ufffe\012\ufffe\016\ufffe\027\ufffe\030" +
    "\ufffe\031\ufffe\032\ufffe\033\ufffe\036\ufffe\041\ufffe\042\ufffe" +
    "\043\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\053" +
    "\ufffe\055\ufffe\060\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe" +
    "\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe\074" +
    "\ufffe\075\ufffe\076\ufffe\077\ufffe\001\002\000\050\005\023" +
    "\016\032\036\015\042\025\043\050\047\007\050\022\051" +
    "\030\053\071\060\047\062\017\063\033\071\004\072\042" +
    "\073\006\074\012\075\005\076\035\077\052\001\002\000" +
    "\052\005\140\016\032\036\015\042\025\043\050\047\007" +
    "\050\022\051\030\053\071\056\141\060\047\062\017\063" +
    "\033\071\004\072\042\073\006\074\012\075\005\076\035" +
    "\077\052\001\002\000\052\005\023\006\067\016\032\036" +
    "\015\042\025\043\050\047\007\050\022\051\030\053\071" +
    "\060\047\062\017\063\033\071\004\072\042\073\006\074" +
    "\012\075\005\076\035\077\052\001\002\000\010\034\127" +
    "\035\131\037\130\001\002\000\036\006\uffed\013\100\014" +
    "\110\015\105\016\077\017\103\020\104\021\111\022\107" +
    "\023\101\024\106\025\076\026\102\061\uffed\001\002\000" +
    "\112\002\ufff0\004\126\005\ufff0\012\ufff0\016\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\033\ufff0\036\ufff0\041\ufff0\042" +
    "\ufff0\043\ufff0\045\ufff0\046\ufff0\047\ufff0\050\ufff0\051\ufff0" +
    "\053\ufff0\055\ufff0\060\ufff0\062\ufff0\063\ufff0\064\ufff0\065" +
    "\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0\072\ufff0\073\ufff0" +
    "\074\ufff0\075\ufff0\076\ufff0\077\ufff0\001\002\000\006\006" +
    "\073\061\072\001\002\000\162\002\uffc7\004\uffc7\005\uffc7" +
    "\006\uffc7\007\062\010\uffc7\012\uffc7\013\uffc7\014\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\045\uffc7\046\uffc7\047\uffc7\050" +
    "\uffc7\051\uffc7\053\uffc7\055\uffc7\057\uffc7\060\uffc7\061\uffc7" +
    "\062\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070" +
    "\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7" +
    "\077\uffc7\001\002\000\050\005\023\016\032\036\015\042" +
    "\025\043\050\047\007\050\022\051\030\053\071\060\047" +
    "\062\017\063\033\071\004\072\042\073\006\074\012\075" +
    "\005\076\035\077\052\001\002\000\112\002\uffef\004\074" +
    "\005\uffef\012\uffef\016\uffef\027\uffef\030\uffef\031\uffef\032" +
    "\uffef\033\uffef\036\uffef\041\uffef\042\uffef\043\uffef\045\uffef" +
    "\046\uffef\047\uffef\050\uffef\051\uffef\053\uffef\055\uffef\060" +
    "\uffef\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef" +
    "\070\uffef\071\uffef\072\uffef\073\uffef\074\uffef\075\uffef\076" +
    "\uffef\077\uffef\001\002\000\110\002\ufff1\005\ufff1\012\ufff1" +
    "\016\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\036" +
    "\ufff1\041\ufff1\042\ufff1\043\ufff1\045\ufff1\046\ufff1\047\ufff1" +
    "\050\ufff1\051\ufff1\053\ufff1\055\ufff1\060\ufff1\062\ufff1\063" +
    "\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1" +
    "\072\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1\077\ufff1\001" +
    "\002\000\036\006\uffee\013\100\014\110\015\105\016\077" +
    "\017\103\020\104\021\111\022\107\023\101\024\106\025" +
    "\076\026\102\061\uffee\001\002\000\050\005\023\016\032" +
    "\036\015\042\025\043\050\047\007\050\022\051\030\053" +
    "\071\060\047\062\017\063\033\071\004\072\042\073\006" +
    "\074\012\075\005\076\035\077\052\001\002\000\050\005" +
    "\023\016\032\036\015\042\025\043\050\047\007\050\022" +
    "\051\030\053\071\060\047\062\017\063\033\071\004\072" +
    "\042\073\006\074\012\075\005\076\035\077\052\001\002" +
    "\000\050\005\023\016\032\036\015\042\025\043\050\047" +
    "\007\050\022\051\030\053\071\060\047\062\017\063\033" +
    "\071\004\072\042\073\006\074\012\075\005\076\035\077" +
    "\052\001\002\000\050\005\023\016\032\036\015\042\025" +
    "\043\050\047\007\050\022\051\030\053\071\060\047\062" +
    "\017\063\033\071\004\072\042\073\006\074\012\075\005" +
    "\076\035\077\052\001\002\000\050\005\023\016\032\036" +
    "\015\042\025\043\050\047\007\050\022\051\030\053\071" +
    "\060\047\062\017\063\033\071\004\072\042\073\006\074" +
    "\012\075\005\076\035\077\052\001\002\000\050\005\023" +
    "\016\032\036\015\042\025\043\050\047\007\050\022\051" +
    "\030\053\071\060\047\062\017\063\033\071\004\072\042" +
    "\073\006\074\012\075\005\076\035\077\052\001\002\000" +
    "\050\005\023\016\032\036\015\042\025\043\050\047\007" +
    "\050\022\051\030\053\071\060\047\062\017\063\033\071" +
    "\004\072\042\073\006\074\012\075\005\076\035\077\052" +
    "\001\002\000\050\005\023\016\032\036\015\042\025\043" +
    "\050\047\007\050\022\051\030\053\071\060\047\062\017" +
    "\063\033\071\004\072\042\073\006\074\012\075\005\076" +
    "\035\077\052\001\002\000\050\005\023\016\032\036\015" +
    "\042\025\043\050\047\007\050\022\051\030\053\071\060" +
    "\047\062\017\063\033\071\004\072\042\073\006\074\012" +
    "\075\005\076\035\077\052\001\002\000\050\005\023\016" +
    "\032\036\015\042\025\043\050\047\007\050\022\051\030" +
    "\053\071\060\047\062\017\063\033\071\004\072\042\073" +
    "\006\074\012\075\005\076\035\077\052\001\002\000\050" +
    "\005\023\016\032\036\015\042\025\043\050\047\007\050" +
    "\022\051\030\053\071\060\047\062\017\063\033\071\004" +
    "\072\042\073\006\074\012\075\005\076\035\077\052\001" +
    "\002\000\050\005\023\016\032\036\015\042\025\043\050" +
    "\047\007\050\022\051\030\053\071\060\047\062\017\063" +
    "\033\071\004\072\042\073\006\074\012\075\005\076\035" +
    "\077\052\001\002\000\146\002\uffb9\005\uffb9\006\uffb9\012" +
    "\uffb9\013\100\014\110\015\105\016\uffb9\017\103\020\104" +
    "\021\111\022\107\023\101\024\106\025\076\026\102\027" +
    "\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\037\uffb9\041\uffb9\042\uffb9\043\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\050\uffb9\051\uffb9\053\uffb9\055\uffb9\060\uffb9" +
    "\062\uffb9\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070" +
    "\uffb9\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9" +
    "\077\uffb9\001\002\000\160\002\uffcd\004\uffcd\005\uffcd\006" +
    "\uffcd\010\uffcd\012\uffcd\013\100\014\uffcd\015\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\021\111\022\107\023\101\024\106\025" +
    "\076\026\102\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\053\uffcd\055\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063" +
    "\uffcd\064\uffcd\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd" +
    "\072\uffcd\073\uffcd\074\uffcd\075\uffcd\076\uffcd\077\uffcd\001" +
    "\002\000\146\002\uffb7\005\uffb7\006\uffb7\012\uffb7\013\100" +
    "\014\110\015\105\016\uffb7\017\103\020\104\021\111\022" +
    "\107\023\101\024\106\025\076\026\102\027\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\041\uffb7\042\uffb7\043\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\053\uffb7\055\uffb7\060\uffb7\062\uffb7\063" +
    "\uffb7\064\uffb7\065\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7" +
    "\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\001" +
    "\002\000\146\002\uffb5\005\uffb5\006\uffb5\012\uffb5\013\100" +
    "\014\110\015\105\016\uffb5\017\103\020\104\021\111\022" +
    "\107\023\101\024\106\025\076\026\102\027\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037" +
    "\uffb5\041\uffb5\042\uffb5\043\uffb5\045\uffb5\046\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\053\uffb5\055\uffb5\060\uffb5\062\uffb5\063" +
    "\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5\070\uffb5\071\uffb5" +
    "\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5\001" +
    "\002\000\160\002\uffd2\004\uffd2\005\uffd2\006\uffd2\010\uffd2" +
    "\012\uffd2\013\100\014\110\015\uffd2\016\uffd2\017\103\020" +
    "\104\021\111\022\107\023\101\024\106\025\076\026\102" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\045\uffd2\046\uffd2\047\uffd2\050\uffd2\051\uffd2\053\uffd2\055" +
    "\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2\064\uffd2" +
    "\065\uffd2\066\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2\073" +
    "\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2\001\002\000\160" +
    "\002\uffcf\004\uffcf\005\uffcf\006\uffcf\010\uffcf\012\uffcf\013" +
    "\100\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\111" +
    "\022\107\023\101\024\106\025\076\026\102\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\053\uffcf\055\uffcf\057\uffcf" +
    "\060\uffcf\061\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066" +
    "\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf" +
    "\075\uffcf\076\uffcf\077\uffcf\001\002\000\160\002\uffd0\004" +
    "\uffd0\005\uffd0\006\uffd0\010\uffd0\012\uffd0\013\100\014\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\111\022\107\023" +
    "\101\024\106\025\076\026\102\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\045\uffd0\046\uffd0\047\uffd0" +
    "\050\uffd0\051\uffd0\053\uffd0\055\uffd0\057\uffd0\060\uffd0\061" +
    "\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0" +
    "\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075\uffd0\076" +
    "\uffd0\077\uffd0\001\002\000\146\002\uffb8\005\uffb8\006\uffb8" +
    "\012\uffb8\013\100\014\110\015\105\016\uffb8\017\103\020" +
    "\104\021\111\022\107\023\101\024\106\025\076\026\102" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\037\uffb8\041\uffb8\042\uffb8\043\uffb8\045\uffb8" +
    "\046\uffb8\047\uffb8\050\uffb8\051\uffb8\053\uffb8\055\uffb8\060" +
    "\uffb8\062\uffb8\063\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8" +
    "\070\uffb8\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076" +
    "\uffb8\077\uffb8\001\002\000\146\002\uffb6\005\uffb6\006\uffb6" +
    "\012\uffb6\013\100\014\110\015\105\016\uffb6\017\103\020" +
    "\104\021\111\022\107\023\101\024\106\025\076\026\102" +
    "\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\036\uffb6\037\uffb6\041\uffb6\042\uffb6\043\uffb6\045\uffb6" +
    "\046\uffb6\047\uffb6\050\uffb6\051\uffb6\053\uffb6\055\uffb6\060" +
    "\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6" +
    "\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076" +
    "\uffb6\077\uffb6\001\002\000\160\002\uffce\004\uffce\005\uffce" +
    "\006\uffce\010\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\020\uffce\021\111\022\107\023\101\024\106" +
    "\025\076\026\102\027\uffce\030\uffce\031\uffce\032\uffce\033" +
    "\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\042\uffce\043\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051" +
    "\uffce\053\uffce\055\uffce\057\uffce\060\uffce\061\uffce\062\uffce" +
    "\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce\071" +
    "\uffce\072\uffce\073\uffce\074\uffce\075\uffce\076\uffce\077\uffce" +
    "\001\002\000\160\002\uffd1\004\uffd1\005\uffd1\006\uffd1\010" +
    "\uffd1\012\uffd1\013\100\014\110\015\uffd1\016\uffd1\017\103" +
    "\020\104\021\111\022\107\023\101\024\106\025\076\026" +
    "\102\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\045\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\053\uffd1" +
    "\055\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063\uffd1\064" +
    "\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1" +
    "\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\001\002\000" +
    "\146\002\uffb4\005\uffb4\006\uffb4\012\uffb4\013\100\014\110" +
    "\015\105\016\uffb4\017\103\020\104\021\111\022\107\023" +
    "\101\024\106\025\076\026\102\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037\uffb4\041" +
    "\uffb4\042\uffb4\043\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4" +
    "\051\uffb4\053\uffb4\055\uffb4\060\uffb4\062\uffb4\063\uffb4\064" +
    "\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4\071\uffb4\072\uffb4" +
    "\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\001\002\000" +
    "\110\002\ufff2\005\ufff2\012\ufff2\016\ufff2\027\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\036\ufff2\041\ufff2\042\ufff2\043" +
    "\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\051\ufff2\053\ufff2" +
    "\055\ufff2\060\ufff2\062\ufff2\063\ufff2\064\ufff2\065\ufff2\066" +
    "\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2" +
    "\075\ufff2\076\ufff2\077\ufff2\001\002\000\050\005\023\016" +
    "\032\036\015\042\025\043\050\047\007\050\022\051\030" +
    "\053\071\060\047\062\017\063\033\071\004\072\042\073" +
    "\006\074\012\075\005\076\035\077\052\001\002\000\050" +
    "\005\023\016\032\036\015\042\025\043\050\047\007\050" +
    "\022\051\030\053\071\060\047\062\017\063\033\071\004" +
    "\072\042\073\006\074\012\075\005\076\035\077\052\001" +
    "\002\000\050\005\023\016\032\036\015\042\025\043\050" +
    "\047\007\050\022\051\030\053\071\060\047\062\017\063" +
    "\033\071\004\072\042\073\006\074\012\075\005\076\035" +
    "\077\052\001\002\000\120\002\uffb2\005\uffb2\006\uffb2\012" +
    "\uffb2\016\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2" +
    "\034\uffb2\035\uffb2\036\uffb2\037\uffb2\041\uffb2\042\uffb2\043" +
    "\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\053\uffb2" +
    "\055\uffb2\060\uffb2\062\uffb2\063\uffb2\064\uffb2\065\uffb2\066" +
    "\uffb2\067\uffb2\070\uffb2\071\uffb2\072\uffb2\073\uffb2\074\uffb2" +
    "\075\uffb2\076\uffb2\077\uffb2\001\002\000\034\013\100\014" +
    "\110\015\105\016\077\017\103\020\104\021\111\022\107" +
    "\023\101\024\106\025\076\026\102\040\134\001\002\000" +
    "\050\005\023\016\032\036\015\042\025\043\050\047\007" +
    "\050\022\051\030\053\071\060\047\062\017\063\033\071" +
    "\004\072\042\073\006\074\012\075\005\076\035\077\052" +
    "\001\002\000\160\002\uffba\004\uffba\005\uffba\006\uffba\010" +
    "\uffba\012\uffba\013\100\014\110\015\105\016\077\017\103" +
    "\020\104\021\111\022\107\023\101\024\106\025\076\026" +
    "\102\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043" +
    "\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\053\uffba" +
    "\055\uffba\057\uffba\060\uffba\061\uffba\062\uffba\063\uffba\064" +
    "\uffba\065\uffba\066\uffba\067\uffba\070\uffba\071\uffba\072\uffba" +
    "\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba\001\002\000" +
    "\120\002\uffb3\005\uffb3\006\uffb3\012\uffb3\016\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\036" +
    "\uffb3\037\uffb3\041\uffb3\042\uffb3\043\uffb3\045\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\053\uffb3\055\uffb3\060\uffb3\062" +
    "\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3" +
    "\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\076\uffb3\077" +
    "\uffb3\001\002\000\140\002\uffd7\004\176\005\uffd7\012\uffd7" +
    "\013\100\014\110\015\105\016\077\017\103\020\104\021" +
    "\111\022\107\023\101\024\106\025\076\026\102\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\036\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7" +
    "\053\uffd7\055\uffd7\060\uffd7\062\uffd7\063\uffd7\064\uffd7\065" +
    "\uffd7\066\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7\073\uffd7" +
    "\074\uffd7\075\uffd7\076\uffd7\077\uffd7\001\002\000\052\005" +
    "\023\016\032\036\015\042\025\043\050\047\007\050\022" +
    "\051\030\053\165\057\164\060\047\062\017\063\033\071" +
    "\004\072\042\073\006\074\012\075\005\076\035\077\052" +
    "\001\002\000\004\005\142\001\002\000\006\006\143\053" +
    "\144\001\002\000\004\011\157\001\002\000\012\006\uffdd" +
    "\054\155\057\uffdd\061\uffdd\001\002\000\006\006\150\061" +
    "\147\001\002\000\010\006\uffde\057\uffde\061\uffde\001\002" +
    "\000\004\053\144\001\002\000\004\011\151\001\002\000" +
    "\100\005\023\016\032\027\041\031\036\033\024\036\015" +
    "\041\020\042\025\043\050\045\044\046\053\047\007\050" +
    "\022\051\030\053\014\055\051\060\047\062\017\063\033" +
    "\064\040\065\011\066\016\067\043\070\031\071\004\072" +
    "\042\073\006\074\012\075\005\076\035\077\052\001\002" +
    "\000\102\005\023\012\153\016\032\027\041\031\036\033" +
    "\024\036\015\041\020\042\025\043\050\045\044\046\053" +
    "\047\007\050\022\051\030\053\057\055\051\060\047\062" +
    "\017\063\033\064\040\065\011\066\016\067\043\070\031" +
    "\071\004\072\042\073\006\074\012\075\005\076\035\077" +
    "\052\001\002\000\110\002\uffe2\005\uffe2\012\uffe2\016\uffe2" +
    "\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\036\uffe2\041" +
    "\uffe2\042\uffe2\043\uffe2\045\uffe2\046\uffe2\047\uffe2\050\uffe2" +
    "\051\uffe2\053\uffe2\055\uffe2\060\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2" +
    "\073\uffe2\074\uffe2\075\uffe2\076\uffe2\077\uffe2\001\002\000" +
    "\010\006\uffdf\057\uffdf\061\uffdf\001\002\000\050\005\023" +
    "\016\032\036\015\042\025\043\050\047\007\050\022\051" +
    "\030\053\071\060\047\062\017\063\033\071\004\072\042" +
    "\073\006\074\012\075\005\076\035\077\052\001\002\000" +
    "\040\006\uffdc\013\100\014\110\015\105\016\077\017\103" +
    "\020\104\021\111\022\107\023\101\024\106\025\076\026" +
    "\102\057\uffdc\061\uffdc\001\002\000\100\005\023\016\032" +
    "\027\041\031\036\033\024\036\015\041\020\042\025\043" +
    "\050\045\044\046\053\047\007\050\022\051\030\053\014" +
    "\055\051\060\047\062\017\063\033\064\040\065\011\066" +
    "\016\067\043\070\031\071\004\072\042\073\006\074\012" +
    "\075\005\076\035\077\052\001\002\000\102\005\023\012" +
    "\161\016\032\027\041\031\036\033\024\036\015\041\020" +
    "\042\025\043\050\045\044\046\053\047\007\050\022\051" +
    "\030\053\057\055\051\060\047\062\017\063\033\064\040" +
    "\065\011\066\016\067\043\070\031\071\004\072\042\073" +
    "\006\074\012\075\005\076\035\077\052\001\002\000\110" +
    "\002\uffe3\005\uffe3\012\uffe3\016\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\036\uffe3\041\uffe3\042\uffe3\043\uffe3" +
    "\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\053\uffe3\055" +
    "\uffe3\060\uffe3\062\uffe3\063\uffe3\064\uffe3\065\uffe3\066\uffe3" +
    "\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3\074\uffe3\075" +
    "\uffe3\076\uffe3\077\uffe3\001\002\000\006\057\172\061\147" +
    "\001\002\000\034\006\171\013\100\014\110\015\105\016" +
    "\077\017\103\020\104\021\111\022\107\023\101\024\106" +
    "\025\076\026\102\001\002\000\004\011\166\001\002\000" +
    "\044\006\uffc7\007\062\013\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\054\155\057\uffdd\061\uffdd\001\002\000\100" +
    "\005\023\016\032\027\041\031\036\033\024\036\015\041" +
    "\020\042\025\043\050\045\044\046\053\047\007\050\022" +
    "\051\030\053\014\055\051\060\047\062\017\063\033\064" +
    "\040\065\011\066\016\067\043\070\031\071\004\072\042" +
    "\073\006\074\012\075\005\076\035\077\052\001\002\000" +
    "\102\005\023\012\170\016\032\027\041\031\036\033\024" +
    "\036\015\041\020\042\025\043\050\045\044\046\053\047" +
    "\007\050\022\051\030\053\057\055\051\060\047\062\017" +
    "\063\033\064\040\065\011\066\016\067\043\070\031\071" +
    "\004\072\042\073\006\074\012\075\005\076\035\077\052" +
    "\001\002\000\110\002\uffe0\005\uffe0\012\uffe0\016\uffe0\027" +
    "\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\036\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051" +
    "\uffe0\053\uffe0\055\uffe0\060\uffe0\062\uffe0\063\uffe0\064\uffe0" +
    "\065\uffe0\066\uffe0\067\uffe0\070\uffe0\071\uffe0\072\uffe0\073" +
    "\uffe0\074\uffe0\075\uffe0\076\uffe0\077\uffe0\001\002\000\160" +
    "\002\uffc4\004\uffc4\005\uffc4\006\uffc4\010\uffc4\012\uffc4\013" +
    "\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\053\uffc4\055\uffc4\057\uffc4" +
    "\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4\066" +
    "\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4" +
    "\075\uffc4\076\uffc4\077\uffc4\001\002\000\004\011\173\001" +
    "\002\000\100\005\023\016\032\027\041\031\036\033\024" +
    "\036\015\041\020\042\025\043\050\045\044\046\053\047" +
    "\007\050\022\051\030\053\014\055\051\060\047\062\017" +
    "\063\033\064\040\065\011\066\016\067\043\070\031\071" +
    "\004\072\042\073\006\074\012\075\005\076\035\077\052" +
    "\001\002\000\102\005\023\012\175\016\032\027\041\031" +
    "\036\033\024\036\015\041\020\042\025\043\050\045\044" +
    "\046\053\047\007\050\022\051\030\053\057\055\051\060" +
    "\047\062\017\063\033\064\040\065\011\066\016\067\043" +
    "\070\031\071\004\072\042\073\006\074\012\075\005\076" +
    "\035\077\052\001\002\000\110\002\uffe1\005\uffe1\012\uffe1" +
    "\016\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\036" +
    "\uffe1\041\uffe1\042\uffe1\043\uffe1\045\uffe1\046\uffe1\047\uffe1" +
    "\050\uffe1\051\uffe1\053\uffe1\055\uffe1\060\uffe1\062\uffe1\063" +
    "\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070\uffe1\071\uffe1" +
    "\072\uffe1\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1\001" +
    "\002\000\110\002\uffd6\005\uffd6\012\uffd6\016\uffd6\027\uffd6" +
    "\030\uffd6\031\uffd6\032\uffd6\033\uffd6\036\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\053\uffd6\055\uffd6\060\uffd6\062\uffd6\063\uffd6\064\uffd6\065" +
    "\uffd6\066\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6\073\uffd6" +
    "\074\uffd6\075\uffd6\076\uffd6\077\uffd6\001\002\000\034\010" +
    "\200\013\100\014\110\015\105\016\077\017\103\020\104" +
    "\021\111\022\107\023\101\024\106\025\076\026\102\001" +
    "\002\000\004\007\201\001\002\000\050\005\023\016\032" +
    "\036\015\042\025\043\050\047\007\050\022\051\030\053" +
    "\071\060\047\062\017\063\033\071\004\072\042\073\006" +
    "\074\012\075\005\076\035\077\052\001\002\000\034\010" +
    "\203\013\100\014\110\015\105\016\077\017\103\020\104" +
    "\021\111\022\107\023\101\024\106\025\076\026\102\001" +
    "\002\000\160\002\uffc6\004\uffc6\005\uffc6\006\uffc6\010\uffc6" +
    "\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020" +
    "\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\053\uffc6\055" +
    "\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6" +
    "\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073" +
    "\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\001\002\000\004" +
    "\005\205\001\002\000\050\005\023\016\032\036\015\042" +
    "\025\043\050\047\007\050\022\051\030\053\071\060\047" +
    "\062\017\063\033\071\004\072\042\073\006\074\012\075" +
    "\005\076\035\077\052\001\002\000\012\006\207\034\127" +
    "\035\131\037\130\001\002\000\004\004\210\001\002\000" +
    "\110\002\uffe4\005\uffe4\012\uffe4\016\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\036\uffe4\041\uffe4\042\uffe4\043" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\051\uffe4\053\uffe4" +
    "\055\uffe4\060\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4\066" +
    "\uffe4\067\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4" +
    "\075\uffe4\076\uffe4\077\uffe4\001\002\000\050\005\023\016" +
    "\032\036\015\042\025\043\050\047\007\050\022\051\030" +
    "\053\071\060\047\062\017\063\033\071\004\072\042\073" +
    "\006\074\012\075\005\076\035\077\052\001\002\000\034" +
    "\006\213\013\100\014\110\015\105\016\077\017\103\020" +
    "\104\021\111\022\107\023\101\024\106\025\076\026\102" +
    "\001\002\000\160\002\uffbc\004\uffbc\005\uffbc\006\uffbc\010" +
    "\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc" +
    "\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043" +
    "\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\053\uffbc" +
    "\055\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063\uffbc\064" +
    "\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\072\uffbc" +
    "\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc\001\002\000" +
    "\050\005\023\016\032\036\015\042\025\043\050\047\007" +
    "\050\022\051\030\053\071\060\047\062\017\063\033\071" +
    "\004\072\042\073\006\074\012\075\005\076\035\077\052" +
    "\001\002\000\034\006\216\013\100\014\110\015\105\016" +
    "\077\017\103\020\104\021\111\022\107\023\101\024\106" +
    "\025\076\026\102\001\002\000\004\004\217\001\002\000" +
    "\110\002\ufffc\005\ufffc\012\ufffc\016\ufffc\027\ufffc\030\ufffc" +
    "\031\ufffc\032\ufffc\033\ufffc\036\ufffc\041\ufffc\042\ufffc\043" +
    "\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\053\ufffc" +
    "\055\ufffc\060\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066" +
    "\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\074\ufffc" +
    "\075\ufffc\076\ufffc\077\ufffc\001\002\000\004\002\001\001" +
    "\002\000\050\005\023\016\032\036\015\042\025\043\050" +
    "\047\007\050\022\051\030\053\071\060\047\062\017\063" +
    "\033\071\004\072\042\073\006\074\012\075\005\076\035" +
    "\077\052\001\002\000\012\006\223\034\127\035\131\037" +
    "\130\001\002\000\004\011\224\001\002\000\100\005\023" +
    "\016\032\027\041\031\036\033\024\036\015\041\020\042" +
    "\025\043\050\045\044\046\053\047\007\050\022\051\030" +
    "\053\014\055\051\060\047\062\017\063\033\064\040\065" +
    "\011\066\016\067\043\070\031\071\004\072\042\073\006" +
    "\074\012\075\005\076\035\077\052\001\002\000\102\005" +
    "\023\012\226\016\032\027\041\031\036\033\024\036\015" +
    "\041\020\042\025\043\050\045\044\046\053\047\007\050" +
    "\022\051\030\053\057\055\051\060\047\062\017\063\033" +
    "\064\040\065\011\066\016\067\043\070\031\071\004\072" +
    "\042\073\006\074\012\075\005\076\035\077\052\001\002" +
    "\000\110\002\uffe5\005\uffe5\012\uffe5\016\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\033\uffe5\036\uffe5\041\uffe5\042\uffe5" +
    "\043\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\053" +
    "\uffe5\055\uffe5\060\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5" +
    "\066\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074" +
    "\uffe5\075\uffe5\076\uffe5\077\uffe5\001\002\000\050\005\023" +
    "\016\032\036\015\042\025\043\050\047\007\050\022\051" +
    "\030\053\071\060\047\062\017\063\033\071\004\072\042" +
    "\073\006\074\012\075\005\076\035\077\052\001\002\000" +
    "\034\006\231\013\100\014\110\015\105\016\077\017\103" +
    "\020\104\021\111\022\107\023\101\024\106\025\076\026" +
    "\102\001\002\000\004\004\232\001\002\000\110\002\ufff4" +
    "\005\ufff4\012\ufff4\016\ufff4\027\ufff4\030\ufff4\031\ufff4\032" +
    "\ufff4\033\ufff4\036\ufff4\041\ufff4\042\ufff4\043\ufff4\045\ufff4" +
    "\046\ufff4\047\ufff4\050\ufff4\051\ufff4\053\ufff4\055\ufff4\060" +
    "\ufff4\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4" +
    "\070\ufff4\071\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4\076" +
    "\ufff4\077\ufff4\001\002\000\034\006\234\013\100\014\110" +
    "\015\105\016\077\017\103\020\104\021\111\022\107\023" +
    "\101\024\106\025\076\026\102\001\002\000\160\002\uffc1" +
    "\004\uffc1\005\uffc1\006\uffc1\010\uffc1\012\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036\uffc1\037\uffc1" +
    "\040\uffc1\041\uffc1\042\uffc1\043\uffc1\045\uffc1\046\uffc1\047" +
    "\uffc1\050\uffc1\051\uffc1\053\uffc1\055\uffc1\057\uffc1\060\uffc1" +
    "\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067" +
    "\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1" +
    "\076\uffc1\077\uffc1\001\002\000\050\005\023\016\032\036" +
    "\015\042\025\043\050\047\007\050\022\051\030\053\071" +
    "\060\047\062\017\063\033\071\004\072\042\073\006\074" +
    "\012\075\005\076\035\077\052\001\002\000\034\006\237" +
    "\013\100\014\110\015\105\016\077\017\103\020\104\021" +
    "\111\022\107\023\101\024\106\025\076\026\102\001\002" +
    "\000\004\011\240\001\002\000\006\030\244\032\241\001" +
    "\002\000\100\005\023\016\032\027\041\031\036\033\024" +
    "\036\015\041\020\042\025\043\050\045\044\046\053\047" +
    "\007\050\022\051\030\053\014\055\051\060\047\062\017" +
    "\063\033\064\040\065\011\066\016\067\043\070\031\071" +
    "\004\072\042\073\006\074\012\075\005\076\035\077\052" +
    "\001\002\000\010\012\250\030\244\032\241\001\002\000" +
    "\010\012\uffda\030\uffda\032\uffda\001\002\000\050\005\023" +
    "\016\032\036\015\042\025\043\050\047\007\050\022\051" +
    "\030\053\071\060\047\062\017\063\033\071\004\072\042" +
    "\073\006\074\012\075\005\076\035\077\052\001\002\000" +
    "\034\013\100\014\110\015\105\016\077\017\103\020\104" +
    "\021\111\022\107\023\101\024\106\025\076\026\102\040" +
    "\246\001\002\000\100\005\023\016\032\027\041\031\036" +
    "\033\024\036\015\041\020\042\025\043\050\045\044\046" +
    "\053\047\007\050\022\051\030\053\014\055\051\060\047" +
    "\062\017\063\033\064\040\065\011\066\016\067\043\070" +
    "\031\071\004\072\042\073\006\074\012\075\005\076\035" +
    "\077\052\001\002\000\106\005\023\012\uffd9\016\032\027" +
    "\041\030\uffd9\031\036\032\uffd9\033\024\036\015\041\020" +
    "\042\025\043\050\045\044\046\053\047\007\050\022\051" +
    "\030\053\057\055\051\060\047\062\017\063\033\064\040" +
    "\065\011\066\016\067\043\070\031\071\004\072\042\073" +
    "\006\074\012\075\005\076\035\077\052\001\002\000\110" +
    "\002\uffe7\005\uffe7\012\uffe7\016\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\036\uffe7\041\uffe7\042\uffe7\043\uffe7" +
    "\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7\053\uffe7\055" +
    "\uffe7\060\uffe7\062\uffe7\063\uffe7\064\uffe7\065\uffe7\066\uffe7" +
    "\067\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075" +
    "\uffe7\076\uffe7\077\uffe7\001\002\000\010\012\uffdb\030\uffdb" +
    "\032\uffdb\001\002\000\106\005\023\012\uffd8\016\032\027" +
    "\041\030\uffd8\031\036\032\uffd8\033\024\036\015\041\020" +
    "\042\025\043\050\045\044\046\053\047\007\050\022\051" +
    "\030\053\057\055\051\060\047\062\017\063\033\064\040" +
    "\065\011\066\016\067\043\070\031\071\004\072\042\073" +
    "\006\074\012\075\005\076\035\077\052\001\002\000\050" +
    "\005\023\016\032\036\015\042\025\043\050\047\007\050" +
    "\022\051\030\053\071\060\047\062\017\063\033\071\004" +
    "\072\042\073\006\074\012\075\005\076\035\077\052\001" +
    "\002\000\036\006\uffd4\013\100\014\110\015\105\016\077" +
    "\017\103\020\104\021\111\022\107\023\101\024\106\025" +
    "\076\026\102\061\uffd4\001\002\000\006\006\257\061\256" +
    "\001\002\000\050\005\023\016\032\036\015\042\025\043" +
    "\050\047\007\050\022\051\030\053\071\060\047\062\017" +
    "\063\033\071\004\072\042\073\006\074\012\075\005\076" +
    "\035\077\052\001\002\000\004\004\260\001\002\000\110" +
    "\002\uffec\005\uffec\012\uffec\016\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\033\uffec\036\uffec\041\uffec\042\uffec\043\uffec" +
    "\045\uffec\046\uffec\047\uffec\050\uffec\051\uffec\053\uffec\055" +
    "\uffec\060\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec" +
    "\067\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074\uffec\075" +
    "\uffec\076\uffec\077\uffec\001\002\000\036\006\uffd5\013\100" +
    "\014\110\015\105\016\077\017\103\020\104\021\111\022" +
    "\107\023\101\024\106\025\076\026\102\061\uffd5\001\002" +
    "\000\110\002\uffe6\005\uffe6\012\uffe6\016\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\033\uffe6\036\uffe6\041\uffe6\042\uffe6" +
    "\043\uffe6\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\053" +
    "\uffe6\055\uffe6\060\uffe6\062\uffe6\063\uffe6\064\uffe6\065\uffe6" +
    "\066\uffe6\067\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6\074" +
    "\uffe6\075\uffe6\076\uffe6\077\uffe6\001\002\000\050\005\023" +
    "\016\032\036\015\042\025\043\050\047\007\050\022\051" +
    "\030\053\071\060\047\062\017\063\033\071\004\072\042" +
    "\073\006\074\012\075\005\076\035\077\052\001\002\000" +
    "\034\006\265\013\100\014\110\015\105\016\077\017\103" +
    "\020\104\021\111\022\107\023\101\024\106\025\076\026" +
    "\102\001\002\000\160\002\uffbd\004\uffbd\005\uffbd\006\uffbd" +
    "\010\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017" +
    "\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd" +
    "\043\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\053" +
    "\uffbd\055\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd" +
    "\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072" +
    "\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\001\002" +
    "\000\160\002\uffd3\004\uffd3\005\uffd3\006\uffd3\010\uffd3\012" +
    "\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3" +
    "\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\045" +
    "\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\053\uffd3\055\uffd3" +
    "\057\uffd3\060\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065" +
    "\uffd3\066\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3\073\uffd3" +
    "\074\uffd3\075\uffd3\076\uffd3\077\uffd3\001\002\000\050\005" +
    "\023\016\032\036\015\042\025\043\050\047\007\050\022" +
    "\051\030\053\071\060\047\062\017\063\033\071\004\072" +
    "\042\073\006\074\012\075\005\076\035\077\052\001\002" +
    "\000\034\006\271\013\100\014\110\015\105\016\077\017" +
    "\103\020\104\021\111\022\107\023\101\024\106\025\076" +
    "\026\102\001\002\000\004\004\272\001\002\000\110\002" +
    "\ufff3\005\ufff3\012\ufff3\016\ufff3\027\ufff3\030\ufff3\031\ufff3" +
    "\032\ufff3\033\ufff3\036\ufff3\041\ufff3\042\ufff3\043\ufff3\045" +
    "\ufff3\046\ufff3\047\ufff3\050\ufff3\051\ufff3\053\ufff3\055\ufff3" +
    "\060\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067" +
    "\ufff3\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3" +
    "\076\ufff3\077\ufff3\001\002\000\034\004\274\013\100\014" +
    "\110\015\105\016\077\017\103\020\104\021\111\022\107" +
    "\023\101\024\106\025\076\026\102\001\002\000\110\002" +
    "\ufff6\005\ufff6\012\ufff6\016\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\036\ufff6\041\ufff6\042\ufff6\043\ufff6\045" +
    "\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\053\ufff6\055\ufff6" +
    "\060\ufff6\062\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067" +
    "\ufff6\070\ufff6\071\ufff6\072\ufff6\073\ufff6\074\ufff6\075\ufff6" +
    "\076\ufff6\077\ufff6\001\002\000\050\005\023\016\032\036" +
    "\015\042\025\043\050\047\007\050\022\051\030\053\071" +
    "\060\047\062\017\063\033\071\004\072\042\073\006\074" +
    "\012\075\005\076\035\077\052\001\002\000\012\006\277" +
    "\034\127\035\131\037\130\001\002\000\004\011\300\001" +
    "\002\000\100\005\023\016\032\027\041\031\036\033\024" +
    "\036\015\041\020\042\025\043\050\045\044\046\053\047" +
    "\007\050\022\051\030\053\014\055\051\060\047\062\017" +
    "\063\033\064\040\065\011\066\016\067\043\070\031\071" +
    "\004\072\042\073\006\074\012\075\005\076\035\077\052" +
    "\001\002\000\102\005\023\012\302\016\032\027\041\031" +
    "\036\033\024\036\015\041\020\042\025\043\050\045\044" +
    "\046\053\047\007\050\022\051\030\053\057\055\051\060" +
    "\047\062\017\063\033\064\040\065\011\066\016\067\043" +
    "\070\031\071\004\072\042\073\006\074\012\075\005\076" +
    "\035\077\052\001\002\000\112\002\uffea\005\uffea\012\uffea" +
    "\016\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\036" +
    "\uffea\041\uffea\042\uffea\043\uffea\044\303\045\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\053\uffea\055\uffea\060\uffea\062" +
    "\uffea\063\uffea\064\uffea\065\uffea\066\uffea\067\uffea\070\uffea" +
    "\071\uffea\072\uffea\073\uffea\074\uffea\075\uffea\076\uffea\077" +
    "\uffea\001\002\000\006\011\304\041\305\001\002\000\100" +
    "\005\023\016\032\027\041\031\036\033\024\036\015\041" +
    "\020\042\025\043\050\045\044\046\053\047\007\050\022" +
    "\051\030\053\014\055\051\060\047\062\017\063\033\064" +
    "\040\065\011\066\016\067\043\070\031\071\004\072\042" +
    "\073\006\074\012\075\005\076\035\077\052\001\002\000" +
    "\004\005\306\001\002\000\050\005\023\016\032\036\015" +
    "\042\025\043\050\047\007\050\022\051\030\053\071\060" +
    "\047\062\017\063\033\071\004\072\042\073\006\074\012" +
    "\075\005\076\035\077\052\001\002\000\012\006\310\034" +
    "\127\035\131\037\130\001\002\000\004\011\311\001\002" +
    "\000\100\005\023\016\032\027\041\031\036\033\024\036" +
    "\015\041\020\042\025\043\050\045\044\046\053\047\007" +
    "\050\022\051\030\053\014\055\051\060\047\062\017\063" +
    "\033\064\040\065\011\066\016\067\043\070\031\071\004" +
    "\072\042\073\006\074\012\075\005\076\035\077\052\001" +
    "\002\000\102\005\023\012\313\016\032\027\041\031\036" +
    "\033\024\036\015\041\020\042\025\043\050\045\044\046" +
    "\053\047\007\050\022\051\030\053\057\055\051\060\047" +
    "\062\017\063\033\064\040\065\011\066\016\067\043\070" +
    "\031\071\004\072\042\073\006\074\012\075\005\076\035" +
    "\077\052\001\002\000\110\002\uffe8\005\uffe8\012\uffe8\016" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\036\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\045\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\053\uffe8\055\uffe8\060\uffe8\062\uffe8\063\uffe8" +
    "\064\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072" +
    "\uffe8\073\uffe8\074\uffe8\075\uffe8\076\uffe8\077\uffe8\001\002" +
    "\000\102\005\023\012\315\016\032\027\041\031\036\033" +
    "\024\036\015\041\020\042\025\043\050\045\044\046\053" +
    "\047\007\050\022\051\030\053\057\055\051\060\047\062" +
    "\017\063\033\064\040\065\011\066\016\067\043\070\031" +
    "\071\004\072\042\073\006\074\012\075\005\076\035\077" +
    "\052\001\002\000\110\002\uffe9\005\uffe9\012\uffe9\016\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\036\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\051\uffe9\053\uffe9\055\uffe9\060\uffe9\062\uffe9\063\uffe9\064" +
    "\uffe9\065\uffe9\066\uffe9\067\uffe9\070\uffe9\071\uffe9\072\uffe9" +
    "\073\uffe9\074\uffe9\075\uffe9\076\uffe9\077\uffe9\001\002\000" +
    "\050\005\023\016\032\036\015\042\025\043\050\047\007" +
    "\050\022\051\030\053\071\060\047\062\017\063\033\071" +
    "\004\072\042\073\006\074\012\075\005\076\035\077\052" +
    "\001\002\000\006\006\320\061\256\001\002\000\160\002" +
    "\uffbb\004\uffbb\005\uffbb\006\uffbb\010\uffbb\012\uffbb\013\uffbb" +
    "\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb\037" +
    "\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\045\uffbb\046\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\053\uffbb\055\uffbb\057\uffbb\060" +
    "\uffbb\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb" +
    "\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\074\uffbb\075" +
    "\uffbb\076\uffbb\077\uffbb\001\002\000\050\005\023\016\032" +
    "\036\015\042\025\043\050\047\007\050\022\051\030\053" +
    "\071\060\047\062\017\063\033\071\004\072\042\073\006" +
    "\074\012\075\005\076\035\077\052\001\002\000\034\006" +
    "\323\013\100\014\110\015\105\016\077\017\103\020\104" +
    "\021\111\022\107\023\101\024\106\025\076\026\102\001" +
    "\002\000\004\004\324\001\002\000\110\002\ufff5\005\ufff5" +
    "\012\ufff5\016\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\036\ufff5\041\ufff5\042\ufff5\043\ufff5\045\ufff5\046\ufff5" +
    "\047\ufff5\050\ufff5\051\ufff5\053\ufff5\055\ufff5\060\ufff5\062" +
    "\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5" +
    "\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\076\ufff5\077" +
    "\ufff5\001\002\000\120\002\uffb1\005\uffb1\006\uffb1\012\uffb1" +
    "\016\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\041\uffb1\042\uffb1\043\uffb1" +
    "\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\053\uffb1\055" +
    "\uffb1\060\uffb1\062\uffb1\063\uffb1\064\uffb1\065\uffb1\066\uffb1" +
    "\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1\074\uffb1\075" +
    "\uffb1\076\uffb1\077\uffb1\001\002\000\050\005\023\016\032" +
    "\036\015\042\025\043\050\047\007\050\022\051\030\053" +
    "\071\060\047\062\017\063\033\071\004\072\042\073\006" +
    "\074\012\075\005\076\035\077\052\001\002\000\050\005" +
    "\023\016\032\036\015\042\025\043\050\047\007\050\022" +
    "\051\030\053\071\060\047\062\017\063\033\071\004\072" +
    "\042\073\006\074\012\075\005\076\035\077\052\001\002" +
    "\000\034\006\331\013\100\014\110\015\105\016\077\017" +
    "\103\020\104\021\111\022\107\023\101\024\106\025\076" +
    "\026\102\001\002\000\160\002\uffbf\004\uffbf\005\uffbf\006" +
    "\uffbf\010\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\042" +
    "\uffbf\043\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\053\uffbf\055\uffbf\057\uffbf\060\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf" +
    "\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf\001" +
    "\002\000\050\005\023\016\032\036\015\042\025\043\050" +
    "\047\007\050\022\051\030\053\071\060\047\062\017\063" +
    "\033\071\004\072\042\073\006\074\012\075\005\076\035" +
    "\077\052\001\002\000\006\006\334\061\256\001\002\000" +
    "\004\004\335\001\002\000\110\002\uffeb\005\uffeb\012\uffeb" +
    "\016\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\036" +
    "\uffeb\041\uffeb\042\uffeb\043\uffeb\045\uffeb\046\uffeb\047\uffeb" +
    "\050\uffeb\051\uffeb\053\uffeb\055\uffeb\060\uffeb\062\uffeb\063" +
    "\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\071\uffeb" +
    "\072\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\001" +
    "\002\000\050\005\023\016\032\036\015\042\025\043\050" +
    "\047\007\050\022\051\030\053\071\060\047\062\017\063" +
    "\033\071\004\072\042\073\006\074\012\075\005\076\035" +
    "\077\052\001\002\000\034\013\100\014\110\015\105\016" +
    "\077\017\103\020\104\021\111\022\107\023\101\024\106" +
    "\025\076\026\102\061\340\001\002\000\050\005\023\016" +
    "\032\036\015\042\025\043\050\047\007\050\022\051\030" +
    "\053\071\060\047\062\017\063\033\071\004\072\042\073" +
    "\006\074\012\075\005\076\035\077\052\001\002\000\034" +
    "\006\342\013\100\014\110\015\105\016\077\017\103\020" +
    "\104\021\111\022\107\023\101\024\106\025\076\026\102" +
    "\001\002\000\160\002\uffc0\004\uffc0\005\uffc0\006\uffc0\010" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\053\uffc0" +
    "\055\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\064" +
    "\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0" +
    "\073\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\001\002\000" +
    "\050\005\023\016\032\036\015\042\025\043\050\047\007" +
    "\050\022\051\030\053\071\060\047\062\017\063\033\071" +
    "\004\072\042\073\006\074\012\075\005\076\035\077\052" +
    "\001\002\000\034\006\345\013\100\014\110\015\105\016" +
    "\077\017\103\020\104\021\111\022\107\023\101\024\106" +
    "\025\076\026\102\001\002\000\160\002\uffbe\004\uffbe\005" +
    "\uffbe\006\uffbe\010\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe\041" +
    "\uffbe\042\uffbe\043\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\051\uffbe\053\uffbe\055\uffbe\057\uffbe\060\uffbe\061\uffbe\062" +
    "\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe" +
    "\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077" +
    "\uffbe\001\002\000\034\006\347\013\100\014\110\015\105" +
    "\016\077\017\103\020\104\021\111\022\107\023\101\024" +
    "\106\025\076\026\102\001\002\000\160\002\uffc2\004\uffc2" +
    "\005\uffc2\006\uffc2\010\uffc2\012\uffc2\013\uffc2\014\uffc2\015" +
    "\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\043\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\053\uffc2\055\uffc2\057\uffc2\060\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070" +
    "\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2" +
    "\077\uffc2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\345\000\024\002\045\003\007\004\020\005\033\006" +
    "\026\016\012\017\044\020\025\021\036\001\001\000\006" +
    "\005\345\006\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\057\005\033\006\026" +
    "\015\060\016\012\017\044\020\025\021\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\033\006\324\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\162\006\064\001\001\000" +
    "\006\005\272\006\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\265\006\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\232\006\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\054\004\020\005\033\006\026" +
    "\016\012\017\044\020\025\021\036\001\001\000\022\004" +
    "\057\005\033\006\026\015\060\016\012\017\044\020\025" +
    "\021\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\176\006\064" +
    "\001\001\000\006\005\136\006\064\001\001\000\010\005" +
    "\065\006\064\014\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\074\006\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\124\006" +
    "\064\001\001\000\006\005\123\006\064\001\001\000\006" +
    "\005\122\006\064\001\001\000\006\005\121\006\064\001" +
    "\001\000\006\005\120\006\064\001\001\000\006\005\117" +
    "\006\064\001\001\000\006\005\116\006\064\001\001\000" +
    "\006\005\115\006\064\001\001\000\006\005\114\006\064" +
    "\001\001\000\006\005\113\006\064\001\001\000\006\005" +
    "\112\006\064\001\001\000\006\005\111\006\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\033\006\135\001\001\000\006\005\132\006" +
    "\064\001\001\000\006\005\033\006\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\134\006\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\162\006\064\012\145\013\161\001\001\000" +
    "\002\001\001\000\006\012\145\013\144\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\153\001\001\000\002\001\001\000\022" +
    "\003\151\004\020\005\033\006\026\016\012\017\044\020" +
    "\025\021\036\001\001\000\022\004\057\005\033\006\026" +
    "\015\060\016\012\017\044\020\025\021\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\155\006\064" +
    "\001\001\000\002\001\001\000\022\003\157\004\020\005" +
    "\033\006\026\016\012\017\044\020\025\021\036\001\001" +
    "\000\022\004\057\005\033\006\026\015\060\016\012\017" +
    "\044\020\025\021\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\166\004\020\005\033\006\026\016\012" +
    "\017\044\020\025\021\036\001\001\000\022\004\057\005" +
    "\033\006\026\015\060\016\012\017\044\020\025\021\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\173\004\020\005\033\006\026\016\012" +
    "\017\044\020\025\021\036\001\001\000\022\004\057\005" +
    "\033\006\026\015\060\016\012\017\044\020\025\021\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\201\006\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\033\006\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\211\006\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\214" +
    "\006\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\033\006\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\224\004\020\005\033\006\026\016\012\017\044\020\025" +
    "\021\036\001\001\000\022\004\057\005\033\006\026\015" +
    "\060\016\012\017\044\020\025\021\036\001\001\000\002" +
    "\001\001\000\006\005\227\006\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\235\006\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\241\010\242" +
    "\001\001\000\022\003\251\004\020\005\033\006\026\016" +
    "\012\017\044\020\025\021\036\001\001\000\004\010\250" +
    "\001\001\000\002\001\001\000\006\005\244\006\064\001" +
    "\001\000\002\001\001\000\022\003\246\004\020\005\033" +
    "\006\026\016\012\017\044\020\025\021\036\001\001\000" +
    "\022\004\057\005\033\006\026\015\060\016\012\017\044" +
    "\020\025\021\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\057\005\033\006\026\015\060\016\012" +
    "\017\044\020\025\021\036\001\001\000\010\005\253\006" +
    "\064\011\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\260\006\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\263\006\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\267\006\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\033\006\275" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\300\004\020\005\033\006\026\016\012\017\044\020\025" +
    "\021\036\001\001\000\022\004\057\005\033\006\026\015" +
    "\060\016\012\017\044\020\025\021\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\313\004\020\005" +
    "\033\006\026\016\012\017\044\020\025\021\036\001\001" +
    "\000\002\001\001\000\006\005\033\006\306\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\311\004\020" +
    "\005\033\006\026\016\012\017\044\020\025\021\036\001" +
    "\001\000\022\004\057\005\033\006\026\015\060\016\012" +
    "\017\044\020\025\021\036\001\001\000\002\001\001\000" +
    "\022\004\057\005\033\006\026\015\060\016\012\017\044" +
    "\020\025\021\036\001\001\000\002\001\001\000\010\005" +
    "\253\006\064\011\316\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\321\006\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\136\006\064\001\001\000\006\005\327\006" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\253\006\064\011\332\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\336\006\064" +
    "\001\001\000\002\001\001\000\006\005\340\006\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\343" +
    "\006\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Nodo> AST;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
    public LinkedList<Nodo> getAST() {
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        parser.AST=a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT= a;
        RESULT.add(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones Funcion 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT= a;
        RESULT.add(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= instruccion 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT= new LinkedList<>();
        RESULT.add(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= PRINT PARIZQ expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            //System.out.println("El valor de la expresión es: "+a);
            RESULT  =  new Imprimir ((Expresion)a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= DefinicionVariables 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
           RESULT =(Nodo)a;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT  =  new Imprimir ((Expresion)a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= Ciclos 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
        RESULT = (Nodo)a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= Graficas 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT=(Nodo)a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= Llamada 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT=(Nodo)a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= RETURN expresion PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
        RESULT = new Retorno((Expresion)a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= TYPEOF PARIZQ expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new TypeOf((Expresion)a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= LENGHT PARIZQ expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new Lenght((Expresion)a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= STRINGLENGHT PARIZQ expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new StringLenght((Expresion) a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Llamada ::= IDENTIFICADOR PARIZQ PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                RESULT = new LlamadaFuncion(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Llamada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Llamada ::= IDENTIFICADOR PARIZQ ParametrosLlamada PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new LlamadaFuncion(b,a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Llamada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Llamada ::= IDENTIFICADOR PARIZQ PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new LlamadaFuncion(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Llamada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Llamada ::= IDENTIFICADOR PARIZQ ParametrosLlamada PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                RESULT = new LlamadaFuncion(b,a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Llamada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ParametrosLlamada ::= ParametrosLlamada COMA expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT=a;
                        RESULT.add((Expresion)b);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParametrosLlamada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ParametrosLlamada ::= expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = new ArrayList<>();
                        RESULT.add((Expresion)a);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParametrosLlamada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Graficas ::= BARPLOT PARIZQ ListaExp PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT= new BarPlot(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Graficas",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Graficas ::= PIE PARIZQ ListaExp PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT= new PiePlot(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Graficas",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Ciclos ::= IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new If((Operacion)a,b);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Ciclos ::= IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER ELSE LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new If((Operacion)a,b,c);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Ciclos ::= IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER ELSE IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new IfElse((Operacion)a,(Operacion)d,b,c);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Ciclos ::= SWITCH PARIZQ expresion PARDER LLAVEIZQ listacase LLAVEDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoCase> b = (LinkedList<NodoCase>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new SwitchCase(b,(Expresion)a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Ciclos ::= BREAK PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new Break (a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Ciclos ::= WHILE PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            //System.out.println(s);
            RESULT = new While((Expresion)a, b);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Ciclos ::= DO LLAVEIZQ instrucciones LLAVEDER WHILE PARIZQ expresioncomp PARDER PTCOMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            //System.out.println(s);
            RESULT = new DoWhile((Expresion)a,b);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Funcion ::= IDENTIFICADOR IGUAL FUNCTION PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Funcion f = new Funcion(a,b);
                RESULT = new DefinicionDeFuncion(f);                
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Funcion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Funcion ::= IDENTIFICADOR IGUAL FUNCTION PARIZQ ListaParametros PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		ArrayList<Parametro> b = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Funcion f = new Funcion(a,b,c);
                RESULT = new DefinicionDeFuncion(f);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Funcion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Funcion ::= IDENTIFICADOR IGUAL PARIZQ ListaParametros DEFFUN LLAVEIZQ instrucciones LLAVEDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		ArrayList<Parametro> b = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Funcion f = new Funcion(a,b,c);
                RESULT = new DefinicionDeFuncion(f);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Funcion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Funcion ::= IDENTIFICADOR IGUAL PARIZQ DEFFUN LLAVEIZQ instrucciones LLAVEDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Funcion f = new Funcion(a,c);
                RESULT = new DefinicionDeFuncion(f);   
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Funcion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ListaParametros ::= ListaParametros COMA Parametros 
            {
              ArrayList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Parametro> a = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro b = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = a;
                        RESULT.add(b);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ListaParametros ::= Parametros 
            {
              ArrayList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro a = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = new ArrayList<>();
                        RESULT.add(a);
                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Parametros ::= IDENTIFICADOR 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=new Parametro(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Parametros ::= IDENTIFICADOR IGUAL expresion 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = new Parametro((Expresion)b,a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listacase ::= listacase CASES 
            {
              LinkedList<NodoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoCase> a = (LinkedList<NodoCase>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoCase b = (NodoCase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                    RESULT=a;
                    RESULT.add(b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listacase",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // listacase ::= CASES 
            {
              LinkedList<NodoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoCase a = (NodoCase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT=new LinkedList<>();
                    RESULT.add(a);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listacase",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CASES ::= CASE expresion DOSP instrucciones 
            {
              NodoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT= new NodoCase((Expresion)a,b);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CASES ::= DEFAULT instrucciones 
            {
              NodoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT= new NodoCase(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DefinicionVariables ::= IDENTIFICADOR IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new DeclaracionVariable ((Expresion)b,a);       
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DefinicionVariables",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DefinicionVariables ::= IDENTIFICADOR IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                            RESULT = new DeclaracionVariable ((Expresion)b,a);
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DefinicionVariables",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ListaExp ::= ListaExp COMA expresion 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT= a;
                RESULT.add((Expresion)b);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaExp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ListaExp ::= expresion 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = new ArrayList<>();
                RESULT.add((Expresion)a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaExp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= MENOS expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.UMENOS,(Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= expresion MAS expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.SUMA,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= expresion MENOS expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.RESTA,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= expresion POR expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MULTIPLICACION,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion DIVIDIDO expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.DIVISION,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion POTENCIA expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.POTENCIA,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion MODULO expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MODULO,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= ENTERO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.INT));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= DECIMAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.DOUBLE));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= CADENA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.STRING));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= TRUE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.BOOLEAN));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= FALSE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.BOOLEAN));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new id(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= IDENTIFICADOR CORIZQ expresion CORDER CORIZQ expresion CORDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= NULL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.STRING));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= DEF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new Single(a,new Tipo(Tipo.tipo.DEF));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= LENGHTPAR expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Lenght((Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= STRINGLENGHTPAR expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new StringLenght((Expresion) a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= REMOVE PARIZQ expresion COMA expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Remove((Expresion)a, (Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= TOLOWERCASE PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new toLowerCase((Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= TOUPPERCASE PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new toUperCase((Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= TRUNK PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Trunk((Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= ROUND PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Round((Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= CC PARIZQ ListaExp PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new C (a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= expresioncomp INTERROGACION expresion DOSP expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                 RESULT=new Operacion(Operacion.Tipo_operacion.TERNARIO,(Expresion)a, (Expresion)b,(Expresion)c); 
                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresioncomp ::= expresion IGUALD expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.IGUALIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresioncomp ::= expresion DESIGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.DESIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresioncomp ::= expresion MAYOR expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MAYOR,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresioncomp ::= expresion MENOR expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MENOR,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresioncomp ::= expresion MAYORIGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MAYORIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresioncomp ::= expresion MENORIGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MENORIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresioncomp ::= expresioncomp AND expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.AND,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresioncomp ::= expresioncomp OR expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.OR,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresioncomp ::= NOT expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.NOT,(Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
