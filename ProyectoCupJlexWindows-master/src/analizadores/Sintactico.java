
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import arbol.Expresion;
import arbol.Nodo;
import arbol.Instruccion;
import arbol.Asignacion;
import arbol.Simbolo.*;
import arbol.TablaDeSimbolos;
import java.util.LinkedList;
import arbol.Operacion;
import arbol.Imprimir;
import arbol.If;
import arbol.IfElse;
import arbol.NodoCase;
import arbol.SwitchCase;
import arbol.Tipo.tipo.*;
import arbol.Tipo;
import arbol.Declaracion;
import arbol.Single;
import arbol.id;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\005" +
    "\000\002\004\006\000\002\004\003\000\002\004\010\000" +
    "\002\004\011\000\002\004\015\000\002\004\021\000\002" +
    "\004\011\000\002\007\004\000\002\007\003\000\002\010" +
    "\010\000\002\010\006\000\002\011\003\000\002\011\003" +
    "\000\002\005\004\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\040\005\014\016\005\027\017\034\013\037" +
    "\021\040\020\041\024\043\026\044\010\045\006\047\012" +
    "\050\030\051\025\053\022\054\023\001\002\000\042\002" +
    "\000\005\014\016\005\027\017\034\013\037\021\040\020" +
    "\041\024\043\026\044\010\045\006\047\012\050\030\051" +
    "\025\053\022\054\023\001\002\000\022\005\014\016\005" +
    "\040\020\041\024\043\026\044\010\045\006\051\032\001" +
    "\002\000\114\002\uffe5\004\uffe5\005\uffe5\006\uffe5\010\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\043\uffe5\044\uffe5" +
    "\045\uffe5\047\uffe5\050\uffe5\051\uffe5\053\uffe5\054\uffe5\001" +
    "\002\000\054\002\ufffa\005\ufffa\012\ufffa\016\ufffa\027\ufffa" +
    "\030\ufffa\031\ufffa\032\034\033\035\034\ufffa\037\ufffa\040" +
    "\ufffa\041\ufffa\043\ufffa\044\ufffa\045\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\053\ufffa\054\ufffa\001\002\000\114\002\uffe6\004" +
    "\uffe6\005\uffe6\006\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6" +
    "\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\043\uffe6\044\uffe6\045\uffe6\047\uffe6\050\uffe6" +
    "\051\uffe6\053\uffe6\054\uffe6\001\002\000\032\013\042\014" +
    "\043\015\041\016\046\017\047\020\045\021\141\022\140" +
    "\023\135\024\137\025\134\026\136\001\002\000\004\007" +
    "\130\001\002\000\024\005\014\016\005\034\013\040\020" +
    "\041\024\043\026\044\010\045\006\051\032\001\002\000" +
    "\022\005\014\016\005\040\020\041\024\043\026\044\010" +
    "\045\006\051\032\001\002\000\004\002\124\001\002\000" +
    "\050\002\ufffe\005\ufffe\012\ufffe\016\ufffe\027\ufffe\030\ufffe" +
    "\031\ufffe\034\ufffe\037\ufffe\040\ufffe\041\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\047\ufffe\050\ufffe\051\ufffe\053\ufffe\054\ufffe" +
    "\001\002\000\004\005\106\001\002\000\114\002\uffe4\004" +
    "\uffe4\005\uffe4\006\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040" +
    "\uffe4\041\uffe4\043\uffe4\044\uffe4\045\uffe4\047\uffe4\050\uffe4" +
    "\051\uffe4\053\uffe4\054\uffe4\001\002\000\004\005\064\001" +
    "\002\000\004\051\ufff0\001\002\000\004\051\uffef\001\002" +
    "\000\114\002\uffe3\004\uffe3\005\uffe3\006\uffe3\010\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3" +
    "\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\040\uffe3\041\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\047\uffe3\050\uffe3\051\uffe3\053\uffe3\054\uffe3\001\002" +
    "\000\034\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020" +
    "\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2" +
    "\052\061\001\002\000\114\002\uffe7\004\uffe7\005\uffe7\006" +
    "\uffe7\010\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\043" +
    "\uffe7\044\uffe7\045\uffe7\047\uffe7\050\uffe7\051\uffe7\053\uffe7" +
    "\054\uffe7\001\002\000\004\051\057\001\002\000\024\005" +
    "\014\016\005\034\013\040\020\041\024\043\026\044\010" +
    "\045\006\051\032\001\002\000\010\032\034\033\035\035" +
    "\033\001\002\000\114\002\uffe2\004\uffe2\005\uffe2\006\uffe2" +
    "\010\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2\041\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\047\uffe2\050\uffe2\051\uffe2\053\uffe2\054" +
    "\uffe2\001\002\000\022\005\014\016\005\040\020\041\024" +
    "\043\026\044\010\045\006\051\032\001\002\000\024\005" +
    "\014\016\005\034\013\040\020\041\024\043\026\044\010" +
    "\045\006\051\032\001\002\000\024\005\014\016\005\034" +
    "\013\040\020\041\024\043\026\044\010\045\006\051\032" +
    "\001\002\000\060\002\uffd9\005\uffd9\006\uffd9\012\uffd9\016" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\037\uffd9\040\uffd9\041\uffd9\043\uffd9\044\uffd9\045" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\053\uffd9\054\uffd9\001\002" +
    "\000\060\002\uffda\005\uffda\006\uffda\012\uffda\016\uffda\027" +
    "\uffda\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda" +
    "\037\uffda\040\uffda\041\uffda\043\uffda\044\uffda\045\uffda\047" +
    "\uffda\050\uffda\051\uffda\053\uffda\054\uffda\001\002\000\020" +
    "\013\042\014\043\015\041\016\046\017\047\020\045\036" +
    "\044\001\002\000\022\005\014\016\005\040\020\041\024" +
    "\043\026\044\010\045\006\051\032\001\002\000\022\005" +
    "\014\016\005\040\020\041\024\043\026\044\010\045\006" +
    "\051\032\001\002\000\022\005\014\016\005\040\020\041" +
    "\024\043\026\044\010\045\006\051\032\001\002\000\022" +
    "\005\014\016\005\040\020\041\024\043\026\044\010\045" +
    "\006\051\032\001\002\000\022\005\014\016\005\040\020" +
    "\041\024\043\026\044\010\045\006\051\032\001\002\000" +
    "\022\005\014\016\005\040\020\041\024\043\026\044\010" +
    "\045\006\051\032\001\002\000\022\005\014\016\005\040" +
    "\020\041\024\043\026\044\010\045\006\051\032\001\002" +
    "\000\114\002\uffeb\004\uffeb\005\uffeb\006\uffeb\010\uffeb\012" +
    "\uffeb\013\042\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb" +
    "\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\041\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\053\uffeb\054\uffeb\001\002" +
    "\000\114\002\uffec\004\uffec\005\uffec\006\uffec\010\uffec\012" +
    "\uffec\013\042\014\043\015\uffec\016\uffec\017\047\020\045" +
    "\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027" +
    "\uffec\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\041\uffec\043\uffec\044\uffec\045" +
    "\uffec\047\uffec\050\uffec\051\uffec\053\uffec\054\uffec\001\002" +
    "\000\114\002\uffea\004\uffea\005\uffea\006\uffea\010\uffea\012" +
    "\uffea\013\042\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027" +
    "\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\041\uffea\043\uffea\044\uffea\045" +
    "\uffea\047\uffea\050\uffea\051\uffea\053\uffea\054\uffea\001\002" +
    "\000\062\002\ufff9\005\ufff9\012\ufff9\013\042\014\043\015" +
    "\041\016\046\017\047\020\045\027\ufff9\030\ufff9\031\ufff9" +
    "\034\ufff9\037\ufff9\040\ufff9\041\ufff9\043\ufff9\044\ufff9\045" +
    "\ufff9\047\ufff9\050\ufff9\051\ufff9\053\ufff9\054\ufff9\001\002" +
    "\000\114\002\uffe8\004\uffe8\005\uffe8\006\uffe8\010\uffe8\012" +
    "\uffe8\013\042\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\037\uffe8\040\uffe8\041\uffe8\043\uffe8\044\uffe8\045" +
    "\uffe8\047\uffe8\050\uffe8\051\uffe8\053\uffe8\054\uffe8\001\002" +
    "\000\114\002\uffe9\004\uffe9\005\uffe9\006\uffe9\010\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027" +
    "\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\041\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\053\uffe9\054\uffe9\001\002" +
    "\000\114\002\uffed\004\uffed\005\uffed\006\uffed\010\uffed\012" +
    "\uffed\013\042\014\043\015\uffed\016\uffed\017\047\020\045" +
    "\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed" +
    "\036\uffed\037\uffed\040\uffed\041\uffed\043\uffed\044\uffed\045" +
    "\uffed\047\uffed\050\uffed\051\uffed\053\uffed\054\uffed\001\002" +
    "\000\004\004\060\001\002\000\050\002\ufffc\005\ufffc\012" +
    "\ufffc\016\ufffc\027\ufffc\030\ufffc\031\ufffc\034\ufffc\037\ufffc" +
    "\040\ufffc\041\ufffc\043\ufffc\044\ufffc\045\ufffc\047\ufffc\050" +
    "\ufffc\051\ufffc\053\ufffc\054\ufffc\001\002\000\022\005\014" +
    "\016\005\040\020\041\024\043\026\044\010\045\006\051" +
    "\032\001\002\000\020\004\063\013\042\014\043\015\041" +
    "\016\046\017\047\020\045\001\002\000\050\002\ufffb\005" +
    "\ufffb\012\ufffb\016\ufffb\027\ufffb\030\ufffb\031\ufffb\034\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\043\ufffb\044\ufffb\045\ufffb\047" +
    "\ufffb\050\ufffb\051\ufffb\053\ufffb\054\ufffb\001\002\000\024" +
    "\005\014\016\005\034\013\040\020\041\024\043\026\044" +
    "\010\045\006\051\032\001\002\000\010\006\066\032\034" +
    "\033\035\001\002\000\004\011\067\001\002\000\040\005" +
    "\014\016\005\027\017\034\013\037\021\040\020\041\024" +
    "\043\026\044\010\045\006\047\012\050\030\051\025\053" +
    "\022\054\023\001\002\000\042\005\014\012\072\016\005" +
    "\027\017\034\013\037\021\040\020\041\024\043\026\044" +
    "\010\045\006\047\012\050\030\051\025\053\022\054\023" +
    "\001\002\000\050\002\uffff\005\uffff\012\uffff\016\uffff\027" +
    "\uffff\030\uffff\031\uffff\034\uffff\037\uffff\040\uffff\041\uffff" +
    "\043\uffff\044\uffff\045\uffff\047\uffff\050\uffff\051\uffff\053" +
    "\uffff\054\uffff\001\002\000\052\002\ufff8\005\ufff8\012\ufff8" +
    "\016\ufff8\027\ufff8\030\ufff8\031\ufff8\034\ufff8\037\ufff8\040" +
    "\ufff8\041\ufff8\042\073\043\ufff8\044\ufff8\045\ufff8\047\ufff8" +
    "\050\ufff8\051\ufff8\053\ufff8\054\ufff8\001\002\000\006\011" +
    "\074\037\075\001\002\000\040\005\014\016\005\027\017" +
    "\034\013\037\021\040\020\041\024\043\026\044\010\045" +
    "\006\047\012\050\030\051\025\053\022\054\023\001\002" +
    "\000\004\005\076\001\002\000\024\005\014\016\005\034" +
    "\013\040\020\041\024\043\026\044\010\045\006\051\032" +
    "\001\002\000\010\006\100\032\034\033\035\001\002\000" +
    "\004\011\101\001\002\000\040\005\014\016\005\027\017" +
    "\034\013\037\021\040\020\041\024\043\026\044\010\045" +
    "\006\047\012\050\030\051\025\053\022\054\023\001\002" +
    "\000\042\005\014\012\103\016\005\027\017\034\013\037" +
    "\021\040\020\041\024\043\026\044\010\045\006\047\012" +
    "\050\030\051\025\053\022\054\023\001\002\000\050\002" +
    "\ufff6\005\ufff6\012\ufff6\016\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\034\ufff6\037\ufff6\040\ufff6\041\ufff6\043\ufff6\044\ufff6\045" +
    "\ufff6\047\ufff6\050\ufff6\051\ufff6\053\ufff6\054\ufff6\001\002" +
    "\000\042\005\014\012\105\016\005\027\017\034\013\037" +
    "\021\040\020\041\024\043\026\044\010\045\006\047\012" +
    "\050\030\051\025\053\022\054\023\001\002\000\050\002" +
    "\ufff7\005\ufff7\012\ufff7\016\ufff7\027\ufff7\030\ufff7\031\ufff7" +
    "\034\ufff7\037\ufff7\040\ufff7\041\ufff7\043\ufff7\044\ufff7\045" +
    "\ufff7\047\ufff7\050\ufff7\051\ufff7\053\ufff7\054\ufff7\001\002" +
    "\000\022\005\014\016\005\040\020\041\024\043\026\044" +
    "\010\045\006\051\032\001\002\000\020\006\110\013\042" +
    "\014\043\015\041\016\046\017\047\020\045\001\002\000" +
    "\004\011\111\001\002\000\004\030\114\001\002\000\006" +
    "\012\122\030\114\001\002\000\006\012\ufff3\030\ufff3\001" +
    "\002\000\022\005\014\016\005\040\020\041\024\043\026" +
    "\044\010\045\006\051\032\001\002\000\020\013\042\014" +
    "\043\015\041\016\046\017\047\020\045\036\116\001\002" +
    "\000\040\005\014\016\005\027\017\034\013\037\021\040" +
    "\020\041\024\043\026\044\010\045\006\047\012\050\030" +
    "\051\025\053\022\054\023\001\002\000\046\005\014\012" +
    "\ufff1\016\005\027\017\030\ufff1\031\120\034\013\037\021" +
    "\040\020\041\024\043\026\044\010\045\006\047\012\050" +
    "\030\051\025\053\022\054\023\001\002\000\004\004\121" +
    "\001\002\000\006\012\ufff2\030\ufff2\001\002\000\050\002" +
    "\ufff5\005\ufff5\012\ufff5\016\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\034\ufff5\037\ufff5\040\ufff5\041\ufff5\043\ufff5\044\ufff5\045" +
    "\ufff5\047\ufff5\050\ufff5\051\ufff5\053\ufff5\054\ufff5\001\002" +
    "\000\006\012\ufff4\030\ufff4\001\002\000\004\002\001\001" +
    "\002\000\020\006\126\013\042\014\043\015\041\016\046" +
    "\017\047\020\045\001\002\000\114\002\uffe1\004\uffe1\005" +
    "\uffe1\006\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1" +
    "\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\053\uffe1\054\uffe1\001\002\000\060\002\uffd8\005\uffd8\006" +
    "\uffd8\012\uffd8\016\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\037\uffd8\040\uffd8\041\uffd8\043" +
    "\uffd8\044\uffd8\045\uffd8\047\uffd8\050\uffd8\051\uffd8\053\uffd8" +
    "\054\uffd8\001\002\000\022\005\014\016\005\040\020\041" +
    "\024\043\026\044\010\045\006\051\032\001\002\000\020" +
    "\010\132\013\042\014\043\015\041\016\046\017\047\020" +
    "\045\001\002\000\004\004\133\001\002\000\050\002\ufffd" +
    "\005\ufffd\012\ufffd\016\ufffd\027\ufffd\030\ufffd\031\ufffd\034" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\043\ufffd\044\ufffd\045\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\053\ufffd\054\ufffd\001\002\000" +
    "\022\005\014\016\005\040\020\041\024\043\026\044\010" +
    "\045\006\051\032\001\002\000\022\005\014\016\005\040" +
    "\020\041\024\043\026\044\010\045\006\051\032\001\002" +
    "\000\022\005\014\016\005\040\020\041\024\043\026\044" +
    "\010\045\006\051\032\001\002\000\022\005\014\016\005" +
    "\040\020\041\024\043\026\044\010\045\006\051\032\001" +
    "\002\000\022\005\014\016\005\040\020\041\024\043\026" +
    "\044\010\045\006\051\032\001\002\000\022\005\014\016" +
    "\005\040\020\041\024\043\026\044\010\045\006\051\032" +
    "\001\002\000\072\002\uffe0\005\uffe0\006\uffe0\012\uffe0\013" +
    "\042\014\043\015\041\016\uffe0\017\047\020\045\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\043\uffe0\044\uffe0\045\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\053\uffe0\054\uffe0\001\002\000\072\002" +
    "\uffde\005\uffde\006\uffde\012\uffde\013\042\014\043\015\041" +
    "\016\uffde\017\047\020\045\027\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\034\uffde\035\uffde\037\uffde\040\uffde\041\uffde" +
    "\043\uffde\044\uffde\045\uffde\047\uffde\050\uffde\051\uffde\053" +
    "\uffde\054\uffde\001\002\000\072\002\uffdc\005\uffdc\006\uffdc" +
    "\012\uffdc\013\042\014\043\015\041\016\uffdc\017\047\020" +
    "\045\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\037\uffdc\040\uffdc\041\uffdc\043\uffdc\044\uffdc\045" +
    "\uffdc\047\uffdc\050\uffdc\051\uffdc\053\uffdc\054\uffdc\001\002" +
    "\000\072\002\uffdf\005\uffdf\006\uffdf\012\uffdf\013\042\014" +
    "\043\015\041\016\uffdf\017\047\020\045\027\uffdf\030\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\043\uffdf\044\uffdf\045\uffdf\047\uffdf\050\uffdf" +
    "\051\uffdf\053\uffdf\054\uffdf\001\002\000\072\002\uffdd\005" +
    "\uffdd\006\uffdd\012\uffdd\013\042\014\043\015\041\016\uffdd" +
    "\017\047\020\045\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033" +
    "\uffdd\034\uffdd\035\uffdd\037\uffdd\040\uffdd\041\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\047\uffdd\050\uffdd\051\uffdd\053\uffdd\054" +
    "\uffdd\001\002\000\072\002\uffdb\005\uffdb\006\uffdb\012\uffdb" +
    "\013\042\014\043\015\041\016\uffdb\017\047\020\045\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\035\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\043\uffdb\044\uffdb\045\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\053\uffdb\054\uffdb\001\002\000\114" +
    "\002\uffee\004\uffee\005\uffee\006\uffee\010\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030" +
    "\uffee\031\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\041\uffee\043\uffee\044\uffee\045\uffee\047" +
    "\uffee\050\uffee\051\uffee\053\uffee\054\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\016\002\014\003\003\004\015\005\010\006" +
    "\006\011\026\001\001\000\012\004\070\005\010\006\006" +
    "\011\026\001\001\000\004\005\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\010\006\126\001\001\000" +
    "\004\005\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\010\006\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\037\001\001\000\006\005\010\006\036\001" +
    "\001\000\006\005\010\006\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\055\001" +
    "\001\000\004\005\054\001\001\000\004\005\053\001\001" +
    "\000\004\005\052\001\001\000\004\005\051\001\001\000" +
    "\004\005\050\001\001\000\004\005\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\010" +
    "\006\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\067\004\015\005\010\006\006\011\026\001\001" +
    "\000\012\004\070\005\010\006\006\011\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\103\004\015\005\010\006\006\011\026\001\001\000" +
    "\002\001\001\000\006\005\010\006\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\101\004\015\005" +
    "\010\006\006\011\026\001\001\000\012\004\070\005\010" +
    "\006\006\011\026\001\001\000\002\001\001\000\012\004" +
    "\070\005\010\006\006\011\026\001\001\000\002\001\001" +
    "\000\004\005\106\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\111\010\112\001\001\000\004\010\122" +
    "\001\001\000\002\001\001\000\004\005\114\001\001\000" +
    "\002\001\001\000\014\003\116\004\015\005\010\006\006" +
    "\011\026\001\001\000\012\004\070\005\010\006\006\011" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\146\001\001\000\004\005\145\001\001" +
    "\000\004\005\144\001\001\000\004\005\143\001\001\000" +
    "\004\005\142\001\001\000\004\005\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public LinkedList<Nodo> AST;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
    public LinkedList<Nodo> getAST() {
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    parser.AST=a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT= a;
    RESULT.add(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT= new LinkedList<>();
    RESULT.add(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= REVALUAR CORIZQ expresion CORDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            //System.out.println("El valor de la expresión es: "+a);
            RESULT  =  new Imprimir ((Expresion)a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= tipovar IDENTIFICADOR PTCOMA 
            {
              Nodo RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new Declaracion (a, b);       
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= IDENTIFICADOR IGUAL expresion PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new Asignacion(a,(Expresion)b);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT  =  new Imprimir ((Expresion)a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= RDECLARA expresioncomp INTERROGACION expresion DOSP expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Imprimir((Expresion)new Operacion(Operacion.Tipo_operacion.TERNARIO,(Expresion)a, (Expresion)b,(Expresion)c)); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new If((Operacion)a,b);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER ELSE LLAVEIZQ instrucciones LLAVEDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new If((Operacion)a,b,c);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER ELSE IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new IfElse((Operacion)a,(Operacion)d,b,c);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= SWITCH PARIZQ expresion PARDER LLAVEIZQ listacase LLAVEDER 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoCase> b = (LinkedList<NodoCase>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new SwitchCase(b,(Expresion)a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // listacase ::= listacase CASES 
            {
              LinkedList<NodoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoCase> a = (LinkedList<NodoCase>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoCase b = (NodoCase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                    RESULT=a;
                    RESULT.add(b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listacase",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listacase ::= CASES 
            {
              LinkedList<NodoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoCase a = (NodoCase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT=new LinkedList<>();
                    RESULT.add(a);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listacase",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CASES ::= CASE expresion DOSP instrucciones BREAK PTCOMA 
            {
              NodoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT= new NodoCase((Expresion)a,b);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CASES ::= CASE expresion DOSP instrucciones 
            {
              NodoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT= new NodoCase((Expresion)a,b);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tipovar ::= ENTEROT 
            {
              Tipo RESULT =null;
		 
        RESULT= new Tipo(Tipo.tipo.INT);
     
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipovar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tipovar ::= CADENAT 
            {
              Tipo RESULT =null;
		
        RESULT= new Tipo(Tipo.tipo.STRING);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipovar",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expresion ::= MENOS expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.UMENOS,(Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expresion ::= expresion MAS expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.SUMA,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expresion ::= expresion MENOS expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.RESTA,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expresion ::= expresion POR expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MULTIPLICACION,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expresion ::= expresion DIVIDIDO expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.DIVISION,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expresion ::= expresion POTENCIA expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.POTENCIA,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= expresion MODULO expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MODULO,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= ENTERO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.INT));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= DECIMAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.DOUBLE));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= CADENA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.STRING));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= TRUE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.BOOLEAN));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= FALSE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.BOOLEAN));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new id(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresioncomp ::= expresion IGUALD expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.IGUALIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresioncomp ::= expresion DESIGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.DESIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresioncomp ::= expresion MAYOR expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MAYOR,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresioncomp ::= expresion MENOR expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MENOR,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresioncomp ::= expresion MAYORIGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MAYORIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresioncomp ::= expresion MENORIGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MENORIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresioncomp ::= expresioncomp AND expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.AND,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresioncomp ::= expresioncomp OR expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.OR,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresioncomp ::= NOT expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.NOT,(Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
