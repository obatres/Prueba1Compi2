
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import arbol.Expresion;
import arbol.Nodo;
import arbol.Instruccion;
import arbol.Asignacion;
import arbol.Simbolo.*;
import arbol.TablaDeSimbolos;
import java.util.LinkedList;
import arbol.Operacion;
import arbol.Imprimir;
import arbol.If.If;
import arbol.If.IfElse;
import arbol.While.While;
import arbol.DoWhile.DoWhile;
import arbol.SwitchCase.NodoCase;
import arbol.SwitchCase.SwitchCase;
import arbol.SwitchCase.Break;
import arbol.Tipo.tipo.*;
import arbol.Tipo;
import arbol.Graficas.BarPlot;
import java.util.ArrayList;
import arbol.Declaracion;
import arbol.Single;
import arbol.id;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\005" +
    "\000\002\004\006\000\002\004\005\000\002\004\003\000" +
    "\002\004\007\000\002\004\011\000\002\004\015\000\002" +
    "\004\021\000\002\004\011\000\002\004\004\000\002\004" +
    "\011\000\002\004\013\000\002\004\007\000\002\007\004" +
    "\000\002\007\003\000\002\010\006\000\002\010\005\000" +
    "\002\012\005\000\002\013\005\000\002\013\003\000\002" +
    "\005\004\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\011\000\002\005\003\000\002\005\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\044\005\014\016\005\027\017\031\023\035" +
    "\013\040\021\041\020\042\025\044\010\045\022\046\030" +
    "\047\011\050\006\054\027\060\026\063\031\064\024\001" +
    "\002\000\046\002\000\005\014\016\005\027\017\031\023" +
    "\035\013\040\021\041\020\042\025\044\010\045\022\046" +
    "\030\047\011\050\006\054\027\060\026\063\031\064\024" +
    "\001\002\000\024\005\014\016\005\041\020\042\025\046" +
    "\030\047\011\050\006\054\037\063\031\001\002\000\122" +
    "\002\uffdf\004\uffdf\005\uffdf\006\uffdf\010\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030" +
    "\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf" +
    "\037\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\054\uffdf\060\uffdf\062\uffdf\063\uffdf" +
    "\064\uffdf\001\002\000\062\002\ufff9\005\ufff9\012\ufff9\016" +
    "\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\107\034\111" +
    "\035\ufff9\036\203\040\ufff9\041\ufff9\042\ufff9\044\ufff9\045" +
    "\ufff9\046\ufff9\047\ufff9\050\ufff9\054\ufff9\060\ufff9\063\ufff9" +
    "\064\ufff9\001\002\000\004\005\175\001\002\000\122\002" +
    "\uffe0\004\uffe0\005\uffe0\006\uffe0\010\uffe0\012\uffe0\013\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037" +
    "\uffe0\040\uffe0\041\uffe0\042\uffe0\044\uffe0\045\uffe0\046\uffe0" +
    "\047\uffe0\050\uffe0\054\uffe0\060\uffe0\062\uffe0\063\uffe0\064" +
    "\uffe0\001\002\000\032\013\041\014\042\015\040\016\044" +
    "\017\045\020\043\021\166\022\165\023\162\024\164\025" +
    "\161\026\163\001\002\000\026\005\014\016\005\035\013" +
    "\041\020\042\025\046\030\047\011\050\006\054\037\063" +
    "\031\001\002\000\024\005\014\016\005\041\020\042\025" +
    "\046\030\047\011\050\006\054\037\063\031\001\002\000" +
    "\004\002\155\001\002\000\054\002\ufffe\005\ufffe\012\ufffe" +
    "\016\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\035\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\054\ufffe\060\ufffe\063\ufffe\064\ufffe\001\002\000" +
    "\004\005\136\001\002\000\122\002\uffde\004\uffde\005\uffde" +
    "\006\uffde\010\uffde\012\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\042\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde\054" +
    "\uffde\060\uffde\062\uffde\063\uffde\064\uffde\001\002\000\004" +
    "\005\115\001\002\000\004\011\100\001\002\000\004\004" +
    "\077\001\002\000\004\005\073\001\002\000\122\002\uffdd" +
    "\004\uffdd\005\uffdd\006\uffdd\010\uffdd\012\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\044\uffdd\045\uffdd\046\uffdd\047" +
    "\uffdd\050\uffdd\054\uffdd\060\uffdd\062\uffdd\063\uffdd\064\uffdd" +
    "\001\002\000\004\005\067\001\002\000\036\007\032\013" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\055\033\001" +
    "\002\000\122\002\uffe1\004\uffe1\005\uffe1\006\uffe1\010\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035" +
    "\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\047\uffe1\050\uffe1\054\uffe1\060\uffe1\062" +
    "\uffe1\063\uffe1\064\uffe1\001\002\000\122\002\uffda\004\uffda" +
    "\005\uffda\006\uffda\010\uffda\012\uffda\013\uffda\014\uffda\015" +
    "\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\040\uffda" +
    "\041\uffda\042\uffda\044\uffda\045\uffda\046\uffda\047\uffda\050" +
    "\uffda\054\uffda\060\uffda\062\uffda\063\uffda\064\uffda\001\002" +
    "\000\024\005\014\016\005\041\020\042\025\046\030\047" +
    "\011\050\006\054\037\063\031\001\002\000\026\005\014" +
    "\016\005\041\020\042\025\046\030\047\011\050\006\054" +
    "\037\061\034\063\031\001\002\000\024\005\014\016\005" +
    "\041\020\042\025\046\030\047\011\050\006\054\037\063" +
    "\031\001\002\000\070\002\ufffc\004\046\005\ufffc\012\ufffc" +
    "\013\041\014\042\015\040\016\044\017\045\020\043\027" +
    "\ufffc\030\ufffc\031\ufffc\032\ufffc\035\ufffc\040\ufffc\041\ufffc" +
    "\042\ufffc\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\054" +
    "\ufffc\060\ufffc\063\ufffc\064\ufffc\001\002\000\054\002\ufffa" +
    "\005\ufffa\012\ufffa\016\ufffa\027\ufffa\030\ufffa\031\ufffa\032" +
    "\ufffa\035\ufffa\040\ufffa\041\ufffa\042\ufffa\044\ufffa\045\ufffa" +
    "\046\ufffa\047\ufffa\050\ufffa\054\ufffa\060\ufffa\063\ufffa\064" +
    "\ufffa\001\002\000\124\002\uffdc\004\uffdc\005\uffdc\006\uffdc" +
    "\007\032\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc" +
    "\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033" +
    "\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc" +
    "\042\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\054" +
    "\uffdc\060\uffdc\062\uffdc\063\uffdc\064\uffdc\001\002\000\024" +
    "\005\014\016\005\041\020\042\025\046\030\047\011\050" +
    "\006\054\037\063\031\001\002\000\024\005\014\016\005" +
    "\041\020\042\025\046\030\047\011\050\006\054\037\063" +
    "\031\001\002\000\024\005\014\016\005\041\020\042\025" +
    "\046\030\047\011\050\006\054\037\063\031\001\002\000" +
    "\024\005\014\016\005\041\020\042\025\046\030\047\011" +
    "\050\006\054\037\063\031\001\002\000\024\005\014\016" +
    "\005\041\020\042\025\046\030\047\011\050\006\054\037" +
    "\063\031\001\002\000\024\005\014\016\005\041\020\042" +
    "\025\046\030\047\011\050\006\054\037\063\031\001\002" +
    "\000\054\002\ufffb\005\ufffb\012\ufffb\016\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\032\ufffb\035\ufffb\040\ufffb\041\ufffb\042\ufffb" +
    "\044\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\054\ufffb\060" +
    "\ufffb\063\ufffb\064\ufffb\001\002\000\122\002\uffe5\004\uffe5" +
    "\005\uffe5\006\uffe5\010\uffe5\012\uffe5\013\041\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5" +
    "\041\uffe5\042\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\054\uffe5\060\uffe5\062\uffe5\063\uffe5\064\uffe5\001\002" +
    "\000\122\002\uffe6\004\uffe6\005\uffe6\006\uffe6\010\uffe6\012" +
    "\uffe6\013\041\014\042\015\uffe6\016\uffe6\017\045\020\043" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\044\uffe6\045" +
    "\uffe6\046\uffe6\047\uffe6\050\uffe6\054\uffe6\060\uffe6\062\uffe6" +
    "\063\uffe6\064\uffe6\001\002\000\122\002\uffe4\004\uffe4\005" +
    "\uffe4\006\uffe4\010\uffe4\012\uffe4\013\041\014\uffe4\015\uffe4" +
    "\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4\041" +
    "\uffe4\042\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4" +
    "\054\uffe4\060\uffe4\062\uffe4\063\uffe4\064\uffe4\001\002\000" +
    "\122\002\uffe2\004\uffe2\005\uffe2\006\uffe2\010\uffe2\012\uffe2" +
    "\013\041\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2" +
    "\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\041\uffe2\042\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\054\uffe2\060\uffe2\062\uffe2\063" +
    "\uffe2\064\uffe2\001\002\000\122\002\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\010\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\054" +
    "\uffe3\060\uffe3\062\uffe3\063\uffe3\064\uffe3\001\002\000\122" +
    "\002\uffe7\004\uffe7\005\uffe7\006\uffe7\010\uffe7\012\uffe7\013" +
    "\041\014\042\015\uffe7\016\uffe7\017\045\020\043\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\041\uffe7\042\uffe7\044\uffe7\045\uffe7\046" +
    "\uffe7\047\uffe7\050\uffe7\054\uffe7\060\uffe7\062\uffe7\063\uffe7" +
    "\064\uffe7\001\002\000\006\006\060\062\057\001\002\000" +
    "\022\006\uffe9\013\041\014\042\015\040\016\044\017\045" +
    "\020\043\062\uffe9\001\002\000\024\005\014\016\005\041" +
    "\020\042\025\046\030\047\011\050\006\054\037\063\031" +
    "\001\002\000\054\002\uffeb\005\uffeb\012\uffeb\016\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\035\uffeb\040\uffeb\041\uffeb" +
    "\042\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\054" +
    "\uffeb\060\uffeb\063\uffeb\064\uffeb\001\002\000\022\006\uffea" +
    "\013\041\014\042\015\040\016\044\017\045\020\043\062" +
    "\uffea\001\002\000\020\010\063\013\041\014\042\015\040" +
    "\016\044\017\045\020\043\001\002\000\004\007\064\001" +
    "\002\000\024\005\014\016\005\041\020\042\025\046\030" +
    "\047\011\050\006\054\037\063\031\001\002\000\020\010" +
    "\066\013\041\014\042\015\040\016\044\017\045\020\043" +
    "\001\002\000\122\002\uffdb\004\uffdb\005\uffdb\006\uffdb\010" +
    "\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\017\uffdb" +
    "\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb" +
    "\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\044" +
    "\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\054\uffdb\060\uffdb" +
    "\062\uffdb\063\uffdb\064\uffdb\001\002\000\024\005\014\016" +
    "\005\041\020\042\025\046\030\047\011\050\006\054\037" +
    "\063\031\001\002\000\020\006\071\013\041\014\042\015" +
    "\040\016\044\017\045\020\043\001\002\000\004\004\072" +
    "\001\002\000\054\002\ufffd\005\ufffd\012\ufffd\016\ufffd\027" +
    "\ufffd\030\ufffd\031\ufffd\032\ufffd\035\ufffd\040\ufffd\041\ufffd" +
    "\042\ufffd\044\ufffd\045\ufffd\046\ufffd\047\ufffd\050\ufffd\054" +
    "\ufffd\060\ufffd\063\ufffd\064\ufffd\001\002\000\024\005\014" +
    "\016\005\041\020\042\025\046\030\047\011\050\006\054" +
    "\037\063\031\001\002\000\006\006\075\062\057\001\002" +
    "\000\004\004\076\001\002\000\054\002\ufff0\005\ufff0\012" +
    "\ufff0\016\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\035\ufff0" +
    "\040\ufff0\041\ufff0\042\ufff0\044\ufff0\045\ufff0\046\ufff0\047" +
    "\ufff0\050\ufff0\054\ufff0\060\ufff0\063\ufff0\064\ufff0\001\002" +
    "\000\054\002\ufff3\005\ufff3\012\ufff3\016\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\035\ufff3\040\ufff3\041\ufff3\042\ufff3" +
    "\044\ufff3\045\ufff3\046\ufff3\047\ufff3\050\ufff3\054\ufff3\060" +
    "\ufff3\063\ufff3\064\ufff3\001\002\000\044\005\014\016\005" +
    "\027\017\031\023\035\013\040\021\041\020\042\025\044" +
    "\010\045\022\046\030\047\011\050\006\054\027\060\026" +
    "\063\031\064\024\001\002\000\046\005\014\012\103\016" +
    "\005\027\017\031\023\035\013\040\021\041\020\042\025" +
    "\044\010\045\022\046\030\047\011\050\006\054\027\060" +
    "\026\063\031\064\024\001\002\000\054\002\uffff\005\uffff" +
    "\012\uffff\016\uffff\027\uffff\030\uffff\031\uffff\032\uffff\035" +
    "\uffff\040\uffff\041\uffff\042\uffff\044\uffff\045\uffff\046\uffff" +
    "\047\uffff\050\uffff\054\uffff\060\uffff\063\uffff\064\uffff\001" +
    "\002\000\004\044\104\001\002\000\004\005\105\001\002" +
    "\000\026\005\014\016\005\035\013\041\020\042\025\046" +
    "\030\047\011\050\006\054\037\063\031\001\002\000\010" +
    "\006\110\033\107\034\111\001\002\000\026\005\014\016" +
    "\005\035\013\041\020\042\025\046\030\047\011\050\006" +
    "\054\037\063\031\001\002\000\004\004\113\001\002\000" +
    "\026\005\014\016\005\035\013\041\020\042\025\046\030" +
    "\047\011\050\006\054\037\063\031\001\002\000\064\002" +
    "\uffd1\005\uffd1\006\uffd1\012\uffd1\016\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\040" +
    "\uffd1\041\uffd1\042\uffd1\044\uffd1\045\uffd1\046\uffd1\047\uffd1" +
    "\050\uffd1\054\uffd1\060\uffd1\063\uffd1\064\uffd1\001\002\000" +
    "\054\002\ufff1\005\ufff1\012\ufff1\016\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\035\ufff1\040\ufff1\041\ufff1\042\ufff1\044" +
    "\ufff1\045\ufff1\046\ufff1\047\ufff1\050\ufff1\054\ufff1\060\ufff1" +
    "\063\ufff1\064\ufff1\001\002\000\064\002\uffd2\005\uffd2\006" +
    "\uffd2\012\uffd2\016\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\040\uffd2\041\uffd2\042" +
    "\uffd2\044\uffd2\045\uffd2\046\uffd2\047\uffd2\050\uffd2\054\uffd2" +
    "\060\uffd2\063\uffd2\064\uffd2\001\002\000\026\005\014\016" +
    "\005\035\013\041\020\042\025\046\030\047\011\050\006" +
    "\054\037\063\031\001\002\000\010\006\117\033\107\034" +
    "\111\001\002\000\004\011\120\001\002\000\044\005\014" +
    "\016\005\027\017\031\023\035\013\040\021\041\020\042" +
    "\025\044\010\045\022\046\030\047\011\050\006\054\027" +
    "\060\026\063\031\064\024\001\002\000\046\005\014\012" +
    "\122\016\005\027\017\031\023\035\013\040\021\041\020" +
    "\042\025\044\010\045\022\046\030\047\011\050\006\054" +
    "\027\060\026\063\031\064\024\001\002\000\056\002\ufff7" +
    "\005\ufff7\012\ufff7\016\ufff7\027\ufff7\030\ufff7\031\ufff7\032" +
    "\ufff7\035\ufff7\040\ufff7\041\ufff7\042\ufff7\043\123\044\ufff7" +
    "\045\ufff7\046\ufff7\047\ufff7\050\ufff7\054\ufff7\060\ufff7\063" +
    "\ufff7\064\ufff7\001\002\000\006\011\124\040\125\001\002" +
    "\000\044\005\014\016\005\027\017\031\023\035\013\040" +
    "\021\041\020\042\025\044\010\045\022\046\030\047\011" +
    "\050\006\054\027\060\026\063\031\064\024\001\002\000" +
    "\004\005\126\001\002\000\026\005\014\016\005\035\013" +
    "\041\020\042\025\046\030\047\011\050\006\054\037\063" +
    "\031\001\002\000\010\006\130\033\107\034\111\001\002" +
    "\000\004\011\131\001\002\000\044\005\014\016\005\027" +
    "\017\031\023\035\013\040\021\041\020\042\025\044\010" +
    "\045\022\046\030\047\011\050\006\054\027\060\026\063" +
    "\031\064\024\001\002\000\046\005\014\012\133\016\005" +
    "\027\017\031\023\035\013\040\021\041\020\042\025\044" +
    "\010\045\022\046\030\047\011\050\006\054\027\060\026" +
    "\063\031\064\024\001\002\000\054\002\ufff5\005\ufff5\012" +
    "\ufff5\016\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\035\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\044\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\050\ufff5\054\ufff5\060\ufff5\063\ufff5\064\ufff5\001\002" +
    "\000\046\005\014\012\135\016\005\027\017\031\023\035" +
    "\013\040\021\041\020\042\025\044\010\045\022\046\030" +
    "\047\011\050\006\054\027\060\026\063\031\064\024\001" +
    "\002\000\054\002\ufff6\005\ufff6\012\ufff6\016\ufff6\027\ufff6" +
    "\030\ufff6\031\ufff6\032\ufff6\035\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\054\ufff6" +
    "\060\ufff6\063\ufff6\064\ufff6\001\002\000\024\005\014\016" +
    "\005\041\020\042\025\046\030\047\011\050\006\054\037" +
    "\063\031\001\002\000\020\006\140\013\041\014\042\015" +
    "\040\016\044\017\045\020\043\001\002\000\004\011\141" +
    "\001\002\000\006\030\145\032\142\001\002\000\004\037" +
    "\153\001\002\000\010\012\151\030\145\032\142\001\002" +
    "\000\010\012\uffee\030\uffee\032\uffee\001\002\000\024\005" +
    "\014\016\005\041\020\042\025\046\030\047\011\050\006" +
    "\054\037\063\031\001\002\000\020\013\041\014\042\015" +
    "\040\016\044\017\045\020\043\037\147\001\002\000\044" +
    "\005\014\016\005\027\017\031\023\035\013\040\021\041" +
    "\020\042\025\044\010\045\022\046\030\047\011\050\006" +
    "\054\027\060\026\063\031\064\024\001\002\000\052\005" +
    "\014\012\uffed\016\005\027\017\030\uffed\031\023\032\uffed" +
    "\035\013\040\021\041\020\042\025\044\010\045\022\046" +
    "\030\047\011\050\006\054\027\060\026\063\031\064\024" +
    "\001\002\000\054\002\ufff4\005\ufff4\012\ufff4\016\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\035\ufff4\040\ufff4\041\ufff4" +
    "\042\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\054" +
    "\ufff4\060\ufff4\063\ufff4\064\ufff4\001\002\000\010\012\uffef" +
    "\030\uffef\032\uffef\001\002\000\044\005\014\016\005\027" +
    "\017\031\023\035\013\040\021\041\020\042\025\044\010" +
    "\045\022\046\030\047\011\050\006\054\027\060\026\063" +
    "\031\064\024\001\002\000\052\005\014\012\uffec\016\005" +
    "\027\017\030\uffec\031\023\032\uffec\035\013\040\021\041" +
    "\020\042\025\044\010\045\022\046\030\047\011\050\006" +
    "\054\027\060\026\063\031\064\024\001\002\000\004\002" +
    "\001\001\002\000\020\006\157\013\041\014\042\015\040" +
    "\016\044\017\045\020\043\001\002\000\122\002\uffd9\004" +
    "\uffd9\005\uffd9\006\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\041\uffd9\042\uffd9\044\uffd9\045\uffd9\046\uffd9\047\uffd9" +
    "\050\uffd9\054\uffd9\060\uffd9\062\uffd9\063\uffd9\064\uffd9\001" +
    "\002\000\064\002\uffd0\005\uffd0\006\uffd0\012\uffd0\016\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\036\uffd0\040\uffd0\041\uffd0\042\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\054\uffd0\060\uffd0\063\uffd0\064" +
    "\uffd0\001\002\000\024\005\014\016\005\041\020\042\025" +
    "\046\030\047\011\050\006\054\037\063\031\001\002\000" +
    "\024\005\014\016\005\041\020\042\025\046\030\047\011" +
    "\050\006\054\037\063\031\001\002\000\024\005\014\016" +
    "\005\041\020\042\025\046\030\047\011\050\006\054\037" +
    "\063\031\001\002\000\024\005\014\016\005\041\020\042" +
    "\025\046\030\047\011\050\006\054\037\063\031\001\002" +
    "\000\024\005\014\016\005\041\020\042\025\046\030\047" +
    "\011\050\006\054\037\063\031\001\002\000\024\005\014" +
    "\016\005\041\020\042\025\046\030\047\011\050\006\054" +
    "\037\063\031\001\002\000\076\002\uffd8\005\uffd8\006\uffd8" +
    "\012\uffd8\013\041\014\042\015\040\016\uffd8\017\045\020" +
    "\043\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8" +
    "\035\uffd8\036\uffd8\040\uffd8\041\uffd8\042\uffd8\044\uffd8\045" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\054\uffd8\060\uffd8\063\uffd8" +
    "\064\uffd8\001\002\000\076\002\uffd6\005\uffd6\006\uffd6\012" +
    "\uffd6\013\041\014\042\015\040\016\uffd6\017\045\020\043" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\040\uffd6\041\uffd6\042\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\054\uffd6\060\uffd6\063\uffd6\064" +
    "\uffd6\001\002\000\076\002\uffd4\005\uffd4\006\uffd4\012\uffd4" +
    "\013\041\014\042\015\040\016\uffd4\017\045\020\043\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4" +
    "\036\uffd4\040\uffd4\041\uffd4\042\uffd4\044\uffd4\045\uffd4\046" +
    "\uffd4\047\uffd4\050\uffd4\054\uffd4\060\uffd4\063\uffd4\064\uffd4" +
    "\001\002\000\076\002\uffd7\005\uffd7\006\uffd7\012\uffd7\013" +
    "\041\014\042\015\040\016\uffd7\017\045\020\043\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036" +
    "\uffd7\040\uffd7\041\uffd7\042\uffd7\044\uffd7\045\uffd7\046\uffd7" +
    "\047\uffd7\050\uffd7\054\uffd7\060\uffd7\063\uffd7\064\uffd7\001" +
    "\002\000\076\002\uffd5\005\uffd5\006\uffd5\012\uffd5\013\041" +
    "\014\042\015\040\016\uffd5\017\045\020\043\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\044\uffd5\045\uffd5\046\uffd5\047" +
    "\uffd5\050\uffd5\054\uffd5\060\uffd5\063\uffd5\064\uffd5\001\002" +
    "\000\076\002\uffd3\005\uffd3\006\uffd3\012\uffd3\013\041\014" +
    "\042\015\040\016\uffd3\017\045\020\043\027\uffd3\030\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3" +
    "\050\uffd3\054\uffd3\060\uffd3\063\uffd3\064\uffd3\001\002\000" +
    "\026\005\014\016\005\035\013\041\020\042\025\046\030" +
    "\047\011\050\006\054\037\063\031\001\002\000\010\006" +
    "\177\033\107\034\111\001\002\000\004\011\200\001\002" +
    "\000\044\005\014\016\005\027\017\031\023\035\013\040" +
    "\021\041\020\042\025\044\010\045\022\046\030\047\011" +
    "\050\006\054\027\060\026\063\031\064\024\001\002\000" +
    "\046\005\014\012\202\016\005\027\017\031\023\035\013" +
    "\040\021\041\020\042\025\044\010\045\022\046\030\047" +
    "\011\050\006\054\027\060\026\063\031\064\024\001\002" +
    "\000\054\002\ufff2\005\ufff2\012\ufff2\016\ufff2\027\ufff2\030" +
    "\ufff2\031\ufff2\032\ufff2\035\ufff2\040\ufff2\041\ufff2\042\ufff2" +
    "\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050\ufff2\054\ufff2\060" +
    "\ufff2\063\ufff2\064\ufff2\001\002\000\024\005\014\016\005" +
    "\041\020\042\025\046\030\047\011\050\006\054\037\063" +
    "\031\001\002\000\020\013\041\014\042\015\040\016\044" +
    "\017\045\020\043\037\205\001\002\000\024\005\014\016" +
    "\005\041\020\042\025\046\030\047\011\050\006\054\037" +
    "\063\031\001\002\000\066\002\ufff8\005\ufff8\012\ufff8\013" +
    "\041\014\042\015\040\016\044\017\045\020\043\027\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\035\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\054\ufff8" +
    "\060\ufff8\063\ufff8\064\ufff8\001\002\000\122\002\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040" +
    "\uffe8\041\uffe8\042\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8" +
    "\050\uffe8\054\uffe8\060\uffe8\062\uffe8\063\uffe8\064\uffe8\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\014\002\014\003\003\004\015\005\011\006" +
    "\006\001\001\000\010\004\101\005\011\006\006\001\001" +
    "\000\004\005\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\011\006\157\001\001\000\004\005\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\061\001\001\000\006\005\034\012\035" +
    "\001\001\000\006\005\055\013\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\053" +
    "\001\001\000\004\005\052\001\001\000\004\005\051\001" +
    "\001\000\004\005\050\001\001\000\004\005\047\001\001" +
    "\000\004\005\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\055\013\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\100\004\015\005\011\006\006" +
    "\001\001\000\010\004\101\005\011\006\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\011\006\105\001\001\000\002\001\001\000\006\005" +
    "\011\006\113\001\001\000\002\001\001\000\006\005\011" +
    "\006\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\011\006\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\120\004\015\005" +
    "\011\006\006\001\001\000\010\004\101\005\011\006\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\133\004\015\005\011\006\006\001\001\000\002\001\001" +
    "\000\006\005\011\006\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\131\004\015\005\011\006\006" +
    "\001\001\000\010\004\101\005\011\006\006\001\001\000" +
    "\002\001\001\000\010\004\101\005\011\006\006\001\001" +
    "\000\002\001\001\000\004\005\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\142\010\143\001\001" +
    "\000\002\001\001\000\004\010\151\001\001\000\002\001" +
    "\001\000\004\005\145\001\001\000\002\001\001\000\012" +
    "\003\147\004\015\005\011\006\006\001\001\000\010\004" +
    "\101\005\011\006\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\153\004\015\005\011\006\006\001" +
    "\001\000\010\004\101\005\011\006\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\173\001\001\000\004\005\172\001\001" +
    "\000\004\005\171\001\001\000\004\005\170\001\001\000" +
    "\004\005\167\001\001\000\004\005\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\011" +
    "\006\175\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\200\004\015\005\011\006\006\001\001\000\010" +
    "\004\101\005\011\006\006\001\001\000\002\001\001\000" +
    "\004\005\203\001\001\000\002\001\001\000\004\005\205" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Nodo> AST;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
    public LinkedList<Nodo> getAST() {
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    parser.AST=a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT= a;
    RESULT.add(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
    RESULT= new LinkedList<>();
    RESULT.add(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= PRINT PARIZQ expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            //System.out.println("El valor de la expresión es: "+a);
            RESULT  =  new Imprimir ((Expresion)a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= IDENTIFICADOR IGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Declaracion (a, (Expresion)b,1);       
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= IDENTIFICADOR IGUAL expresion PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new Declaracion(a,(Expresion)b,1);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= IDENTIFICADOR IGUAL listaDeclaraciones 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Object> b = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT = new Declaracion(a,b,2,1);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT  =  new Imprimir ((Expresion)a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= expresioncomp INTERROGACION expresion DOSP expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Imprimir((Expresion)new Operacion(Operacion.Tipo_operacion.TERNARIO,(Expresion)a, (Expresion)b,(Expresion)c)); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new If((Operacion)a,b);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER ELSE LLAVEIZQ instrucciones LLAVEDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new If((Operacion)a,b,c);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER ELSE IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new IfElse((Operacion)a,(Operacion)d,b,c);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= SWITCH PARIZQ expresion PARDER LLAVEIZQ listacase LLAVEDER 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoCase> b = (LinkedList<NodoCase>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new SwitchCase(b,(Expresion)a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= BREAK PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new Break (a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= WHILE PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            //System.out.println(s);
            RESULT = new While((Expresion)a, b);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= DO LLAVEIZQ instrucciones LLAVEDER WHILE PARIZQ expresioncomp PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            //System.out.println(s);
            RESULT = new DoWhile((Expresion)a,b);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= BARPLOT PARIZQ ListaExp PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            RESULT= new BarPlot(a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // listacase ::= listacase CASES 
            {
              LinkedList<NodoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoCase> a = (LinkedList<NodoCase>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoCase b = (NodoCase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                    RESULT=a;
                    RESULT.add(b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listacase",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // listacase ::= CASES 
            {
              LinkedList<NodoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoCase a = (NodoCase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT=new LinkedList<>();
                    RESULT.add(a);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listacase",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CASES ::= CASE expresion DOSP instrucciones 
            {
              NodoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT= new NodoCase((Expresion)a,b);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CASES ::= DEFAULT DOSP instrucciones 
            {
              NodoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT= new NodoCase(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // listaDeclaraciones ::= C ListaExp PARDER 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        RESULT= a;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ListaExp ::= ListaExp COMA expresion 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT= a;
                RESULT.add((Expresion)b);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaExp",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ListaExp ::= expresion 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = new ArrayList<>();
                RESULT.add((Expresion)a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaExp",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresion ::= MENOS expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.UMENOS,(Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresion ::= expresion MAS expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.SUMA,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion ::= expresion MENOS expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.RESTA,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion ::= expresion POR expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MULTIPLICACION,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion ::= expresion DIVIDIDO expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.DIVISION,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion ::= expresion POTENCIA expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.POTENCIA,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion ::= expresion MODULO expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MODULO,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= ENTERO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.INT));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= DECIMAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.DOUBLE));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= CADENA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.STRING));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= TRUE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.BOOLEAN));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= FALSE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.BOOLEAN));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new id(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= IDENTIFICADOR CORIZQ expresion CORDER CORIZQ expresion CORDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= NULL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.STRING));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresioncomp ::= expresion IGUALD expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.IGUALIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresioncomp ::= expresion DESIGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.DESIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresioncomp ::= expresion MAYOR expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MAYOR,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresioncomp ::= expresion MENOR expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MENOR,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresioncomp ::= expresion MAYORIGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MAYORIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresioncomp ::= expresion MENORIGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MENORIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresioncomp ::= expresioncomp AND expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.AND,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresioncomp ::= expresioncomp OR expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.OR,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresioncomp ::= NOT expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.NOT,(Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
