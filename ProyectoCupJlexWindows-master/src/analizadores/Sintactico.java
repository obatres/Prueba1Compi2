
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import arbol.Expresion;
import arbol.Nodo;
import arbol.Instruccion;
import arbol.Asignacion;
import arbol.Simbolo.*;
import arbol.TablaDeSimbolos;
import java.util.LinkedList;
import arbol.Operacion;
import arbol.Imprimir;
import arbol.If.If;
import arbol.If.IfElse;
import arbol.While.While;
import arbol.DoWhile.DoWhile;
import arbol.SwitchCase.NodoCase;
import arbol.SwitchCase.SwitchCase;
import arbol.SwitchCase.Break;
import arbol.Tipo.tipo.*;
import arbol.Tipo;
import arbol.Funciones.Parametro;
import arbol.Funciones.DefinicionDeFuncion;
import arbol.Funciones.Funcion;
import arbol.Funciones.LlamadaFuncion;
import arbol.Funciones.FuncionesDefinidas.TypeOf;
import arbol.Funciones.FuncionesDefinidas.Lenght;
import arbol.Funciones.FuncionesDefinidas.StringLenght;
import arbol.Funciones.FuncionesDefinidas.Remove;
import arbol.Funciones.FuncionesDefinidas.toLowerCase;
import arbol.Funciones.FuncionesDefinidas.toUperCase;
import arbol.Graficas.BarPlot;
import arbol.Graficas.PiePlot;
import java.util.ArrayList;
import arbol.Declaracion;
import arbol.Single;
import arbol.id;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\003\000\002\004\007" +
    "\000\002\004\003\000\002\004\003\000\002\004\007\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\022" +
    "\005\000\002\022\006\000\002\022\005\000\002\022\006" +
    "\000\002\017\006\000\002\017\007\000\002\017\005\000" +
    "\002\017\006\000\002\015\005\000\002\015\003\000\002" +
    "\020\007\000\002\020\007\000\002\021\011\000\002\021" +
    "\015\000\002\021\021\000\002\021\011\000\002\021\004" +
    "\000\002\021\011\000\002\021\013\000\002\016\012\000" +
    "\002\016\013\000\002\016\012\000\002\016\011\000\002" +
    "\014\005\000\002\014\003\000\002\013\003\000\002\013" +
    "\005\000\002\007\004\000\002\007\003\000\002\010\006" +
    "\000\002\010\004\000\002\011\005\000\002\012\005\000" +
    "\002\012\003\000\002\005\004\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\011\000\002\005\003\000\002" +
    "\005\005\000\002\005\003\000\002\005\006\000\002\005" +
    "\006\000\002\005\006\000\002\005\011\000\002\005\007" +
    "\000\002\005\007\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\072\005\022\016\031\027\037\031\034\035" +
    "\015\040\020\041\025\042\046\044\042\045\050\046\007" +
    "\047\023\050\027\052\014\054\047\057\045\062\017\063" +
    "\032\064\036\065\011\066\016\067\041\070\030\071\004" +
    "\072\040\073\006\074\012\075\005\001\002\000\042\005" +
    "\022\016\031\041\025\042\046\046\007\047\023\050\027" +
    "\052\067\057\045\062\017\063\032\071\004\072\040\073" +
    "\006\074\012\075\005\001\002\000\004\005\337\001\002" +
    "\000\004\005\331\001\002\000\152\002\uffc9\004\uffc9\005" +
    "\uffc9\006\uffc9\010\uffc9\012\uffc9\013\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\052\uffc9\054\uffc9\056\uffc9\057\uffc9\061\uffc9\062\uffc9\063" +
    "\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071\uffc9" +
    "\072\uffc9\073\uffc9\074\uffc9\075\uffc9\001\002\000\074\002" +
    "\000\005\022\016\031\027\037\031\034\035\015\040\020" +
    "\041\025\042\046\044\042\045\050\046\007\047\023\050" +
    "\027\052\054\054\047\057\045\062\017\063\032\064\036" +
    "\065\011\066\016\067\041\070\030\071\004\072\040\073" +
    "\006\074\012\075\005\001\002\000\004\005\325\001\002" +
    "\000\004\005\321\001\002\000\102\002\ufff6\005\ufff6\012" +
    "\ufff6\016\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\035\ufff6" +
    "\040\ufff6\041\ufff6\042\ufff6\044\ufff6\045\ufff6\046\ufff6\047" +
    "\ufff6\050\ufff6\052\ufff6\054\ufff6\057\ufff6\062\ufff6\063\ufff6" +
    "\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071\ufff6\072" +
    "\ufff6\073\ufff6\074\ufff6\075\ufff6\001\002\000\040\005\060" +
    "\007\057\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\053\320\001\002\000\044\005\022\016\031\035\015\041" +
    "\025\042\046\046\007\047\023\050\027\052\067\057\045" +
    "\062\017\063\032\071\004\072\040\073\006\074\012\075" +
    "\005\001\002\000\004\005\313\001\002\000\004\005\310" +
    "\001\002\000\004\005\267\001\002\000\102\002\ufffd\005" +
    "\ufffd\012\ufffd\016\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd" +
    "\035\ufffd\040\ufffd\041\ufffd\042\ufffd\044\ufffd\045\ufffd\046" +
    "\ufffd\047\ufffd\050\ufffd\052\ufffd\054\ufffd\057\ufffd\062\ufffd" +
    "\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd\071" +
    "\ufffd\072\ufffd\073\ufffd\074\ufffd\075\ufffd\001\002\000\042" +
    "\005\022\016\031\041\025\042\046\046\007\047\023\050" +
    "\027\052\067\057\045\062\017\063\032\071\004\072\040" +
    "\073\006\074\012\075\005\001\002\000\152\002\uffc8\004" +
    "\uffc8\005\uffc8\006\uffc8\010\uffc8\012\uffc8\013\uffc8\014\uffc8" +
    "\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023" +
    "\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\052\uffc8\054\uffc8\056\uffc8\057\uffc8\061\uffc8\062" +
    "\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8" +
    "\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\001\002\000" +
    "\102\002\ufff8\005\ufff8\012\ufff8\016\ufff8\027\ufff8\030\ufff8" +
    "\031\ufff8\032\ufff8\035\ufff8\040\ufff8\041\ufff8\042\ufff8\044" +
    "\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8\052\ufff8\054\ufff8" +
    "\057\ufff8\062\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8\067" +
    "\ufff8\070\ufff8\071\ufff8\072\ufff8\073\ufff8\074\ufff8\075\ufff8" +
    "\001\002\000\152\002\uffc6\004\uffc6\005\uffc6\006\uffc6\010" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\044" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\052\uffc6\054\uffc6" +
    "\056\uffc6\057\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065" +
    "\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072\uffc6\073\uffc6" +
    "\074\uffc6\075\uffc6\001\002\000\110\002\ufffa\005\ufffa\012" +
    "\ufffa\016\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\167" +
    "\034\171\035\ufffa\036\263\040\ufffa\041\ufffa\042\ufffa\044" +
    "\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\052\ufffa\054\ufffa" +
    "\057\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067" +
    "\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa\075\ufffa" +
    "\001\002\000\152\002\uffc7\004\uffc7\005\uffc7\006\uffc7\010" +
    "\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7" +
    "\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026" +
    "\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\052\uffc7\054\uffc7" +
    "\056\uffc7\057\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7" +
    "\074\uffc7\075\uffc7\001\002\000\004\005\257\001\002\000" +
    "\042\005\022\016\031\041\025\042\046\046\007\047\023" +
    "\050\027\052\067\057\045\062\017\063\032\071\004\072" +
    "\040\073\006\074\012\075\005\001\002\000\152\002\uffc2" +
    "\004\uffc2\005\uffc2\006\uffc2\010\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2" +
    "\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2" +
    "\040\uffc2\041\uffc2\042\uffc2\044\uffc2\045\uffc2\046\uffc2\047" +
    "\uffc2\050\uffc2\052\uffc2\054\uffc2\056\uffc2\057\uffc2\061\uffc2" +
    "\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070" +
    "\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\001\002" +
    "\000\032\013\077\014\100\015\076\016\102\017\103\020" +
    "\101\021\247\022\246\023\243\024\245\025\242\026\244" +
    "\001\002\000\004\004\241\001\002\000\102\002\ufffb\005" +
    "\ufffb\012\ufffb\016\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\035\ufffb\040\ufffb\041\ufffb\042\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\052\ufffb\054\ufffb\057\ufffb\062\ufffb" +
    "\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\070\ufffb\071" +
    "\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\001\002\000\004" +
    "\005\235\001\002\000\004\005\217\001\002\000\042\005" +
    "\022\016\031\041\025\042\046\046\007\047\023\050\027" +
    "\052\067\057\045\062\017\063\032\071\004\072\040\073" +
    "\006\074\012\075\005\001\002\000\004\005\210\001\002" +
    "\000\004\005\202\001\002\000\102\002\ufff7\005\ufff7\012" +
    "\ufff7\016\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\035\ufff7" +
    "\040\ufff7\041\ufff7\042\ufff7\044\ufff7\045\ufff7\046\ufff7\047" +
    "\ufff7\050\ufff7\052\ufff7\054\ufff7\057\ufff7\062\ufff7\063\ufff7" +
    "\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072" +
    "\ufff7\073\ufff7\074\ufff7\075\ufff7\001\002\000\004\002\201" +
    "\001\002\000\152\002\uffc0\004\uffc0\005\uffc0\006\uffc0\010" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026" +
    "\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0" +
    "\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\052\uffc0\054\uffc0" +
    "\056\uffc0\057\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\065" +
    "\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0" +
    "\074\uffc0\075\uffc0\001\002\000\152\002\uffc5\004\uffc5\005" +
    "\uffc5\006\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5\015\uffc5" +
    "\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\052\uffc5\054\uffc5\056\uffc5\057\uffc5\061\uffc5\062\uffc5\063" +
    "\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5" +
    "\072\uffc5\073\uffc5\074\uffc5\075\uffc5\001\002\000\004\005" +
    "\175\001\002\000\004\011\051\001\002\000\072\005\022" +
    "\016\031\027\037\031\034\035\015\040\020\041\025\042" +
    "\046\044\042\045\050\046\007\047\023\050\027\052\014" +
    "\054\047\057\045\062\017\063\032\064\036\065\011\066" +
    "\016\067\041\070\030\071\004\072\040\073\006\074\012" +
    "\075\005\001\002\000\074\005\022\012\053\016\031\027" +
    "\037\031\034\035\015\040\020\041\025\042\046\044\042" +
    "\045\050\046\007\047\023\050\027\052\054\054\047\057" +
    "\045\062\017\063\032\064\036\065\011\066\016\067\041" +
    "\070\030\071\004\072\040\073\006\074\012\075\005\001" +
    "\002\000\004\044\164\001\002\000\040\005\060\007\057" +
    "\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\053\061" +
    "\001\002\000\102\002\uffff\005\uffff\012\uffff\016\uffff\027" +
    "\uffff\030\uffff\031\uffff\032\uffff\035\uffff\040\uffff\041\uffff" +
    "\042\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050\uffff\052" +
    "\uffff\054\uffff\057\uffff\062\uffff\063\uffff\064\uffff\065\uffff" +
    "\066\uffff\067\uffff\070\uffff\071\uffff\072\uffff\073\uffff\074" +
    "\uffff\075\uffff\001\002\000\102\002\ufffe\005\ufffe\012\ufffe" +
    "\016\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\035\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\052\ufffe\054\ufffe\057\ufffe\062\ufffe\063\ufffe\064" +
    "\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe" +
    "\073\ufffe\074\ufffe\075\ufffe\001\002\000\042\005\022\016" +
    "\031\041\025\042\046\046\007\047\023\050\027\052\067" +
    "\057\045\062\017\063\032\071\004\072\040\073\006\074" +
    "\012\075\005\001\002\000\044\005\022\006\150\016\031" +
    "\041\025\042\046\046\007\047\023\050\027\052\067\057" +
    "\045\062\017\063\032\071\004\072\040\073\006\074\012" +
    "\075\005\001\002\000\046\005\063\016\031\041\025\042" +
    "\046\046\007\047\023\050\027\052\067\055\064\057\045" +
    "\060\065\062\017\063\032\071\004\072\040\073\006\074" +
    "\012\075\005\001\002\000\116\002\ufff2\004\146\005\ufff2" +
    "\012\ufff2\013\077\014\100\015\076\016\102\017\103\020" +
    "\101\027\ufff2\030\ufff2\031\ufff2\032\ufff2\035\ufff2\040\ufff2" +
    "\041\ufff2\042\ufff2\044\ufff2\045\ufff2\046\ufff2\047\ufff2\050" +
    "\ufff2\052\ufff2\054\ufff2\057\ufff2\062\ufff2\063\ufff2\064\ufff2" +
    "\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2\073" +
    "\ufff2\074\ufff2\075\ufff2\001\002\000\044\005\022\016\031" +
    "\041\025\042\046\046\007\047\023\050\027\052\135\056" +
    "\134\057\045\062\017\063\032\071\004\072\040\073\006" +
    "\074\012\075\005\001\002\000\004\005\112\001\002\000" +
    "\042\005\022\016\031\041\025\042\046\046\007\047\023" +
    "\050\027\052\067\057\045\062\017\063\032\071\004\072" +
    "\040\073\006\074\012\075\005\001\002\000\104\002\ufff0" +
    "\004\070\005\ufff0\012\ufff0\016\ufff0\027\ufff0\030\ufff0\031" +
    "\ufff0\032\ufff0\035\ufff0\040\ufff0\041\ufff0\042\ufff0\044\ufff0" +
    "\045\ufff0\046\ufff0\047\ufff0\050\ufff0\052\ufff0\054\ufff0\057" +
    "\ufff0\062\ufff0\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0" +
    "\070\ufff0\071\ufff0\072\ufff0\073\ufff0\074\ufff0\075\ufff0\001" +
    "\002\000\154\002\uffc4\004\uffc4\005\uffc4\006\uffc4\007\057" +
    "\010\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034" +
    "\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\052\uffc4\054" +
    "\uffc4\056\uffc4\057\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4" +
    "\065\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4\073" +
    "\uffc4\074\uffc4\075\uffc4\001\002\000\102\002\uffef\005\uffef" +
    "\012\uffef\016\uffef\027\uffef\030\uffef\031\uffef\032\uffef\035" +
    "\uffef\040\uffef\041\uffef\042\uffef\044\uffef\045\uffef\046\uffef" +
    "\047\uffef\050\uffef\052\uffef\054\uffef\057\uffef\062\uffef\063" +
    "\uffef\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef\071\uffef" +
    "\072\uffef\073\uffef\074\uffef\075\uffef\001\002\000\022\006" +
    "\uffd1\013\077\014\100\015\076\016\102\017\103\020\101" +
    "\061\uffd1\001\002\000\006\006\074\061\073\001\002\000" +
    "\042\005\022\016\031\041\025\042\046\046\007\047\023" +
    "\050\027\052\067\057\045\062\017\063\032\071\004\072" +
    "\040\073\006\074\012\075\005\001\002\000\104\002\uffd3" +
    "\004\uffd3\005\uffd3\012\uffd3\016\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\035\uffd3\040\uffd3\041\uffd3\042\uffd3\044\uffd3" +
    "\045\uffd3\046\uffd3\047\uffd3\050\uffd3\052\uffd3\054\uffd3\057" +
    "\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3\067\uffd3" +
    "\070\uffd3\071\uffd3\072\uffd3\073\uffd3\074\uffd3\075\uffd3\001" +
    "\002\000\022\006\uffd2\013\077\014\100\015\076\016\102" +
    "\017\103\020\101\061\uffd2\001\002\000\042\005\022\016" +
    "\031\041\025\042\046\046\007\047\023\050\027\052\067" +
    "\057\045\062\017\063\032\071\004\072\040\073\006\074" +
    "\012\075\005\001\002\000\042\005\022\016\031\041\025" +
    "\042\046\046\007\047\023\050\027\052\067\057\045\062" +
    "\017\063\032\071\004\072\040\073\006\074\012\075\005" +
    "\001\002\000\042\005\022\016\031\041\025\042\046\046" +
    "\007\047\023\050\027\052\067\057\045\062\017\063\032" +
    "\071\004\072\040\073\006\074\012\075\005\001\002\000" +
    "\042\005\022\016\031\041\025\042\046\046\007\047\023" +
    "\050\027\052\067\057\045\062\017\063\032\071\004\072" +
    "\040\073\006\074\012\075\005\001\002\000\042\005\022" +
    "\016\031\041\025\042\046\046\007\047\023\050\027\052" +
    "\067\057\045\062\017\063\032\071\004\072\040\073\006" +
    "\074\012\075\005\001\002\000\042\005\022\016\031\041" +
    "\025\042\046\046\007\047\023\050\027\052\067\057\045" +
    "\062\017\063\032\071\004\072\040\073\006\074\012\075" +
    "\005\001\002\000\152\002\uffcd\004\uffcd\005\uffcd\006\uffcd" +
    "\010\uffcd\012\uffcd\013\077\014\uffcd\015\uffcd\016\uffcd\017" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050\uffcd\052\uffcd\054" +
    "\uffcd\056\uffcd\057\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd" +
    "\065\uffcd\066\uffcd\067\uffcd\070\uffcd\071\uffcd\072\uffcd\073" +
    "\uffcd\074\uffcd\075\uffcd\001\002\000\152\002\uffce\004\uffce" +
    "\005\uffce\006\uffce\010\uffce\012\uffce\013\077\014\100\015" +
    "\uffce\016\uffce\017\103\020\101\021\uffce\022\uffce\023\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032" +
    "\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce" +
    "\041\uffce\042\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\052\uffce\054\uffce\056\uffce\057\uffce\061\uffce\062\uffce" +
    "\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070\uffce\071" +
    "\uffce\072\uffce\073\uffce\074\uffce\075\uffce\001\002\000\152" +
    "\002\uffcc\004\uffcc\005\uffcc\006\uffcc\010\uffcc\012\uffcc\013" +
    "\077\014\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\044\uffcc\045\uffcc\046" +
    "\uffcc\047\uffcc\050\uffcc\052\uffcc\054\uffcc\056\uffcc\057\uffcc" +
    "\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065\uffcc\066\uffcc\067" +
    "\uffcc\070\uffcc\071\uffcc\072\uffcc\073\uffcc\074\uffcc\075\uffcc" +
    "\001\002\000\152\002\uffca\004\uffca\005\uffca\006\uffca\010" +
    "\uffca\012\uffca\013\077\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\044" +
    "\uffca\045\uffca\046\uffca\047\uffca\050\uffca\052\uffca\054\uffca" +
    "\056\uffca\057\uffca\061\uffca\062\uffca\063\uffca\064\uffca\065" +
    "\uffca\066\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca" +
    "\074\uffca\075\uffca\001\002\000\152\002\uffcb\004\uffcb\005" +
    "\uffcb\006\uffcb\010\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb" +
    "\052\uffcb\054\uffcb\056\uffcb\057\uffcb\061\uffcb\062\uffcb\063" +
    "\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070\uffcb\071\uffcb" +
    "\072\uffcb\073\uffcb\074\uffcb\075\uffcb\001\002\000\152\002" +
    "\uffcf\004\uffcf\005\uffcf\006\uffcf\010\uffcf\012\uffcf\013\077" +
    "\014\100\015\uffcf\016\uffcf\017\103\020\101\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\047\uffcf\050\uffcf\052\uffcf\054\uffcf\056\uffcf\057\uffcf\061" +
    "\uffcf\062\uffcf\063\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf" +
    "\070\uffcf\071\uffcf\072\uffcf\073\uffcf\074\uffcf\075\uffcf\001" +
    "\002\000\006\006\113\052\114\001\002\000\004\011\127" +
    "\001\002\000\012\006\uffd9\053\125\056\uffd9\061\uffd9\001" +
    "\002\000\006\006\120\061\117\001\002\000\010\006\uffda" +
    "\056\uffda\061\uffda\001\002\000\004\052\114\001\002\000" +
    "\004\011\121\001\002\000\072\005\022\016\031\027\037" +
    "\031\034\035\015\040\020\041\025\042\046\044\042\045" +
    "\050\046\007\047\023\050\027\052\014\054\047\057\045" +
    "\062\017\063\032\064\036\065\011\066\016\067\041\070" +
    "\030\071\004\072\040\073\006\074\012\075\005\001\002" +
    "\000\074\005\022\012\123\016\031\027\037\031\034\035" +
    "\015\040\020\041\025\042\046\044\042\045\050\046\007" +
    "\047\023\050\027\052\054\054\047\057\045\062\017\063" +
    "\032\064\036\065\011\066\016\067\041\070\030\071\004" +
    "\072\040\073\006\074\012\075\005\001\002\000\102\002" +
    "\uffde\005\uffde\012\uffde\016\uffde\027\uffde\030\uffde\031\uffde" +
    "\032\uffde\035\uffde\040\uffde\041\uffde\042\uffde\044\uffde\045" +
    "\uffde\046\uffde\047\uffde\050\uffde\052\uffde\054\uffde\057\uffde" +
    "\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\070" +
    "\uffde\071\uffde\072\uffde\073\uffde\074\uffde\075\uffde\001\002" +
    "\000\010\006\uffdb\056\uffdb\061\uffdb\001\002\000\042\005" +
    "\022\016\031\041\025\042\046\046\007\047\023\050\027" +
    "\052\067\057\045\062\017\063\032\071\004\072\040\073" +
    "\006\074\012\075\005\001\002\000\024\006\uffd8\013\077" +
    "\014\100\015\076\016\102\017\103\020\101\056\uffd8\061" +
    "\uffd8\001\002\000\072\005\022\016\031\027\037\031\034" +
    "\035\015\040\020\041\025\042\046\044\042\045\050\046" +
    "\007\047\023\050\027\052\014\054\047\057\045\062\017" +
    "\063\032\064\036\065\011\066\016\067\041\070\030\071" +
    "\004\072\040\073\006\074\012\075\005\001\002\000\074" +
    "\005\022\012\131\016\031\027\037\031\034\035\015\040" +
    "\020\041\025\042\046\044\042\045\050\046\007\047\023" +
    "\050\027\052\054\054\047\057\045\062\017\063\032\064" +
    "\036\065\011\066\016\067\041\070\030\071\004\072\040" +
    "\073\006\074\012\075\005\001\002\000\102\002\uffdf\005" +
    "\uffdf\012\uffdf\016\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\035\uffdf\040\uffdf\041\uffdf\042\uffdf\044\uffdf\045\uffdf\046" +
    "\uffdf\047\uffdf\050\uffdf\052\uffdf\054\uffdf\057\uffdf\062\uffdf" +
    "\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067\uffdf\070\uffdf\071" +
    "\uffdf\072\uffdf\073\uffdf\074\uffdf\075\uffdf\001\002\000\006" +
    "\056\142\061\117\001\002\000\020\006\141\013\077\014" +
    "\100\015\076\016\102\017\103\020\101\001\002\000\004" +
    "\011\136\001\002\000\030\006\uffc4\007\057\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\053\125\056\uffd9" +
    "\061\uffd9\001\002\000\072\005\022\016\031\027\037\031" +
    "\034\035\015\040\020\041\025\042\046\044\042\045\050" +
    "\046\007\047\023\050\027\052\014\054\047\057\045\062" +
    "\017\063\032\064\036\065\011\066\016\067\041\070\030" +
    "\071\004\072\040\073\006\074\012\075\005\001\002\000" +
    "\074\005\022\012\140\016\031\027\037\031\034\035\015" +
    "\040\020\041\025\042\046\044\042\045\050\046\007\047" +
    "\023\050\027\052\054\054\047\057\045\062\017\063\032" +
    "\064\036\065\011\066\016\067\041\070\030\071\004\072" +
    "\040\073\006\074\012\075\005\001\002\000\102\002\uffdc" +
    "\005\uffdc\012\uffdc\016\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\035\uffdc\040\uffdc\041\uffdc\042\uffdc\044\uffdc\045\uffdc" +
    "\046\uffdc\047\uffdc\050\uffdc\052\uffdc\054\uffdc\057\uffdc\062" +
    "\uffdc\063\uffdc\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc" +
    "\071\uffdc\072\uffdc\073\uffdc\074\uffdc\075\uffdc\001\002\000" +
    "\152\002\uffc1\004\uffc1\005\uffc1\006\uffc1\010\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\052\uffc1\054\uffc1\056\uffc1\057" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1" +
    "\067\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075" +
    "\uffc1\001\002\000\004\011\143\001\002\000\072\005\022" +
    "\016\031\027\037\031\034\035\015\040\020\041\025\042" +
    "\046\044\042\045\050\046\007\047\023\050\027\052\014" +
    "\054\047\057\045\062\017\063\032\064\036\065\011\066" +
    "\016\067\041\070\030\071\004\072\040\073\006\074\012" +
    "\075\005\001\002\000\074\005\022\012\145\016\031\027" +
    "\037\031\034\035\015\040\020\041\025\042\046\044\042" +
    "\045\050\046\007\047\023\050\027\052\054\054\047\057" +
    "\045\062\017\063\032\064\036\065\011\066\016\067\041" +
    "\070\030\071\004\072\040\073\006\074\012\075\005\001" +
    "\002\000\102\002\uffdd\005\uffdd\012\uffdd\016\uffdd\027\uffdd" +
    "\030\uffdd\031\uffdd\032\uffdd\035\uffdd\040\uffdd\041\uffdd\042" +
    "\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\052\uffdd" +
    "\054\uffdd\057\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd\066" +
    "\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd\074\uffdd" +
    "\075\uffdd\001\002\000\102\002\ufff1\005\ufff1\012\ufff1\016" +
    "\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\035\ufff1\040\ufff1" +
    "\041\ufff1\042\ufff1\044\ufff1\045\ufff1\046\ufff1\047\ufff1\050" +
    "\ufff1\052\ufff1\054\ufff1\057\ufff1\062\ufff1\063\ufff1\064\ufff1" +
    "\065\ufff1\066\ufff1\067\ufff1\070\ufff1\071\ufff1\072\ufff1\073" +
    "\ufff1\074\ufff1\075\ufff1\001\002\000\022\006\uffe9\013\077" +
    "\014\100\015\076\016\102\017\103\020\101\061\uffe9\001" +
    "\002\000\104\002\uffec\004\156\005\uffec\012\uffec\016\uffec" +
    "\027\uffec\030\uffec\031\uffec\032\uffec\035\uffec\040\uffec\041" +
    "\uffec\042\uffec\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec" +
    "\052\uffec\054\uffec\057\uffec\062\uffec\063\uffec\064\uffec\065" +
    "\uffec\066\uffec\067\uffec\070\uffec\071\uffec\072\uffec\073\uffec" +
    "\074\uffec\075\uffec\001\002\000\006\006\153\061\152\001" +
    "\002\000\042\005\022\016\031\041\025\042\046\046\007" +
    "\047\023\050\027\052\067\057\045\062\017\063\032\071" +
    "\004\072\040\073\006\074\012\075\005\001\002\000\104" +
    "\002\uffeb\004\154\005\uffeb\012\uffeb\016\uffeb\027\uffeb\030" +
    "\uffeb\031\uffeb\032\uffeb\035\uffeb\040\uffeb\041\uffeb\042\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\052\uffeb\054" +
    "\uffeb\057\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb\066\uffeb" +
    "\067\uffeb\070\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075" +
    "\uffeb\001\002\000\102\002\uffed\005\uffed\012\uffed\016\uffed" +
    "\027\uffed\030\uffed\031\uffed\032\uffed\035\uffed\040\uffed\041" +
    "\uffed\042\uffed\044\uffed\045\uffed\046\uffed\047\uffed\050\uffed" +
    "\052\uffed\054\uffed\057\uffed\062\uffed\063\uffed\064\uffed\065" +
    "\uffed\066\uffed\067\uffed\070\uffed\071\uffed\072\uffed\073\uffed" +
    "\074\uffed\075\uffed\001\002\000\022\006\uffea\013\077\014" +
    "\100\015\076\016\102\017\103\020\101\061\uffea\001\002" +
    "\000\102\002\uffee\005\uffee\012\uffee\016\uffee\027\uffee\030" +
    "\uffee\031\uffee\032\uffee\035\uffee\040\uffee\041\uffee\042\uffee" +
    "\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\052\uffee\054" +
    "\uffee\057\uffee\062\uffee\063\uffee\064\uffee\065\uffee\066\uffee" +
    "\067\uffee\070\uffee\071\uffee\072\uffee\073\uffee\074\uffee\075" +
    "\uffee\001\002\000\020\010\160\013\077\014\100\015\076" +
    "\016\102\017\103\020\101\001\002\000\004\007\161\001" +
    "\002\000\042\005\022\016\031\041\025\042\046\046\007" +
    "\047\023\050\027\052\067\057\045\062\017\063\032\071" +
    "\004\072\040\073\006\074\012\075\005\001\002\000\020" +
    "\010\163\013\077\014\100\015\076\016\102\017\103\020" +
    "\101\001\002\000\152\002\uffc3\004\uffc3\005\uffc3\006\uffc3" +
    "\010\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3" +
    "\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\052\uffc3\054" +
    "\uffc3\056\uffc3\057\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3" +
    "\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073" +
    "\uffc3\074\uffc3\075\uffc3\001\002\000\004\005\165\001\002" +
    "\000\044\005\022\016\031\035\015\041\025\042\046\046" +
    "\007\047\023\050\027\052\067\057\045\062\017\063\032" +
    "\071\004\072\040\073\006\074\012\075\005\001\002\000" +
    "\010\006\170\033\167\034\171\001\002\000\044\005\022" +
    "\016\031\035\015\041\025\042\046\046\007\047\023\050" +
    "\027\052\067\057\045\062\017\063\032\071\004\072\040" +
    "\073\006\074\012\075\005\001\002\000\004\004\173\001" +
    "\002\000\044\005\022\016\031\035\015\041\025\042\046" +
    "\046\007\047\023\050\027\052\067\057\045\062\017\063" +
    "\032\071\004\072\040\073\006\074\012\075\005\001\002" +
    "\000\112\002\uffb2\005\uffb2\006\uffb2\012\uffb2\016\uffb2\027" +
    "\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2" +
    "\036\uffb2\040\uffb2\041\uffb2\042\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\052\uffb2\054\uffb2\057\uffb2\062\uffb2" +
    "\063\uffb2\064\uffb2\065\uffb2\066\uffb2\067\uffb2\070\uffb2\071" +
    "\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\001\002\000\102" +
    "\002\uffe0\005\uffe0\012\uffe0\016\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\035\uffe0\040\uffe0\041\uffe0\042\uffe0\044\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\050\uffe0\052\uffe0\054\uffe0\057" +
    "\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0" +
    "\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0\001" +
    "\002\000\112\002\uffb3\005\uffb3\006\uffb3\012\uffb3\016\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\040\uffb3\041\uffb3\042\uffb3\044\uffb3\045\uffb3" +
    "\046\uffb3\047\uffb3\050\uffb3\052\uffb3\054\uffb3\057\uffb3\062" +
    "\uffb3\063\uffb3\064\uffb3\065\uffb3\066\uffb3\067\uffb3\070\uffb3" +
    "\071\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\001\002\000" +
    "\042\005\022\016\031\041\025\042\046\046\007\047\023" +
    "\050\027\052\067\057\045\062\017\063\032\071\004\072" +
    "\040\073\006\074\012\075\005\001\002\000\020\006\177" +
    "\013\077\014\100\015\076\016\102\017\103\020\101\001" +
    "\002\000\004\004\200\001\002\000\102\002\ufffc\005\ufffc" +
    "\012\ufffc\016\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\035" +
    "\ufffc\040\ufffc\041\ufffc\042\ufffc\044\ufffc\045\ufffc\046\ufffc" +
    "\047\ufffc\050\ufffc\052\ufffc\054\ufffc\057\ufffc\062\ufffc\063" +
    "\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\071\ufffc" +
    "\072\ufffc\073\ufffc\074\ufffc\075\ufffc\001\002\000\004\002" +
    "\001\001\002\000\044\005\022\016\031\035\015\041\025" +
    "\042\046\046\007\047\023\050\027\052\067\057\045\062" +
    "\017\063\032\071\004\072\040\073\006\074\012\075\005" +
    "\001\002\000\010\006\204\033\167\034\171\001\002\000" +
    "\004\011\205\001\002\000\072\005\022\016\031\027\037" +
    "\031\034\035\015\040\020\041\025\042\046\044\042\045" +
    "\050\046\007\047\023\050\027\052\014\054\047\057\045" +
    "\062\017\063\032\064\036\065\011\066\016\067\041\070" +
    "\030\071\004\072\040\073\006\074\012\075\005\001\002" +
    "\000\074\005\022\012\207\016\031\027\037\031\034\035" +
    "\015\040\020\041\025\042\046\044\042\045\050\046\007" +
    "\047\023\050\027\052\054\054\047\057\045\062\017\063" +
    "\032\064\036\065\011\066\016\067\041\070\030\071\004" +
    "\072\040\073\006\074\012\075\005\001\002\000\102\002" +
    "\uffe1\005\uffe1\012\uffe1\016\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\035\uffe1\040\uffe1\041\uffe1\042\uffe1\044\uffe1\045" +
    "\uffe1\046\uffe1\047\uffe1\050\uffe1\052\uffe1\054\uffe1\057\uffe1" +
    "\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070" +
    "\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1\075\uffe1\001\002" +
    "\000\042\005\022\016\031\041\025\042\046\046\007\047" +
    "\023\050\027\052\067\057\045\062\017\063\032\071\004" +
    "\072\040\073\006\074\012\075\005\001\002\000\020\006" +
    "\212\013\077\014\100\015\076\016\102\017\103\020\101" +
    "\001\002\000\004\004\213\001\002\000\102\002\ufff4\005" +
    "\ufff4\012\ufff4\016\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4" +
    "\035\ufff4\040\ufff4\041\ufff4\042\ufff4\044\ufff4\045\ufff4\046" +
    "\ufff4\047\ufff4\050\ufff4\052\ufff4\054\ufff4\057\ufff4\062\ufff4" +
    "\063\ufff4\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071" +
    "\ufff4\072\ufff4\073\ufff4\074\ufff4\075\ufff4\001\002\000\020" +
    "\006\215\013\077\014\100\015\076\016\102\017\103\020" +
    "\101\001\002\000\004\004\216\001\002\000\152\002\uffbd" +
    "\004\uffbd\005\uffbd\006\uffbd\010\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\036\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\044\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\052\uffbd\054\uffbd\056\uffbd\057\uffbd\061\uffbd" +
    "\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070" +
    "\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\001\002" +
    "\000\042\005\022\016\031\041\025\042\046\046\007\047" +
    "\023\050\027\052\067\057\045\062\017\063\032\071\004" +
    "\072\040\073\006\074\012\075\005\001\002\000\020\006" +
    "\221\013\077\014\100\015\076\016\102\017\103\020\101" +
    "\001\002\000\004\011\222\001\002\000\006\030\226\032" +
    "\223\001\002\000\072\005\022\016\031\027\037\031\034" +
    "\035\015\040\020\041\025\042\046\044\042\045\050\046" +
    "\007\047\023\050\027\052\014\054\047\057\045\062\017" +
    "\063\032\064\036\065\011\066\016\067\041\070\030\071" +
    "\004\072\040\073\006\074\012\075\005\001\002\000\010" +
    "\012\232\030\226\032\223\001\002\000\010\012\uffd6\030" +
    "\uffd6\032\uffd6\001\002\000\042\005\022\016\031\041\025" +
    "\042\046\046\007\047\023\050\027\052\067\057\045\062" +
    "\017\063\032\071\004\072\040\073\006\074\012\075\005" +
    "\001\002\000\020\013\077\014\100\015\076\016\102\017" +
    "\103\020\101\037\230\001\002\000\072\005\022\016\031" +
    "\027\037\031\034\035\015\040\020\041\025\042\046\044" +
    "\042\045\050\046\007\047\023\050\027\052\014\054\047" +
    "\057\045\062\017\063\032\064\036\065\011\066\016\067" +
    "\041\070\030\071\004\072\040\073\006\074\012\075\005" +
    "\001\002\000\100\005\022\012\uffd5\016\031\027\037\030" +
    "\uffd5\031\034\032\uffd5\035\015\040\020\041\025\042\046" +
    "\044\042\045\050\046\007\047\023\050\027\052\054\054" +
    "\047\057\045\062\017\063\032\064\036\065\011\066\016" +
    "\067\041\070\030\071\004\072\040\073\006\074\012\075" +
    "\005\001\002\000\102\002\uffe3\005\uffe3\012\uffe3\016\uffe3" +
    "\027\uffe3\030\uffe3\031\uffe3\032\uffe3\035\uffe3\040\uffe3\041" +
    "\uffe3\042\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3" +
    "\052\uffe3\054\uffe3\057\uffe3\062\uffe3\063\uffe3\064\uffe3\065" +
    "\uffe3\066\uffe3\067\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3" +
    "\074\uffe3\075\uffe3\001\002\000\010\012\uffd7\030\uffd7\032" +
    "\uffd7\001\002\000\100\005\022\012\uffd4\016\031\027\037" +
    "\030\uffd4\031\034\032\uffd4\035\015\040\020\041\025\042" +
    "\046\044\042\045\050\046\007\047\023\050\027\052\054" +
    "\054\047\057\045\062\017\063\032\064\036\065\011\066" +
    "\016\067\041\070\030\071\004\072\040\073\006\074\012" +
    "\075\005\001\002\000\042\005\022\016\031\041\025\042" +
    "\046\046\007\047\023\050\027\052\067\057\045\062\017" +
    "\063\032\071\004\072\040\073\006\074\012\075\005\001" +
    "\002\000\006\006\237\061\073\001\002\000\004\004\240" +
    "\001\002\000\102\002\uffe8\005\uffe8\012\uffe8\016\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\032\uffe8\035\uffe8\040\uffe8\041\uffe8" +
    "\042\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\052" +
    "\uffe8\054\uffe8\057\uffe8\062\uffe8\063\uffe8\064\uffe8\065\uffe8" +
    "\066\uffe8\067\uffe8\070\uffe8\071\uffe8\072\uffe8\073\uffe8\074" +
    "\uffe8\075\uffe8\001\002\000\102\002\uffe2\005\uffe2\012\uffe2" +
    "\016\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\035\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\044\uffe2\045\uffe2\046\uffe2\047\uffe2" +
    "\050\uffe2\052\uffe2\054\uffe2\057\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2\071\uffe2\072\uffe2" +
    "\073\uffe2\074\uffe2\075\uffe2\001\002\000\042\005\022\016" +
    "\031\041\025\042\046\046\007\047\023\050\027\052\067" +
    "\057\045\062\017\063\032\071\004\072\040\073\006\074" +
    "\012\075\005\001\002\000\042\005\022\016\031\041\025" +
    "\042\046\046\007\047\023\050\027\052\067\057\045\062" +
    "\017\063\032\071\004\072\040\073\006\074\012\075\005" +
    "\001\002\000\042\005\022\016\031\041\025\042\046\046" +
    "\007\047\023\050\027\052\067\057\045\062\017\063\032" +
    "\071\004\072\040\073\006\074\012\075\005\001\002\000" +
    "\042\005\022\016\031\041\025\042\046\046\007\047\023" +
    "\050\027\052\067\057\045\062\017\063\032\071\004\072" +
    "\040\073\006\074\012\075\005\001\002\000\042\005\022" +
    "\016\031\041\025\042\046\046\007\047\023\050\027\052" +
    "\067\057\045\062\017\063\032\071\004\072\040\073\006" +
    "\074\012\075\005\001\002\000\042\005\022\016\031\041" +
    "\025\042\046\046\007\047\023\050\027\052\067\057\045" +
    "\062\017\063\032\071\004\072\040\073\006\074\012\075" +
    "\005\001\002\000\124\002\uffb9\005\uffb9\006\uffb9\012\uffb9" +
    "\013\077\014\100\015\076\016\uffb9\017\103\020\101\027" +
    "\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\036\uffb9\040\uffb9\041\uffb9\042\uffb9\044\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\050\uffb9\052\uffb9\054\uffb9\057\uffb9\062\uffb9" +
    "\063\uffb9\064\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071" +
    "\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\001\002\000\124" +
    "\002\uffb7\005\uffb7\006\uffb7\012\uffb7\013\077\014\100\015" +
    "\076\016\uffb7\017\103\020\101\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\040\uffb7\041" +
    "\uffb7\042\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7" +
    "\052\uffb7\054\uffb7\057\uffb7\062\uffb7\063\uffb7\064\uffb7\065" +
    "\uffb7\066\uffb7\067\uffb7\070\uffb7\071\uffb7\072\uffb7\073\uffb7" +
    "\074\uffb7\075\uffb7\001\002\000\124\002\uffb5\005\uffb5\006" +
    "\uffb5\012\uffb5\013\077\014\100\015\076\016\uffb5\017\103" +
    "\020\101\027\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034" +
    "\uffb5\035\uffb5\036\uffb5\040\uffb5\041\uffb5\042\uffb5\044\uffb5" +
    "\045\uffb5\046\uffb5\047\uffb5\050\uffb5\052\uffb5\054\uffb5\057" +
    "\uffb5\062\uffb5\063\uffb5\064\uffb5\065\uffb5\066\uffb5\067\uffb5" +
    "\070\uffb5\071\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\001" +
    "\002\000\124\002\uffb8\005\uffb8\006\uffb8\012\uffb8\013\077" +
    "\014\100\015\076\016\uffb8\017\103\020\101\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\040\uffb8\041\uffb8\042\uffb8\044\uffb8\045\uffb8\046\uffb8\047" +
    "\uffb8\050\uffb8\052\uffb8\054\uffb8\057\uffb8\062\uffb8\063\uffb8" +
    "\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072" +
    "\uffb8\073\uffb8\074\uffb8\075\uffb8\001\002\000\124\002\uffb6" +
    "\005\uffb6\006\uffb6\012\uffb6\013\077\014\100\015\076\016" +
    "\uffb6\017\103\020\101\027\uffb6\030\uffb6\031\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\036\uffb6\040\uffb6\041\uffb6\042" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\052\uffb6" +
    "\054\uffb6\057\uffb6\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066" +
    "\uffb6\067\uffb6\070\uffb6\071\uffb6\072\uffb6\073\uffb6\074\uffb6" +
    "\075\uffb6\001\002\000\124\002\uffb4\005\uffb4\006\uffb4\012" +
    "\uffb4\013\077\014\100\015\076\016\uffb4\017\103\020\101" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035" +
    "\uffb4\036\uffb4\040\uffb4\041\uffb4\042\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\050\uffb4\052\uffb4\054\uffb4\057\uffb4\062" +
    "\uffb4\063\uffb4\064\uffb4\065\uffb4\066\uffb4\067\uffb4\070\uffb4" +
    "\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\001\002\000" +
    "\152\002\uffd0\004\uffd0\005\uffd0\006\uffd0\010\uffd0\012\uffd0" +
    "\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\052\uffd0\054\uffd0\056\uffd0\057" +
    "\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0" +
    "\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0\074\uffd0\075" +
    "\uffd0\001\002\000\042\005\022\016\031\041\025\042\046" +
    "\046\007\047\023\050\027\052\067\057\045\062\017\063" +
    "\032\071\004\072\040\073\006\074\012\075\005\001\002" +
    "\000\020\006\261\013\077\014\100\015\076\016\102\017" +
    "\103\020\101\001\002\000\004\004\262\001\002\000\102" +
    "\002\ufff3\005\ufff3\012\ufff3\016\ufff3\027\ufff3\030\ufff3\031" +
    "\ufff3\032\ufff3\035\ufff3\040\ufff3\041\ufff3\042\ufff3\044\ufff3" +
    "\045\ufff3\046\ufff3\047\ufff3\050\ufff3\052\ufff3\054\ufff3\057" +
    "\ufff3\062\ufff3\063\ufff3\064\ufff3\065\ufff3\066\ufff3\067\ufff3" +
    "\070\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3\001" +
    "\002\000\042\005\022\016\031\041\025\042\046\046\007" +
    "\047\023\050\027\052\067\057\045\062\017\063\032\071" +
    "\004\072\040\073\006\074\012\075\005\001\002\000\020" +
    "\013\077\014\100\015\076\016\102\017\103\020\101\037" +
    "\265\001\002\000\042\005\022\016\031\041\025\042\046" +
    "\046\007\047\023\050\027\052\067\057\045\062\017\063" +
    "\032\071\004\072\040\073\006\074\012\075\005\001\002" +
    "\000\114\002\ufff9\005\ufff9\012\ufff9\013\077\014\100\015" +
    "\076\016\102\017\103\020\101\027\ufff9\030\ufff9\031\ufff9" +
    "\032\ufff9\035\ufff9\040\ufff9\041\ufff9\042\ufff9\044\ufff9\045" +
    "\ufff9\046\ufff9\047\ufff9\050\ufff9\052\ufff9\054\ufff9\057\ufff9" +
    "\062\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070" +
    "\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\001\002" +
    "\000\044\005\022\016\031\035\015\041\025\042\046\046" +
    "\007\047\023\050\027\052\067\057\045\062\017\063\032" +
    "\071\004\072\040\073\006\074\012\075\005\001\002\000" +
    "\010\006\271\033\167\034\171\001\002\000\004\011\272" +
    "\001\002\000\072\005\022\016\031\027\037\031\034\035" +
    "\015\040\020\041\025\042\046\044\042\045\050\046\007" +
    "\047\023\050\027\052\014\054\047\057\045\062\017\063" +
    "\032\064\036\065\011\066\016\067\041\070\030\071\004" +
    "\072\040\073\006\074\012\075\005\001\002\000\074\005" +
    "\022\012\274\016\031\027\037\031\034\035\015\040\020" +
    "\041\025\042\046\044\042\045\050\046\007\047\023\050" +
    "\027\052\054\054\047\057\045\062\017\063\032\064\036" +
    "\065\011\066\016\067\041\070\030\071\004\072\040\073" +
    "\006\074\012\075\005\001\002\000\104\002\uffe6\005\uffe6" +
    "\012\uffe6\016\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\035" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\043\275\044\uffe6\045\uffe6" +
    "\046\uffe6\047\uffe6\050\uffe6\052\uffe6\054\uffe6\057\uffe6\062" +
    "\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6" +
    "\071\uffe6\072\uffe6\073\uffe6\074\uffe6\075\uffe6\001\002\000" +
    "\006\011\276\040\277\001\002\000\072\005\022\016\031" +
    "\027\037\031\034\035\015\040\020\041\025\042\046\044" +
    "\042\045\050\046\007\047\023\050\027\052\014\054\047" +
    "\057\045\062\017\063\032\064\036\065\011\066\016\067" +
    "\041\070\030\071\004\072\040\073\006\074\012\075\005" +
    "\001\002\000\004\005\300\001\002\000\044\005\022\016" +
    "\031\035\015\041\025\042\046\046\007\047\023\050\027" +
    "\052\067\057\045\062\017\063\032\071\004\072\040\073" +
    "\006\074\012\075\005\001\002\000\010\006\302\033\167" +
    "\034\171\001\002\000\004\011\303\001\002\000\072\005" +
    "\022\016\031\027\037\031\034\035\015\040\020\041\025" +
    "\042\046\044\042\045\050\046\007\047\023\050\027\052" +
    "\014\054\047\057\045\062\017\063\032\064\036\065\011" +
    "\066\016\067\041\070\030\071\004\072\040\073\006\074" +
    "\012\075\005\001\002\000\074\005\022\012\305\016\031" +
    "\027\037\031\034\035\015\040\020\041\025\042\046\044" +
    "\042\045\050\046\007\047\023\050\027\052\054\054\047" +
    "\057\045\062\017\063\032\064\036\065\011\066\016\067" +
    "\041\070\030\071\004\072\040\073\006\074\012\075\005" +
    "\001\002\000\102\002\uffe4\005\uffe4\012\uffe4\016\uffe4\027" +
    "\uffe4\030\uffe4\031\uffe4\032\uffe4\035\uffe4\040\uffe4\041\uffe4" +
    "\042\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050\uffe4\052" +
    "\uffe4\054\uffe4\057\uffe4\062\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\067\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074" +
    "\uffe4\075\uffe4\001\002\000\074\005\022\012\307\016\031" +
    "\027\037\031\034\035\015\040\020\041\025\042\046\044" +
    "\042\045\050\046\007\047\023\050\027\052\054\054\047" +
    "\057\045\062\017\063\032\064\036\065\011\066\016\067" +
    "\041\070\030\071\004\072\040\073\006\074\012\075\005" +
    "\001\002\000\102\002\uffe5\005\uffe5\012\uffe5\016\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\032\uffe5\035\uffe5\040\uffe5\041\uffe5" +
    "\042\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5\052" +
    "\uffe5\054\uffe5\057\uffe5\062\uffe5\063\uffe5\064\uffe5\065\uffe5" +
    "\066\uffe5\067\uffe5\070\uffe5\071\uffe5\072\uffe5\073\uffe5\074" +
    "\uffe5\075\uffe5\001\002\000\042\005\022\016\031\041\025" +
    "\042\046\046\007\047\023\050\027\052\067\057\045\062" +
    "\017\063\032\071\004\072\040\073\006\074\012\075\005" +
    "\001\002\000\006\006\312\061\073\001\002\000\152\002" +
    "\uffbf\004\uffbf\005\uffbf\006\uffbf\010\uffbf\012\uffbf\013\uffbf" +
    "\014\uffbf\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\044\uffbf\045\uffbf\046\uffbf" +
    "\047\uffbf\050\uffbf\052\uffbf\054\uffbf\056\uffbf\057\uffbf\061" +
    "\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf" +
    "\070\uffbf\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\001" +
    "\002\000\042\005\022\016\031\041\025\042\046\046\007" +
    "\047\023\050\027\052\067\057\045\062\017\063\032\071" +
    "\004\072\040\073\006\074\012\075\005\001\002\000\020" +
    "\006\315\013\077\014\100\015\076\016\102\017\103\020" +
    "\101\001\002\000\004\004\316\001\002\000\102\002\ufff5" +
    "\005\ufff5\012\ufff5\016\ufff5\027\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\035\ufff5\040\ufff5\041\ufff5\042\ufff5\044\ufff5\045\ufff5" +
    "\046\ufff5\047\ufff5\050\ufff5\052\ufff5\054\ufff5\057\ufff5\062" +
    "\ufff5\063\ufff5\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5" +
    "\071\ufff5\072\ufff5\073\ufff5\074\ufff5\075\ufff5\001\002\000" +
    "\112\002\uffb1\005\uffb1\006\uffb1\012\uffb1\016\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\036" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\052\uffb1\054\uffb1\057\uffb1\062\uffb1\063" +
    "\uffb1\064\uffb1\065\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1" +
    "\072\uffb1\073\uffb1\074\uffb1\075\uffb1\001\002\000\044\005" +
    "\022\016\031\041\025\042\046\046\007\047\023\050\027" +
    "\052\067\057\045\060\065\062\017\063\032\071\004\072" +
    "\040\073\006\074\012\075\005\001\002\000\042\005\022" +
    "\016\031\041\025\042\046\046\007\047\023\050\027\052" +
    "\067\057\045\062\017\063\032\071\004\072\040\073\006" +
    "\074\012\075\005\001\002\000\020\006\323\013\077\014" +
    "\100\015\076\016\102\017\103\020\101\001\002\000\004" +
    "\004\324\001\002\000\152\002\uffbb\004\uffbb\005\uffbb\006" +
    "\uffbb\010\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\052\uffbb" +
    "\054\uffbb\056\uffbb\057\uffbb\061\uffbb\062\uffbb\063\uffbb\064" +
    "\uffbb\065\uffbb\066\uffbb\067\uffbb\070\uffbb\071\uffbb\072\uffbb" +
    "\073\uffbb\074\uffbb\075\uffbb\001\002\000\042\005\022\016" +
    "\031\041\025\042\046\046\007\047\023\050\027\052\067" +
    "\057\045\062\017\063\032\071\004\072\040\073\006\074" +
    "\012\075\005\001\002\000\006\006\327\061\073\001\002" +
    "\000\004\004\330\001\002\000\102\002\uffe7\005\uffe7\012" +
    "\uffe7\016\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\035\uffe7" +
    "\040\uffe7\041\uffe7\042\uffe7\044\uffe7\045\uffe7\046\uffe7\047" +
    "\uffe7\050\uffe7\052\uffe7\054\uffe7\057\uffe7\062\uffe7\063\uffe7" +
    "\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\071\uffe7\072" +
    "\uffe7\073\uffe7\074\uffe7\075\uffe7\001\002\000\042\005\022" +
    "\016\031\041\025\042\046\046\007\047\023\050\027\052" +
    "\067\057\045\062\017\063\032\071\004\072\040\073\006" +
    "\074\012\075\005\001\002\000\020\013\077\014\100\015" +
    "\076\016\102\017\103\020\101\061\333\001\002\000\042" +
    "\005\022\016\031\041\025\042\046\046\007\047\023\050" +
    "\027\052\067\057\045\062\017\063\032\071\004\072\040" +
    "\073\006\074\012\075\005\001\002\000\020\006\335\013" +
    "\077\014\100\015\076\016\102\017\103\020\101\001\002" +
    "\000\004\004\336\001\002\000\152\002\uffbc\004\uffbc\005" +
    "\uffbc\006\uffbc\010\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\052\uffbc\054\uffbc\056\uffbc\057\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc" +
    "\072\uffbc\073\uffbc\074\uffbc\075\uffbc\001\002\000\042\005" +
    "\022\016\031\041\025\042\046\046\007\047\023\050\027" +
    "\052\067\057\045\062\017\063\032\071\004\072\040\073" +
    "\006\074\012\075\005\001\002\000\020\006\341\013\077" +
    "\014\100\015\076\016\102\017\103\020\101\001\002\000" +
    "\004\004\342\001\002\000\152\002\uffba\004\uffba\005\uffba" +
    "\006\uffba\010\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba" +
    "\042\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\052" +
    "\uffba\054\uffba\056\uffba\057\uffba\061\uffba\062\uffba\063\uffba" +
    "\064\uffba\065\uffba\066\uffba\067\uffba\070\uffba\071\uffba\072" +
    "\uffba\073\uffba\074\uffba\075\uffba\001\002\000\020\006\344" +
    "\013\077\014\100\015\076\016\102\017\103\020\101\001" +
    "\002\000\004\004\345\001\002\000\152\002\uffbe\004\uffbe" +
    "\005\uffbe\006\uffbe\010\uffbe\012\uffbe\013\uffbe\014\uffbe\015" +
    "\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe\037\uffbe\040\uffbe" +
    "\041\uffbe\042\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\052\uffbe\054\uffbe\056\uffbe\057\uffbe\061\uffbe\062\uffbe" +
    "\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071" +
    "\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\024\002\043\003\007\004\020\005\032\006" +
    "\025\017\012\020\042\021\023\022\034\001\001\000\004" +
    "\005\342\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\004\054\005\032\006\025\016\055" +
    "\017\012\020\042\021\023\022\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\032\006\316\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\255\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\051\004\020\005\032" +
    "\006\025\017\012\020\042\021\023\022\034\001\001\000" +
    "\022\004\054\005\032\006\025\016\055\017\012\020\042" +
    "\021\023\022\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\156" +
    "\001\001\000\006\005\146\015\150\001\001\000\006\005" +
    "\061\011\065\001\001\000\002\001\001\000\010\005\132" +
    "\013\115\014\131\001\001\000\002\001\001\000\006\005" +
    "\070\012\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\110\001\001\000\004\005\107\001\001\000" +
    "\004\005\106\001\001\000\004\005\105\001\001\000\004" +
    "\005\104\001\001\000\004\005\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\115\014" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\123\001\001\000" +
    "\002\001\001\000\022\003\121\004\020\005\032\006\025" +
    "\017\012\020\042\021\023\022\034\001\001\000\022\004" +
    "\054\005\032\006\025\016\055\017\012\020\042\021\023" +
    "\022\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\125\001\001\000\002\001\001\000\022\003\127" +
    "\004\020\005\032\006\025\017\012\020\042\021\023\022" +
    "\034\001\001\000\022\004\054\005\032\006\025\016\055" +
    "\017\012\020\042\021\023\022\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\136\004\020\005\032\006" +
    "\025\017\012\020\042\021\023\022\034\001\001\000\022" +
    "\004\054\005\032\006\025\016\055\017\012\020\042\021" +
    "\023\022\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\143\004\020\005\032\006" +
    "\025\017\012\020\042\021\023\022\034\001\001\000\022" +
    "\004\054\005\032\006\025\016\055\017\012\020\042\021" +
    "\023\022\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\154\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\032\006" +
    "\165\001\001\000\002\001\001\000\006\005\032\006\173" +
    "\001\001\000\002\001\001\000\006\005\032\006\171\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\032" +
    "\006\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\205\004\020\005\032\006\025\017\012\020\042" +
    "\021\023\022\034\001\001\000\022\004\054\005\032\006" +
    "\025\016\055\017\012\020\042\021\023\022\034\001\001" +
    "\000\002\001\001\000\004\005\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\223" +
    "\010\224\001\001\000\022\003\233\004\020\005\032\006" +
    "\025\017\012\020\042\021\023\022\034\001\001\000\004" +
    "\010\232\001\001\000\002\001\001\000\004\005\226\001" +
    "\001\000\002\001\001\000\022\003\230\004\020\005\032" +
    "\006\025\017\012\020\042\021\023\022\034\001\001\000" +
    "\022\004\054\005\032\006\025\016\055\017\012\020\042" +
    "\021\023\022\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\054\005\032\006\025\016\055\017\012" +
    "\020\042\021\023\022\034\001\001\000\006\005\070\012" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\254\001\001\000" +
    "\004\005\253\001\001\000\004\005\252\001\001\000\004" +
    "\005\251\001\001\000\004\005\250\001\001\000\004\005" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\257\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\263\001\001\000\002\001\001\000\004\005\265\001\001" +
    "\000\002\001\001\000\006\005\032\006\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\272\004\020" +
    "\005\032\006\025\017\012\020\042\021\023\022\034\001" +
    "\001\000\022\004\054\005\032\006\025\016\055\017\012" +
    "\020\042\021\023\022\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\305\004\020\005\032\006\025" +
    "\017\012\020\042\021\023\022\034\001\001\000\002\001" +
    "\001\000\006\005\032\006\300\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\303\004\020\005\032\006" +
    "\025\017\012\020\042\021\023\022\034\001\001\000\022" +
    "\004\054\005\032\006\025\016\055\017\012\020\042\021" +
    "\023\022\034\001\001\000\002\001\001\000\022\004\054" +
    "\005\032\006\025\016\055\017\012\020\042\021\023\022" +
    "\034\001\001\000\002\001\001\000\006\005\070\012\310" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\313\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\061\011\065\001" +
    "\001\000\004\005\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\070\012\325\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\331\001\001\000\002\001\001\000\004\005" +
    "\333\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\337\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Nodo> AST;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
    public LinkedList<Nodo> getAST() {
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        parser.AST=a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT= a;
        RESULT.add(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instrucciones Funcion 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT= a;
        RESULT.add(b);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= instruccion 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT= new LinkedList<>();
        RESULT.add(a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= PRINT PARIZQ expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            //System.out.println("El valor de la expresión es: "+a);
            RESULT  =  new Imprimir ((Expresion)a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= DefinicionVariables 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
           RESULT =(Nodo)a;
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT  =  new Imprimir ((Expresion)a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= expresioncomp INTERROGACION expresion DOSP expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
            RESULT=new Imprimir((Expresion)new Operacion(Operacion.Tipo_operacion.TERNARIO,(Expresion)a, (Expresion)b,(Expresion)c)); 
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= Ciclos 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
        RESULT = (Nodo)a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= Graficas 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT=(Nodo)a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= Llamada 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT=(Nodo)a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= TYPEOF PARIZQ expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new TypeOf((Expresion)a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= LENGHT PARIZQ expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new Lenght((Expresion)a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= STRINGLENGHT PARIZQ expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new StringLenght((Expresion) a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DefinicionVariables ::= IDENTIFICADOR IGUAL expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new Declaracion (a, (Expresion)b,1);       
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DefinicionVariables",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DefinicionVariables ::= IDENTIFICADOR IGUAL expresion PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                            RESULT = new Declaracion(a,(Expresion)b,1);
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DefinicionVariables",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DefinicionVariables ::= IDENTIFICADOR IGUAL listaDeclaraciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		ArrayList<Object> b = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                            RESULT = new Declaracion(a,b,2,1);
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DefinicionVariables",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DefinicionVariables ::= IDENTIFICADOR IGUAL listaDeclaraciones PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Object> b = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                            RESULT = new Declaracion(a,b,2,1);
                        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DefinicionVariables",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Llamada ::= IDENTIFICADOR PARIZQ PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		
                RESULT = new LlamadaFuncion(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Llamada",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Llamada ::= IDENTIFICADOR PARIZQ ParametrosLlamada PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new LlamadaFuncion(b,a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Llamada",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Llamada ::= IDENTIFICADOR PARIZQ PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT = new LlamadaFuncion(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Llamada",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Llamada ::= IDENTIFICADOR PARIZQ ParametrosLlamada PARDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Expresion> b = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		  
                RESULT = new LlamadaFuncion(b,a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Llamada",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ParametrosLlamada ::= ParametrosLlamada COMA expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT=a;
                        RESULT.add((Expresion)b);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParametrosLlamada",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ParametrosLlamada ::= expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = new ArrayList<>();
                        RESULT.add((Expresion)a);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParametrosLlamada",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Graficas ::= BARPLOT PARIZQ ListaExp PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT= new BarPlot(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Graficas",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Graficas ::= PIE PARIZQ ListaExp PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT= new PiePlot(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Graficas",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Ciclos ::= IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new If((Operacion)a,b);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Ciclos ::= IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER ELSE LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new If((Operacion)a,b,c);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Ciclos ::= IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER ELSE IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new IfElse((Operacion)a,(Operacion)d,b,c);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Ciclos ::= SWITCH PARIZQ expresion PARDER LLAVEIZQ listacase LLAVEDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoCase> b = (LinkedList<NodoCase>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new SwitchCase(b,(Expresion)a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Ciclos ::= BREAK PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new Break (a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Ciclos ::= WHILE PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            //System.out.println(s);
            RESULT = new While((Expresion)a, b);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Ciclos ::= DO LLAVEIZQ instrucciones LLAVEDER WHILE PARIZQ expresioncomp PARDER PTCOMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            //System.out.println(s);
            RESULT = new DoWhile((Expresion)a,b);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Funcion ::= IDENTIFICADOR IGUAL FUNCTION PARIZQ PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Funcion f = new Funcion(a,b);
                RESULT = new DefinicionDeFuncion(f);                
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Funcion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Funcion ::= IDENTIFICADOR IGUAL FUNCTION PARIZQ ListaParametros PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		ArrayList<Parametro> b = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Funcion f = new Funcion(a,b,c);
                RESULT = new DefinicionDeFuncion(f);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Funcion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Funcion ::= IDENTIFICADOR IGUAL PARIZQ ListaParametros DEFFUN LLAVEIZQ instrucciones LLAVEDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		ArrayList<Parametro> b = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Funcion f = new Funcion(a,b,c);
                RESULT = new DefinicionDeFuncion(f);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Funcion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Funcion ::= IDENTIFICADOR IGUAL PARIZQ DEFFUN LLAVEIZQ instrucciones LLAVEDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                Funcion f = new Funcion(a,c);
                RESULT = new DefinicionDeFuncion(f);   
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Funcion",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ListaParametros ::= ListaParametros COMA Parametros 
            {
              ArrayList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Parametro> a = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro b = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = a;
                        RESULT.add(b);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ListaParametros ::= Parametros 
            {
              ArrayList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro a = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = new ArrayList<>();
                        RESULT.add(a);
                   
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Parametros ::= IDENTIFICADOR 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT=new Parametro(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Parametros ::= IDENTIFICADOR IGUAL expresion 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = new Parametro((Expresion)b,a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // listacase ::= listacase CASES 
            {
              LinkedList<NodoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoCase> a = (LinkedList<NodoCase>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoCase b = (NodoCase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                    RESULT=a;
                    RESULT.add(b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listacase",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // listacase ::= CASES 
            {
              LinkedList<NodoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoCase a = (NodoCase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT=new LinkedList<>();
                    RESULT.add(a);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listacase",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CASES ::= CASE expresion DOSP instrucciones 
            {
              NodoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT= new NodoCase((Expresion)a,b);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CASES ::= DEFAULT instrucciones 
            {
              NodoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT= new NodoCase(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // listaDeclaraciones ::= C ListaExp PARDER 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
                        RESULT= a;
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ListaExp ::= ListaExp COMA expresion 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT= a;
                RESULT.add((Expresion)b);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaExp",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ListaExp ::= expresion 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = new ArrayList<>();
                RESULT.add((Expresion)a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaExp",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= MENOS expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.UMENOS,(Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion MAS expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.SUMA,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion MENOS expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.RESTA,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion POR expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MULTIPLICACION,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion DIVIDIDO expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.DIVISION,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion POTENCIA expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.POTENCIA,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion MODULO expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MODULO,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= ENTERO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.INT));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= DECIMAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.DOUBLE));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= CADENA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.STRING));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= TRUE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.BOOLEAN));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= FALSE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.BOOLEAN));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new id(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= IDENTIFICADOR CORIZQ expresion CORDER CORIZQ expresion CORDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= NULL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.STRING));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= DEF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new Single(a,new Tipo(Tipo.tipo.DEF));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= CC PARIZQ ListaExp PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= LENGHTPAR expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Lenght((Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= STRINGLENGHTPAR expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new StringLenght((Expresion) a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= REMOVE PARIZQ expresion COMA expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new Remove((Expresion)a, (Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= TOLOWERCASE PARIZQ expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		RESULT = new toLowerCase((Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= TOUPPERCASE PARIZQ expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		 RESULT = new toUperCase((Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresioncomp ::= expresion IGUALD expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.IGUALIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresioncomp ::= expresion DESIGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.DESIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresioncomp ::= expresion MAYOR expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MAYOR,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresioncomp ::= expresion MENOR expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MENOR,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresioncomp ::= expresion MAYORIGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MAYORIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresioncomp ::= expresion MENORIGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MENORIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresioncomp ::= expresioncomp AND expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.AND,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresioncomp ::= expresioncomp OR expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.OR,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresioncomp ::= NOT expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.NOT,(Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
