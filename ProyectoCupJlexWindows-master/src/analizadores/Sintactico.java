
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import arbol.Expresion;
import arbol.Nodo;
import arbol.Instruccion;
import arbol.Asignacion;
import arbol.Simbolo.*;
import arbol.TablaDeSimbolos;
import java.util.LinkedList;
import arbol.Operacion;
import arbol.Imprimir;
import arbol.If.If;
import arbol.If.IfElse;
import arbol.While.While;
import arbol.DoWhile.DoWhile;
import arbol.SwitchCase.NodoCase;
import arbol.SwitchCase.SwitchCase;
import arbol.SwitchCase.Break;
import arbol.Tipo.tipo.*;
import arbol.Tipo;
import arbol.Sentencias.Def;
import arbol.Sentencias.Asigna;
import arbol.Funciones.Parametro;
import arbol.Funciones.DefinicionDeFuncion;
import arbol.Funciones.Funcion;
import arbol.Funciones.LlamadaFuncion;
import arbol.Funciones.FuncionesDefinidas.TypeOf;
import arbol.Funciones.FuncionesDefinidas.Lenght;
import arbol.Funciones.FuncionesDefinidas.StringLenght;
import arbol.Funciones.FuncionesDefinidas.Remove;
import arbol.Funciones.FuncionesDefinidas.toLowerCase;
import arbol.Funciones.FuncionesDefinidas.toUperCase;
import arbol.Funciones.FuncionesDefinidas.Trunk;
import arbol.Funciones.FuncionesDefinidas.Round;
import arbol.Funciones.FuncionesDefinidas.C;
import arbol.Sentencias.Sentencia;
import arbol.Graficas.BarPlot;
import arbol.Graficas.PiePlot;
import arbol.Retorno.Retorno;
import java.util.ArrayList;
import arbol.Declaracion;
import arbol.DeclaracionVariable;
import arbol.Single;
import arbol.id;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\005\000\002\004\004\000\002\004\007\000\002" +
    "\004\007\000\002\004\007\000\002\022\004\000\002\023" +
    "\004\000\002\023\003\000\002\016\005\000\002\016\004" +
    "\000\002\024\003\000\002\024\003\000\002\015\005\000" +
    "\002\015\004\000\002\026\006\000\002\026\005\000\002" +
    "\026\007\000\002\027\005\000\002\027\006\000\002\011" +
    "\005\000\002\011\003\000\002\012\003\000\002\012\003" +
    "\000\002\013\005\000\002\013\003\000\002\014\005\000" +
    "\002\014\003\000\002\017\007\000\002\017\007\000\002" +
    "\020\011\000\002\020\015\000\002\020\021\000\002\020" +
    "\011\000\002\020\004\000\002\020\011\000\002\020\013" +
    "\000\002\007\004\000\002\007\003\000\002\010\006\000" +
    "\002\010\004\000\002\005\004\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\011\000\002\005\003\000\002" +
    "\005\003\000\002\005\005\000\002\005\005\000\002\005" +
    "\010\000\002\005\006\000\002\005\006\000\002\005\006" +
    "\000\002\005\006\000\002\005\006\000\002\005\006\000" +
    "\002\005\007\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\034\027\014\031\020\033\010\041\015\045" +
    "\007\046\016\053\025\055\024\064\023\065\021\066\017" +
    "\067\013\070\005\001\002\000\036\002\000\027\014\031" +
    "\020\033\010\041\015\045\007\046\016\053\025\055\024" +
    "\064\023\065\021\066\017\067\013\070\005\001\002\000" +
    "\004\005\342\001\002\000\044\002\ufffa\012\ufffa\027\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\033\ufffa\041\ufffa\045\ufffa\046" +
    "\ufffa\053\ufffa\055\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa" +
    "\070\ufffa\001\002\000\004\005\334\001\002\000\050\004" +
    "\332\016\034\036\043\042\045\043\055\047\057\050\041" +
    "\051\035\053\056\060\054\062\046\063\060\071\053\072" +
    "\036\073\051\074\040\075\050\076\033\077\052\001\002" +
    "\000\004\002\330\001\002\000\044\002\ufffe\012\ufffe\027" +
    "\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\041\ufffe\045\ufffe" +
    "\046\ufffe\053\ufffe\055\ufffe\064\ufffe\065\ufffe\066\ufffe\067" +
    "\ufffe\070\ufffe\001\002\000\004\005\324\001\002\000\004" +
    "\005\306\001\002\000\004\005\265\001\002\000\004\011" +
    "\255\001\002\000\004\005\251\001\002\000\004\004\250" +
    "\001\002\000\004\005\244\001\002\000\046\002\ufffb\004" +
    "\243\012\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\041\ufffb\045\ufffb\046\ufffb\053\ufffb\055\ufffb\064\ufffb\065" +
    "\ufffb\066\ufffb\067\ufffb\070\ufffb\001\002\000\004\005\237" +
    "\001\002\000\004\005\233\001\002\000\006\005\032\054" +
    "\031\001\002\000\044\002\ufff9\012\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\041\ufff9\045\ufff9\046\ufff9\053" +
    "\ufff9\055\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9" +
    "\001\002\000\052\002\ufff1\004\ufff1\006\ufff1\012\ufff1\027" +
    "\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\041\ufff1\045\ufff1" +
    "\046\ufff1\053\ufff1\055\ufff1\061\ufff1\064\ufff1\065\ufff1\066" +
    "\ufff1\067\ufff1\070\ufff1\001\002\000\052\002\ufff3\004\ufff3" +
    "\006\ufff3\012\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\041\ufff3\045\ufff3\046\ufff3\053\ufff3\055\ufff3\061\ufff3" +
    "\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\001\002\000" +
    "\052\005\174\016\034\036\043\042\045\043\055\047\057" +
    "\050\041\051\035\053\056\056\175\060\054\062\046\063" +
    "\060\071\053\072\036\073\051\074\040\075\050\076\033" +
    "\077\052\001\002\000\050\006\044\016\034\036\043\042" +
    "\045\043\055\047\057\050\041\051\035\053\056\060\054" +
    "\062\046\063\060\071\053\072\036\073\051\074\040\075" +
    "\050\076\033\077\052\001\002\000\004\005\170\001\002" +
    "\000\046\016\034\036\043\042\045\043\055\047\057\050" +
    "\041\051\035\053\056\060\054\062\046\063\060\071\053" +
    "\072\036\073\051\074\040\075\050\076\033\077\052\001" +
    "\002\000\114\002\uffc7\004\uffc7\006\uffc7\010\uffc7\012\uffc7" +
    "\013\uffc7\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\045\uffc7\046\uffc7\053\uffc7\055\uffc7" +
    "\061\uffc7\064\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\001" +
    "\002\000\046\016\034\036\043\042\045\043\055\047\057" +
    "\050\041\051\035\053\056\060\054\062\046\063\060\071" +
    "\053\072\036\073\051\074\040\075\050\076\033\077\052" +
    "\001\002\000\010\034\153\035\154\037\152\001\002\000" +
    "\004\005\162\001\002\000\114\002\uffc8\004\uffc8\006\uffc8" +
    "\010\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8\034" +
    "\uffc8\035\uffc8\037\uffc8\040\uffc8\041\uffc8\045\uffc8\046\uffc8" +
    "\053\uffc8\055\uffc8\061\uffc8\064\uffc8\065\uffc8\066\uffc8\067" +
    "\uffc8\070\uffc8\001\002\000\036\006\uffde\013\071\014\101" +
    "\015\076\016\070\017\074\020\075\021\102\022\100\023" +
    "\072\024\077\025\067\026\073\061\uffde\001\002\000\046" +
    "\016\034\036\043\042\045\043\055\047\057\050\041\051" +
    "\035\053\056\060\054\062\046\063\060\071\053\072\036" +
    "\073\051\074\040\075\050\076\033\077\052\001\002\000" +
    "\052\002\uffef\004\uffef\006\uffef\012\uffef\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\033\uffef\041\uffef\045\uffef\046\uffef\053" +
    "\uffef\055\uffef\061\uffef\064\uffef\065\uffef\066\uffef\067\uffef" +
    "\070\uffef\001\002\000\114\002\uffc6\004\uffc6\006\uffc6\010" +
    "\uffc6\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6" +
    "\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\037\uffc6\040\uffc6\041\uffc6\045\uffc6\046\uffc6\053" +
    "\uffc6\055\uffc6\061\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6" +
    "\070\uffc6\001\002\000\004\005\142\001\002\000\006\006" +
    "\141\061\064\001\002\000\004\005\136\001\002\000\004" +
    "\005\131\001\002\000\004\005\126\001\002\000\046\016" +
    "\034\036\043\042\045\043\055\047\057\050\041\051\035" +
    "\053\056\060\054\062\046\063\060\071\053\072\036\073" +
    "\051\074\040\075\050\076\033\077\052\001\002\000\114" +
    "\002\uffc1\004\uffc1\006\uffc1\010\uffc1\012\uffc1\013\uffc1\014" +
    "\uffc1\015\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\037\uffc1\040\uffc1" +
    "\041\uffc1\045\uffc1\046\uffc1\053\uffc1\055\uffc1\061\uffc1\064" +
    "\uffc1\065\uffc1\066\uffc1\067\uffc1\070\uffc1\001\002\000\114" +
    "\002\uffc5\004\uffc5\006\uffc5\010\uffc5\012\uffc5\013\uffc5\014" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031" +
    "\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\045\uffc5\046\uffc5\053\uffc5\055\uffc5\061\uffc5\064" +
    "\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\001\002\000\120" +
    "\002\uffc4\004\uffc4\005\062\006\uffc4\007\061\010\uffc4\012" +
    "\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\045\uffc4\046\uffc4\053\uffc4\055" +
    "\uffc4\061\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\070\uffc4" +
    "\001\002\000\114\002\uffc9\004\uffc9\006\uffc9\010\uffc9\012" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\045\uffc9\046\uffc9\053\uffc9\055" +
    "\uffc9\061\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9" +
    "\001\002\000\114\002\uffc2\004\uffc2\006\uffc2\010\uffc2\012" +
    "\uffc2\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2" +
    "\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027" +
    "\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\045\uffc2\046\uffc2\053\uffc2\055" +
    "\uffc2\061\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2" +
    "\001\002\000\046\016\034\036\043\042\045\043\055\047" +
    "\057\050\041\051\035\053\056\060\054\062\046\063\060" +
    "\071\053\072\036\073\051\074\040\075\050\076\033\077" +
    "\052\001\002\000\046\016\034\036\043\042\045\043\055" +
    "\047\057\050\041\051\035\053\056\060\054\062\046\063" +
    "\060\071\053\072\036\073\051\074\040\075\050\076\033" +
    "\077\052\001\002\000\006\006\065\061\064\001\002\000" +
    "\046\016\034\036\043\042\045\043\055\047\057\050\041" +
    "\051\035\053\056\060\054\062\046\063\060\071\053\072" +
    "\036\073\051\074\040\075\050\076\033\077\052\001\002" +
    "\000\114\002\uffb8\004\uffb8\006\uffb8\010\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8" +
    "\040\uffb8\041\uffb8\045\uffb8\046\uffb8\053\uffb8\055\uffb8\061" +
    "\uffb8\064\uffb8\065\uffb8\066\uffb8\067\uffb8\070\uffb8\001\002" +
    "\000\036\006\uffdf\013\071\014\101\015\076\016\070\017" +
    "\074\020\075\021\102\022\100\023\072\024\077\025\067" +
    "\026\073\061\uffdf\001\002\000\046\016\034\036\043\042" +
    "\045\043\055\047\057\050\041\051\035\053\056\060\054" +
    "\062\046\063\060\071\053\072\036\073\051\074\040\075" +
    "\050\076\033\077\052\001\002\000\046\016\034\036\043" +
    "\042\045\043\055\047\057\050\041\051\035\053\056\060" +
    "\054\062\046\063\060\071\053\072\036\073\051\074\040" +
    "\075\050\076\033\077\052\001\002\000\046\016\034\036" +
    "\043\042\045\043\055\047\057\050\041\051\035\053\056" +
    "\060\054\062\046\063\060\071\053\072\036\073\051\074" +
    "\040\075\050\076\033\077\052\001\002\000\046\016\034" +
    "\036\043\042\045\043\055\047\057\050\041\051\035\053" +
    "\056\060\054\062\046\063\060\071\053\072\036\073\051" +
    "\074\040\075\050\076\033\077\052\001\002\000\046\016" +
    "\034\036\043\042\045\043\055\047\057\050\041\051\035" +
    "\053\056\060\054\062\046\063\060\071\053\072\036\073" +
    "\051\074\040\075\050\076\033\077\052\001\002\000\046" +
    "\016\034\036\043\042\045\043\055\047\057\050\041\051" +
    "\035\053\056\060\054\062\046\063\060\071\053\072\036" +
    "\073\051\074\040\075\050\076\033\077\052\001\002\000" +
    "\046\016\034\036\043\042\045\043\055\047\057\050\041" +
    "\051\035\053\056\060\054\062\046\063\060\071\053\072" +
    "\036\073\051\074\040\075\050\076\033\077\052\001\002" +
    "\000\046\016\034\036\043\042\045\043\055\047\057\050" +
    "\041\051\035\053\056\060\054\062\046\063\060\071\053" +
    "\072\036\073\051\074\040\075\050\076\033\077\052\001" +
    "\002\000\046\016\034\036\043\042\045\043\055\047\057" +
    "\050\041\051\035\053\056\060\054\062\046\063\060\071" +
    "\053\072\036\073\051\074\040\075\050\076\033\077\052" +
    "\001\002\000\046\016\034\036\043\042\045\043\055\047" +
    "\057\050\041\051\035\053\056\060\054\062\046\063\060" +
    "\071\053\072\036\073\051\074\040\075\050\076\033\077" +
    "\052\001\002\000\046\016\034\036\043\042\045\043\055" +
    "\047\057\050\041\051\035\053\056\060\054\062\046\063" +
    "\060\071\053\072\036\073\051\074\040\075\050\076\033" +
    "\077\052\001\002\000\046\016\034\036\043\042\045\043" +
    "\055\047\057\050\041\051\035\053\056\060\054\062\046" +
    "\063\060\071\053\072\036\073\051\074\040\075\050\076" +
    "\033\077\052\001\002\000\042\006\uffb6\013\071\014\101" +
    "\015\076\016\070\017\074\020\075\021\102\022\100\023" +
    "\072\024\077\025\067\026\073\034\uffb6\035\uffb6\037\uffb6" +
    "\001\002\000\114\002\uffca\004\uffca\006\uffca\010\uffca\012" +
    "\uffca\013\071\014\uffca\015\uffca\016\uffca\017\uffca\020\uffca" +
    "\021\102\022\100\023\072\024\077\025\067\026\073\027" +
    "\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca" +
    "\037\uffca\040\uffca\041\uffca\045\uffca\046\uffca\053\uffca\055" +
    "\uffca\061\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070\uffca" +
    "\001\002\000\042\006\uffb4\013\071\014\101\015\076\016" +
    "\070\017\074\020\075\021\102\022\100\023\072\024\077" +
    "\025\067\026\073\034\uffb4\035\uffb4\037\uffb4\001\002\000" +
    "\042\006\uffb2\013\071\014\101\015\076\016\070\017\074" +
    "\020\075\021\102\022\100\023\072\024\077\025\067\026" +
    "\073\034\uffb2\035\uffb2\037\uffb2\001\002\000\114\002\uffcf" +
    "\004\uffcf\006\uffcf\010\uffcf\012\uffcf\013\071\014\101\015" +
    "\uffcf\016\uffcf\017\074\020\075\021\102\022\100\023\072" +
    "\024\077\025\067\026\073\027\uffcf\030\uffcf\031\uffcf\032" +
    "\uffcf\033\uffcf\034\uffcf\035\uffcf\037\uffcf\040\uffcf\041\uffcf" +
    "\045\uffcf\046\uffcf\053\uffcf\055\uffcf\061\uffcf\064\uffcf\065" +
    "\uffcf\066\uffcf\067\uffcf\070\uffcf\001\002\000\114\002\uffcc" +
    "\004\uffcc\006\uffcc\010\uffcc\012\uffcc\013\071\014\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\102\022\100\023\072" +
    "\024\077\025\067\026\073\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\045\uffcc\046\uffcc\053\uffcc\055\uffcc\061\uffcc\064\uffcc\065" +
    "\uffcc\066\uffcc\067\uffcc\070\uffcc\001\002\000\114\002\uffcd" +
    "\004\uffcd\006\uffcd\010\uffcd\012\uffcd\013\071\014\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\021\102\022\100\023\072" +
    "\024\077\025\067\026\073\027\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\045\uffcd\046\uffcd\053\uffcd\055\uffcd\061\uffcd\064\uffcd\065" +
    "\uffcd\066\uffcd\067\uffcd\070\uffcd\001\002\000\042\006\uffb5" +
    "\013\071\014\101\015\076\016\070\017\074\020\075\021" +
    "\102\022\100\023\072\024\077\025\067\026\073\034\uffb5" +
    "\035\uffb5\037\uffb5\001\002\000\042\006\uffb3\013\071\014" +
    "\101\015\076\016\070\017\074\020\075\021\102\022\100" +
    "\023\072\024\077\025\067\026\073\034\uffb3\035\uffb3\037" +
    "\uffb3\001\002\000\114\002\uffcb\004\uffcb\006\uffcb\010\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\102\022\100\023\072\024\077\025\067\026\073" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\045\uffcb\046\uffcb\053\uffcb" +
    "\055\uffcb\061\uffcb\064\uffcb\065\uffcb\066\uffcb\067\uffcb\070" +
    "\uffcb\001\002\000\114\002\uffce\004\uffce\006\uffce\010\uffce" +
    "\012\uffce\013\071\014\101\015\uffce\016\uffce\017\074\020" +
    "\075\021\102\022\100\023\072\024\077\025\067\026\073" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\035" +
    "\uffce\037\uffce\040\uffce\041\uffce\045\uffce\046\uffce\053\uffce" +
    "\055\uffce\061\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070" +
    "\uffce\001\002\000\042\006\uffb1\013\071\014\101\015\076" +
    "\016\070\017\074\020\075\021\102\022\100\023\072\024" +
    "\077\025\067\026\073\034\uffb1\035\uffb1\037\uffb1\001\002" +
    "\000\034\010\120\013\071\014\101\015\076\016\070\017" +
    "\074\020\075\021\102\022\100\023\072\024\077\025\067" +
    "\026\073\001\002\000\004\007\121\001\002\000\046\016" +
    "\034\036\043\042\045\043\055\047\057\050\041\051\035" +
    "\053\056\060\054\062\046\063\060\071\053\072\036\073" +
    "\051\074\040\075\050\076\033\077\052\001\002\000\034" +
    "\010\123\013\071\014\101\015\076\016\070\017\074\020" +
    "\075\021\102\022\100\023\072\024\077\025\067\026\073" +
    "\001\002\000\114\002\uffc3\004\uffc3\006\uffc3\010\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\045\uffc3\046\uffc3\053\uffc3\055" +
    "\uffc3\061\uffc3\064\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3" +
    "\001\002\000\034\006\125\013\071\014\101\015\076\016" +
    "\070\017\074\020\075\021\102\022\100\023\072\024\077" +
    "\025\067\026\073\001\002\000\114\002\uffc0\004\uffc0\006" +
    "\uffc0\010\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\037\uffc0\040\uffc0\041\uffc0\045\uffc0\046" +
    "\uffc0\053\uffc0\055\uffc0\061\uffc0\064\uffc0\065\uffc0\066\uffc0" +
    "\067\uffc0\070\uffc0\001\002\000\046\016\034\036\043\042" +
    "\045\043\055\047\057\050\041\051\035\053\056\060\054" +
    "\062\046\063\060\071\053\072\036\073\051\074\040\075" +
    "\050\076\033\077\052\001\002\000\034\006\130\013\071" +
    "\014\101\015\076\016\070\017\074\020\075\021\102\022" +
    "\100\023\072\024\077\025\067\026\073\001\002\000\114" +
    "\002\uffba\004\uffba\006\uffba\010\uffba\012\uffba\013\uffba\014" +
    "\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030\uffba\031" +
    "\uffba\032\uffba\033\uffba\034\uffba\035\uffba\037\uffba\040\uffba" +
    "\041\uffba\045\uffba\046\uffba\053\uffba\055\uffba\061\uffba\064" +
    "\uffba\065\uffba\066\uffba\067\uffba\070\uffba\001\002\000\046" +
    "\016\034\036\043\042\045\043\055\047\057\050\041\051" +
    "\035\053\056\060\054\062\046\063\060\071\053\072\036" +
    "\073\051\074\040\075\050\076\033\077\052\001\002\000" +
    "\034\013\071\014\101\015\076\016\070\017\074\020\075" +
    "\021\102\022\100\023\072\024\077\025\067\026\073\061" +
    "\133\001\002\000\046\016\034\036\043\042\045\043\055" +
    "\047\057\050\041\051\035\053\056\060\054\062\046\063" +
    "\060\071\053\072\036\073\051\074\040\075\050\076\033" +
    "\077\052\001\002\000\034\006\135\013\071\014\101\015" +
    "\076\016\070\017\074\020\075\021\102\022\100\023\072" +
    "\024\077\025\067\026\073\001\002\000\114\002\uffbe\004" +
    "\uffbe\006\uffbe\010\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe" +
    "\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\037\uffbe\040\uffbe\041\uffbe\045" +
    "\uffbe\046\uffbe\053\uffbe\055\uffbe\061\uffbe\064\uffbe\065\uffbe" +
    "\066\uffbe\067\uffbe\070\uffbe\001\002\000\046\016\034\036" +
    "\043\042\045\043\055\047\057\050\041\051\035\053\056" +
    "\060\054\062\046\063\060\071\053\072\036\073\051\074" +
    "\040\075\050\076\033\077\052\001\002\000\034\006\140" +
    "\013\071\014\101\015\076\016\070\017\074\020\075\021" +
    "\102\022\100\023\072\024\077\025\067\026\073\001\002" +
    "\000\114\002\uffbc\004\uffbc\006\uffbc\010\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\037\uffbc" +
    "\040\uffbc\041\uffbc\045\uffbc\046\uffbc\053\uffbc\055\uffbc\061" +
    "\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\001\002" +
    "\000\052\002\ufff0\004\ufff0\006\ufff0\012\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\041\ufff0\045\ufff0\046\ufff0" +
    "\053\ufff0\055\ufff0\061\ufff0\064\ufff0\065\ufff0\066\ufff0\067" +
    "\ufff0\070\ufff0\001\002\000\046\016\034\036\043\042\045" +
    "\043\055\047\057\050\041\051\035\053\056\060\054\062" +
    "\046\063\060\071\053\072\036\073\051\074\040\075\050" +
    "\076\033\077\052\001\002\000\036\006\uffe4\013\071\014" +
    "\101\015\076\016\070\017\074\020\075\021\102\022\100" +
    "\023\072\024\077\025\067\026\073\061\uffe4\001\002\000" +
    "\006\006\146\061\145\001\002\000\046\016\034\036\043" +
    "\042\045\043\055\047\057\050\041\051\035\053\056\060" +
    "\054\062\046\063\060\071\053\072\036\073\051\074\040" +
    "\075\050\076\033\077\052\001\002\000\114\002\uffb9\004" +
    "\uffb9\006\uffb9\010\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9" +
    "\016\uffb9\017\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9" +
    "\033\uffb9\034\uffb9\035\uffb9\037\uffb9\040\uffb9\041\uffb9\045" +
    "\uffb9\046\uffb9\053\uffb9\055\uffb9\061\uffb9\064\uffb9\065\uffb9" +
    "\066\uffb9\067\uffb9\070\uffb9\001\002\000\036\006\uffe5\013" +
    "\071\014\101\015\076\016\070\017\074\020\075\021\102" +
    "\022\100\023\072\024\077\025\067\026\073\061\uffe5\001" +
    "\002\000\012\006\uffae\034\uffae\035\uffae\037\uffae\001\002" +
    "\000\032\013\071\014\101\015\076\016\070\017\074\020" +
    "\075\021\102\022\100\023\072\024\077\025\067\026\073" +
    "\001\002\000\046\016\034\036\043\042\045\043\055\047" +
    "\057\050\041\051\035\053\056\060\054\062\046\063\060" +
    "\071\053\072\036\073\051\074\040\075\050\076\033\077" +
    "\052\001\002\000\046\016\034\036\043\042\045\043\055" +
    "\047\057\050\041\051\035\053\056\060\054\062\046\063" +
    "\060\071\053\072\036\073\051\074\040\075\050\076\033" +
    "\077\052\001\002\000\046\016\034\036\043\042\045\043" +
    "\055\047\057\050\041\051\035\053\056\060\054\062\046" +
    "\063\060\071\053\072\036\073\051\074\040\075\050\076" +
    "\033\077\052\001\002\000\012\006\uffaf\034\uffaf\035\uffaf" +
    "\037\uffaf\001\002\000\012\006\uffb0\034\uffb0\035\uffb0\037" +
    "\uffb0\001\002\000\034\013\071\014\101\015\076\016\070" +
    "\017\074\020\075\021\102\022\100\023\072\024\077\025" +
    "\067\026\073\040\160\001\002\000\046\016\034\036\043" +
    "\042\045\043\055\047\057\050\041\051\035\053\056\060" +
    "\054\062\046\063\060\071\053\072\036\073\051\074\040" +
    "\075\050\076\033\077\052\001\002\000\114\002\uffb7\004" +
    "\uffb7\006\uffb7\010\uffb7\012\uffb7\013\071\014\101\015\076" +
    "\016\070\017\074\020\075\021\102\022\100\023\072\024" +
    "\077\025\067\026\073\027\uffb7\030\uffb7\031\uffb7\032\uffb7" +
    "\033\uffb7\034\uffb7\035\uffb7\037\uffb7\040\uffb7\041\uffb7\045" +
    "\uffb7\046\uffb7\053\uffb7\055\uffb7\061\uffb7\064\uffb7\065\uffb7" +
    "\066\uffb7\067\uffb7\070\uffb7\001\002\000\046\016\034\036" +
    "\043\042\045\043\055\047\057\050\041\051\035\053\056" +
    "\060\054\062\046\063\060\071\053\072\036\073\051\074" +
    "\040\075\050\076\033\077\052\001\002\000\034\006\164" +
    "\013\071\014\101\015\076\016\070\017\074\020\075\021" +
    "\102\022\100\023\072\024\077\025\067\026\073\001\002" +
    "\000\114\002\uffbd\004\uffbd\006\uffbd\010\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\037\uffbd" +
    "\040\uffbd\041\uffbd\045\uffbd\046\uffbd\053\uffbd\055\uffbd\061" +
    "\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070\uffbd\001\002" +
    "\000\034\006\166\013\071\014\101\015\076\016\070\017" +
    "\074\020\075\021\102\022\100\023\072\024\077\025\067" +
    "\026\073\001\002\000\114\002\uffbf\004\uffbf\006\uffbf\010" +
    "\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf" +
    "\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\037\uffbf\040\uffbf\041\uffbf\045\uffbf\046\uffbf\053" +
    "\uffbf\055\uffbf\061\uffbf\064\uffbf\065\uffbf\066\uffbf\067\uffbf" +
    "\070\uffbf\001\002\000\114\002\uffd0\004\uffd0\006\uffd0\010" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\035\uffd0\037\uffd0\040\uffd0\041\uffd0\045\uffd0\046\uffd0\053" +
    "\uffd0\055\uffd0\061\uffd0\064\uffd0\065\uffd0\066\uffd0\067\uffd0" +
    "\070\uffd0\001\002\000\046\016\034\036\043\042\045\043" +
    "\055\047\057\050\041\051\035\053\056\060\054\062\046" +
    "\063\060\071\053\072\036\073\051\074\040\075\050\076" +
    "\033\077\052\001\002\000\034\006\172\013\071\014\101" +
    "\015\076\016\070\017\074\020\075\021\102\022\100\023" +
    "\072\024\077\025\067\026\073\001\002\000\114\002\uffbb" +
    "\004\uffbb\006\uffbb\010\uffbb\012\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032" +
    "\uffbb\033\uffbb\034\uffbb\035\uffbb\037\uffbb\040\uffbb\041\uffbb" +
    "\045\uffbb\046\uffbb\053\uffbb\055\uffbb\061\uffbb\064\uffbb\065" +
    "\uffbb\066\uffbb\067\uffbb\070\uffbb\001\002\000\102\002\uffee" +
    "\004\uffee\006\uffee\012\uffee\013\071\014\101\015\076\016" +
    "\070\017\074\020\075\021\102\022\100\023\072\024\077" +
    "\025\067\026\073\027\uffee\030\uffee\031\uffee\032\uffee\033" +
    "\uffee\041\uffee\045\uffee\046\uffee\053\uffee\055\uffee\061\uffee" +
    "\064\uffee\065\uffee\066\uffee\067\uffee\070\uffee\001\002\000" +
    "\006\006\201\053\202\001\002\000\004\005\200\001\002" +
    "\000\052\002\uffed\004\uffed\006\uffed\012\uffed\027\uffed\030" +
    "\uffed\031\uffed\032\uffed\033\uffed\041\uffed\045\uffed\046\uffed" +
    "\053\uffed\055\uffed\061\uffed\064\uffed\065\uffed\066\uffed\067" +
    "\uffed\070\uffed\001\002\000\052\002\ufff2\004\ufff2\006\ufff2" +
    "\012\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033\ufff2\041" +
    "\ufff2\045\ufff2\046\ufff2\053\ufff2\055\ufff2\061\ufff2\064\ufff2" +
    "\065\ufff2\066\ufff2\067\ufff2\070\ufff2\001\002\000\006\006" +
    "\201\053\202\001\002\000\006\011\224\057\223\001\002" +
    "\000\012\005\032\006\uffe3\054\031\061\uffe3\001\002\000" +
    "\006\006\210\061\207\001\002\000\006\006\uffe2\061\uffe2" +
    "\001\002\000\052\002\uffec\004\uffec\006\uffec\012\uffec\027" +
    "\uffec\030\uffec\031\uffec\032\uffec\033\uffec\041\uffec\045\uffec" +
    "\046\uffec\053\uffec\055\uffec\061\uffec\064\uffec\065\uffec\066" +
    "\uffec\067\uffec\070\uffec\001\002\000\006\006\uffe0\061\uffe0" +
    "\001\002\000\004\053\202\001\002\000\006\011\212\057" +
    "\211\001\002\000\004\011\217\001\002\000\034\027\014" +
    "\031\020\033\010\041\015\045\007\046\016\053\025\055" +
    "\024\064\023\065\021\066\017\067\013\070\005\001\002" +
    "\000\052\002\uffe9\004\uffe9\006\uffe9\012\uffe9\027\uffe9\030" +
    "\uffe9\031\uffe9\032\uffe9\033\uffe9\041\uffe9\045\uffe9\046\uffe9" +
    "\053\uffe9\055\uffe9\061\uffe9\064\uffe9\065\uffe9\066\uffe9\067" +
    "\uffe9\070\uffe9\001\002\000\036\012\216\027\014\031\020" +
    "\033\010\041\015\045\007\046\016\053\025\055\024\064" +
    "\023\065\021\066\017\067\013\070\005\001\002\000\044" +
    "\002\uffff\012\uffff\027\uffff\030\uffff\031\uffff\032\uffff\033" +
    "\uffff\041\uffff\045\uffff\046\uffff\053\uffff\055\uffff\064\uffff" +
    "\065\uffff\066\uffff\067\uffff\070\uffff\001\002\000\052\002" +
    "\uffe7\004\uffe7\006\uffe7\012\uffe7\027\uffe7\030\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\041\uffe7\045\uffe7\046\uffe7\053\uffe7\055" +
    "\uffe7\061\uffe7\064\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7" +
    "\001\002\000\034\027\014\031\020\033\010\041\015\045" +
    "\007\046\016\053\025\055\024\064\023\065\021\066\017" +
    "\067\013\070\005\001\002\000\036\012\221\027\014\031" +
    "\020\033\010\041\015\045\007\046\016\053\025\055\024" +
    "\064\023\065\021\066\017\067\013\070\005\001\002\000" +
    "\052\002\uffe6\004\uffe6\006\uffe6\012\uffe6\027\uffe6\030\uffe6" +
    "\031\uffe6\032\uffe6\033\uffe6\041\uffe6\045\uffe6\046\uffe6\053" +
    "\uffe6\055\uffe6\061\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6" +
    "\070\uffe6\001\002\000\006\006\uffe1\061\uffe1\001\002\000" +
    "\004\011\227\001\002\000\034\027\014\031\020\033\010" +
    "\041\015\045\007\046\016\053\025\055\024\064\023\065" +
    "\021\066\017\067\013\070\005\001\002\000\036\012\226" +
    "\027\014\031\020\033\010\041\015\045\007\046\016\053" +
    "\025\055\024\064\023\065\021\066\017\067\013\070\005" +
    "\001\002\000\052\002\uffea\004\uffea\006\uffea\012\uffea\027" +
    "\uffea\030\uffea\031\uffea\032\uffea\033\uffea\041\uffea\045\uffea" +
    "\046\uffea\053\uffea\055\uffea\061\uffea\064\uffea\065\uffea\066" +
    "\uffea\067\uffea\070\uffea\001\002\000\034\027\014\031\020" +
    "\033\010\041\015\045\007\046\016\053\025\055\024\064" +
    "\023\065\021\066\017\067\013\070\005\001\002\000\036" +
    "\012\231\027\014\031\020\033\010\041\015\045\007\046" +
    "\016\053\025\055\024\064\023\065\021\066\017\067\013" +
    "\070\005\001\002\000\052\002\uffe8\004\uffe8\006\uffe8\012" +
    "\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\041\uffe8" +
    "\045\uffe8\046\uffe8\053\uffe8\055\uffe8\061\uffe8\064\uffe8\065" +
    "\uffe8\066\uffe8\067\uffe8\070\uffe8\001\002\000\052\002\uffeb" +
    "\004\uffeb\006\uffeb\012\uffeb\027\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\041\uffeb\045\uffeb\046\uffeb\053\uffeb\055\uffeb" +
    "\061\uffeb\064\uffeb\065\uffeb\066\uffeb\067\uffeb\070\uffeb\001" +
    "\002\000\046\016\034\036\043\042\045\043\055\047\057" +
    "\050\041\051\035\053\056\060\054\062\046\063\060\071" +
    "\053\072\036\073\051\074\040\075\050\076\033\077\052" +
    "\001\002\000\034\006\235\013\071\014\101\015\076\016" +
    "\070\017\074\020\075\021\102\022\100\023\072\024\077" +
    "\025\067\026\073\001\002\000\004\004\236\001\002\000" +
    "\044\002\ufffd\012\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd" +
    "\033\ufffd\041\ufffd\045\ufffd\046\ufffd\053\ufffd\055\ufffd\064" +
    "\ufffd\065\ufffd\066\ufffd\067\ufffd\070\ufffd\001\002\000\046" +
    "\016\034\036\043\042\045\043\055\047\057\050\041\051" +
    "\035\053\056\060\054\062\046\063\060\071\053\072\036" +
    "\073\051\074\040\075\050\076\033\077\052\001\002\000" +
    "\006\006\241\061\145\001\002\000\004\004\242\001\002" +
    "\000\044\002\uffdd\012\uffdd\027\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\041\uffdd\045\uffdd\046\uffdd\053\uffdd\055\uffdd" +
    "\064\uffdd\065\uffdd\066\uffdd\067\uffdd\070\uffdd\001\002\000" +
    "\044\002\ufffc\012\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc" +
    "\033\ufffc\041\ufffc\045\ufffc\046\ufffc\053\ufffc\055\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\067\ufffc\070\ufffc\001\002\000\046" +
    "\016\034\036\043\042\045\043\055\047\057\050\041\051" +
    "\035\053\056\060\054\062\046\063\060\071\053\072\036" +
    "\073\051\074\040\075\050\076\033\077\052\001\002\000" +
    "\006\006\246\061\145\001\002\000\004\004\247\001\002" +
    "\000\044\002\uffdc\012\uffdc\027\uffdc\030\uffdc\031\uffdc\032" +
    "\uffdc\033\uffdc\041\uffdc\045\uffdc\046\uffdc\053\uffdc\055\uffdc" +
    "\064\uffdc\065\uffdc\066\uffdc\067\uffdc\070\uffdc\001\002\000" +
    "\044\002\uffd7\012\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\041\uffd7\045\uffd7\046\uffd7\053\uffd7\055\uffd7\064" +
    "\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\001\002\000\046" +
    "\016\034\036\043\042\045\043\055\047\057\050\041\051" +
    "\035\053\056\060\054\062\046\063\060\071\053\072\036" +
    "\073\051\074\040\075\050\076\033\077\052\001\002\000" +
    "\034\006\253\013\071\014\101\015\076\016\070\017\074" +
    "\020\075\021\102\022\100\023\072\024\077\025\067\026" +
    "\073\001\002\000\004\004\254\001\002\000\044\002\ufff6" +
    "\012\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\041" +
    "\ufff6\045\ufff6\046\ufff6\053\ufff6\055\ufff6\064\ufff6\065\ufff6" +
    "\066\ufff6\067\ufff6\070\ufff6\001\002\000\034\027\014\031" +
    "\020\033\010\041\015\045\007\046\016\053\025\055\024" +
    "\064\023\065\021\066\017\067\013\070\005\001\002\000" +
    "\036\012\257\027\014\031\020\033\010\041\015\045\007" +
    "\046\016\053\025\055\024\064\023\065\021\066\017\067" +
    "\013\070\005\001\002\000\004\045\260\001\002\000\004" +
    "\005\261\001\002\000\046\016\034\036\043\042\045\043" +
    "\055\047\057\050\041\051\035\053\056\060\054\062\046" +
    "\063\060\071\053\072\036\073\051\074\040\075\050\076" +
    "\033\077\052\001\002\000\012\006\263\034\153\035\154" +
    "\037\152\001\002\000\004\004\264\001\002\000\044\002" +
    "\uffd5\012\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\041\uffd5\045\uffd5\046\uffd5\053\uffd5\055\uffd5\064\uffd5\065" +
    "\uffd5\066\uffd5\067\uffd5\070\uffd5\001\002\000\046\016\034" +
    "\036\043\042\045\043\055\047\057\050\041\051\035\053" +
    "\056\060\054\062\046\063\060\071\053\072\036\073\051" +
    "\074\040\075\050\076\033\077\052\001\002\000\012\006" +
    "\267\034\153\035\154\037\152\001\002\000\004\011\270" +
    "\001\002\000\034\027\014\031\020\033\010\041\015\045" +
    "\007\046\016\053\025\055\024\064\023\065\021\066\017" +
    "\067\013\070\005\001\002\000\036\012\272\027\014\031" +
    "\020\033\010\041\015\045\007\046\016\053\025\055\024" +
    "\064\023\065\021\066\017\067\013\070\005\001\002\000" +
    "\046\002\uffdb\012\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\041\uffdb\044\273\045\uffdb\046\uffdb\053\uffdb\055" +
    "\uffdb\064\uffdb\065\uffdb\066\uffdb\067\uffdb\070\uffdb\001\002" +
    "\000\006\011\274\041\275\001\002\000\034\027\014\031" +
    "\020\033\010\041\015\045\007\046\016\053\025\055\024" +
    "\064\023\065\021\066\017\067\013\070\005\001\002\000" +
    "\004\005\276\001\002\000\046\016\034\036\043\042\045" +
    "\043\055\047\057\050\041\051\035\053\056\060\054\062" +
    "\046\063\060\071\053\072\036\073\051\074\040\075\050" +
    "\076\033\077\052\001\002\000\012\006\300\034\153\035" +
    "\154\037\152\001\002\000\004\011\301\001\002\000\034" +
    "\027\014\031\020\033\010\041\015\045\007\046\016\053" +
    "\025\055\024\064\023\065\021\066\017\067\013\070\005" +
    "\001\002\000\036\012\303\027\014\031\020\033\010\041" +
    "\015\045\007\046\016\053\025\055\024\064\023\065\021" +
    "\066\017\067\013\070\005\001\002\000\044\002\uffd9\012" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\041\uffd9" +
    "\045\uffd9\046\uffd9\053\uffd9\055\uffd9\064\uffd9\065\uffd9\066" +
    "\uffd9\067\uffd9\070\uffd9\001\002\000\036\012\305\027\014" +
    "\031\020\033\010\041\015\045\007\046\016\053\025\055" +
    "\024\064\023\065\021\066\017\067\013\070\005\001\002" +
    "\000\044\002\uffda\012\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\041\uffda\045\uffda\046\uffda\053\uffda\055\uffda" +
    "\064\uffda\065\uffda\066\uffda\067\uffda\070\uffda\001\002\000" +
    "\046\016\034\036\043\042\045\043\055\047\057\050\041" +
    "\051\035\053\056\060\054\062\046\063\060\071\053\072" +
    "\036\073\051\074\040\075\050\076\033\077\052\001\002" +
    "\000\034\006\310\013\071\014\101\015\076\016\070\017" +
    "\074\020\075\021\102\022\100\023\072\024\077\025\067" +
    "\026\073\001\002\000\004\011\311\001\002\000\006\030" +
    "\315\032\312\001\002\000\034\027\014\031\020\033\010" +
    "\041\015\045\007\046\016\053\025\055\024\064\023\065" +
    "\021\066\017\067\013\070\005\001\002\000\010\012\321" +
    "\030\315\032\312\001\002\000\010\012\uffd3\030\uffd3\032" +
    "\uffd3\001\002\000\046\016\034\036\043\042\045\043\055" +
    "\047\057\050\041\051\035\053\056\060\054\062\046\063" +
    "\060\071\053\072\036\073\051\074\040\075\050\076\033" +
    "\077\052\001\002\000\034\013\071\014\101\015\076\016" +
    "\070\017\074\020\075\021\102\022\100\023\072\024\077" +
    "\025\067\026\073\040\317\001\002\000\034\027\014\031" +
    "\020\033\010\041\015\045\007\046\016\053\025\055\024" +
    "\064\023\065\021\066\017\067\013\070\005\001\002\000" +
    "\042\012\uffd2\027\014\030\uffd2\031\020\032\uffd2\033\010" +
    "\041\015\045\007\046\016\053\025\055\024\064\023\065" +
    "\021\066\017\067\013\070\005\001\002\000\044\002\uffd8" +
    "\012\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\041" +
    "\uffd8\045\uffd8\046\uffd8\053\uffd8\055\uffd8\064\uffd8\065\uffd8" +
    "\066\uffd8\067\uffd8\070\uffd8\001\002\000\010\012\uffd4\030" +
    "\uffd4\032\uffd4\001\002\000\042\012\uffd1\027\014\030\uffd1" +
    "\031\020\032\uffd1\033\010\041\015\045\007\046\016\053" +
    "\025\055\024\064\023\065\021\066\017\067\013\070\005" +
    "\001\002\000\046\016\034\036\043\042\045\043\055\047" +
    "\057\050\041\051\035\053\056\060\054\062\046\063\060" +
    "\071\053\072\036\073\051\074\040\075\050\076\033\077" +
    "\052\001\002\000\034\006\326\013\071\014\101\015\076" +
    "\016\070\017\074\020\075\021\102\022\100\023\072\024" +
    "\077\025\067\026\073\001\002\000\004\004\327\001\002" +
    "\000\044\002\ufff5\012\ufff5\027\ufff5\030\ufff5\031\ufff5\032" +
    "\ufff5\033\ufff5\041\ufff5\045\ufff5\046\ufff5\053\ufff5\055\ufff5" +
    "\064\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\001\002\000" +
    "\004\002\001\001\002\000\034\004\333\013\071\014\101" +
    "\015\076\016\070\017\074\020\075\021\102\022\100\023" +
    "\072\024\077\025\067\026\073\001\002\000\044\002\ufff7" +
    "\012\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\041" +
    "\ufff7\045\ufff7\046\ufff7\053\ufff7\055\ufff7\064\ufff7\065\ufff7" +
    "\066\ufff7\067\ufff7\070\ufff7\001\002\000\044\002\ufff8\012" +
    "\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\041\ufff8" +
    "\045\ufff8\046\ufff8\053\ufff8\055\ufff8\064\ufff8\065\ufff8\066" +
    "\ufff8\067\ufff8\070\ufff8\001\002\000\046\016\034\036\043" +
    "\042\045\043\055\047\057\050\041\051\035\053\056\060" +
    "\054\062\046\063\060\071\053\072\036\073\051\074\040" +
    "\075\050\076\033\077\052\001\002\000\012\006\336\034" +
    "\153\035\154\037\152\001\002\000\004\011\337\001\002" +
    "\000\034\027\014\031\020\033\010\041\015\045\007\046" +
    "\016\053\025\055\024\064\023\065\021\066\017\067\013" +
    "\070\005\001\002\000\036\012\341\027\014\031\020\033" +
    "\010\041\015\045\007\046\016\053\025\055\024\064\023" +
    "\065\021\066\017\067\013\070\005\001\002\000\044\002" +
    "\uffd6\012\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6" +
    "\041\uffd6\045\uffd6\046\uffd6\053\uffd6\055\uffd6\064\uffd6\065" +
    "\uffd6\066\uffd6\067\uffd6\070\uffd6\001\002\000\046\016\034" +
    "\036\043\042\045\043\055\047\057\050\041\051\035\053" +
    "\056\060\054\062\046\063\060\071\053\072\036\073\051" +
    "\074\040\075\050\076\033\077\052\001\002\000\034\006" +
    "\344\013\071\014\101\015\076\016\070\017\074\020\075" +
    "\021\102\022\100\023\072\024\077\025\067\026\073\001" +
    "\002\000\004\004\345\001\002\000\044\002\ufff4\012\ufff4" +
    "\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\041\ufff4\045" +
    "\ufff4\046\ufff4\053\ufff4\055\ufff4\064\ufff4\065\ufff4\066\ufff4" +
    "\067\ufff4\070\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\343\000\016\002\010\003\003\004\011\017\025\020" +
    "\005\022\021\001\001\000\012\004\214\017\025\020\005" +
    "\022\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\330\006\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\026\023\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\172\006\036\015\175\024\176\001\001" +
    "\000\010\005\041\006\036\014\046\001\001\000\002\001" +
    "\001\000\006\005\166\006\036\001\001\000\002\001\001" +
    "\000\006\005\164\006\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\150\006\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\123\006" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\116\006\036\001\001\000\010\005\041\006\036\014\062" +
    "\001\001\000\002\001\001\000\006\005\065\006\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\115" +
    "\006\036\001\001\000\006\005\114\006\036\001\001\000" +
    "\006\005\113\006\036\001\001\000\006\005\112\006\036" +
    "\001\001\000\006\005\111\006\036\001\001\000\006\005" +
    "\110\006\036\001\001\000\006\005\107\006\036\001\001" +
    "\000\006\005\106\006\036\001\001\000\006\005\105\006" +
    "\036\001\001\000\006\005\104\006\036\001\001\000\006" +
    "\005\103\006\036\001\001\000\006\005\102\006\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\121\006\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\126\006\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\131\006\036\001" +
    "\001\000\002\001\001\000\006\005\133\006\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\136\006" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\142\006\036\011\143\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\146\006\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\156\006\036\001\001" +
    "\000\006\005\150\006\155\001\001\000\006\005\150\006" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\160\006\036\001\001\000\002\001" +
    "\001\000\006\005\162\006\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\170\006\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\205\013\202\022\203\026\231\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\205\013" +
    "\202\022\203\026\204\001\001\000\002\001\001\000\006" +
    "\016\026\023\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\221" +
    "\022\203\001\001\000\004\027\212\001\001\000\002\001" +
    "\001\000\014\003\213\004\011\017\025\020\005\022\021" +
    "\001\001\000\002\001\001\000\012\004\214\017\025\020" +
    "\005\022\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\217\004\011\017\025\020\005\022\021\001" +
    "\001\000\012\004\214\017\025\020\005\022\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\224\004\011\017\025\020\005\022\021\001\001" +
    "\000\012\004\214\017\025\020\005\022\021\001\001\000" +
    "\002\001\001\000\014\003\227\004\011\017\025\020\005" +
    "\022\021\001\001\000\012\004\214\017\025\020\005\022" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\233\006\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\142\006\036\011\237" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\142\006\036\011\244" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\251\006\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\255\004\011\017\025\020\005\022\021\001\001" +
    "\000\012\004\214\017\025\020\005\022\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\150\006\261" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\150\006\265\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\270\004\011\017\025\020" +
    "\005\022\021\001\001\000\012\004\214\017\025\020\005" +
    "\022\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\303\004\011\017\025\020\005\022\021\001\001" +
    "\000\002\001\001\000\006\005\150\006\276\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\301\004\011" +
    "\017\025\020\005\022\021\001\001\000\012\004\214\017" +
    "\025\020\005\022\021\001\001\000\002\001\001\000\012" +
    "\004\214\017\025\020\005\022\021\001\001\000\002\001" +
    "\001\000\006\005\306\006\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\312\010\313\001\001\000" +
    "\014\003\322\004\011\017\025\020\005\022\021\001\001" +
    "\000\004\010\321\001\001\000\002\001\001\000\006\005" +
    "\315\006\036\001\001\000\002\001\001\000\014\003\317" +
    "\004\011\017\025\020\005\022\021\001\001\000\012\004" +
    "\214\017\025\020\005\022\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\214\017\025\020\005\022" +
    "\021\001\001\000\006\005\324\006\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\150\006\334\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\003\337\004\011\017\025\020\005" +
    "\022\021\001\001\000\012\004\214\017\025\020\005\022" +
    "\021\001\001\000\002\001\001\000\006\005\342\006\036" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<Nodo> AST;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
    public LinkedList<Nodo> getAST() {
        return AST;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= instrucciones 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        parser.AST=a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT= a;
                        RESULT.add(b);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Nodo> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT= new LinkedList<>();
                        RESULT.add(a);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= PRINT PARIZQ expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                                                    RESULT  =  new Imprimir ((Expresion)a);
                                                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= Sentencia PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Sentencia(a,1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= Sentencia 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Sentencia(a,1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= Ciclos 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
        RESULT = (Nodo)a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= Graficas 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
        RESULT=(Nodo)a;
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= RETURN expresion PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 
        RESULT = new Retorno((Expresion)a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= RETURN PTCOMA 
            {
              Nodo RESULT =null;
		
        RESULT = new Retorno();
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= TYPEOF PARIZQ expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new TypeOf((Expresion)a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= LENGHT PARIZQ expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new Lenght((Expresion)a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= STRINGLENGHT PARIZQ expresion PARDER PTCOMA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
        RESULT = new StringLenght((Expresion) a);
    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Sentencia ::= IDENTIFICADOR SentIgual 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = new Asigna(a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Sentencia",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SentIgual ::= IGUAL SentDef 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentIgual",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SentIgual ::= Llamada 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentIgual",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Llamada ::= PARIZQ ParametrosLlamada PARDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Llamada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Llamada ::= PARIZQ PARDER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Llamada",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SentDef ::= expresion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 RESULT = (Expresion)a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentDef",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SentDef ::= Funcion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentDef",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Funcion ::= FUNCTION PARIZQ SentFunc 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 System.out.println(a+" "+b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Funcion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Funcion ::= PARIZQ SentFunc 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		System.out.println(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Funcion",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SentFunc ::= PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		 System.out.println(a+" "+b+" "+c); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentFunc",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SentFunc ::= ListaParametros PARDER SentParam 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Parametro> b = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentFunc",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SentFunc ::= PARDER DEFFUN LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentFunc",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SentParam ::= LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentParam",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SentParam ::= DEFFUN LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SentParam",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ListaExp ::= ListaExp COMA expresion 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT= a;
                RESULT.add((Expresion)b);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaExp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ListaExp ::= expresion 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT = new ArrayList<>();
                RESULT.add((Expresion)a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaExp",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Parametros ::= IDENTIFICADOR 
            {
              Parametro RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Parametros ::= Sentencia 
            {
              Parametro RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Parametros",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ListaParametros ::= ListaParametros COMA Parametros 
            {
              ArrayList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Parametro> a = (ArrayList<Parametro>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro b = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ListaParametros ::= Parametros 
            {
              ArrayList<Parametro> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Parametro a = (Parametro)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ListaParametros",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ParametrosLlamada ::= ParametrosLlamada COMA expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Expresion> a = (ArrayList<Expresion>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT=a;
                        RESULT.add((Expresion)b);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParametrosLlamada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ParametrosLlamada ::= expresion 
            {
              ArrayList<Expresion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                        RESULT = new ArrayList<>();
                        RESULT.add((Expresion)a);
                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ParametrosLlamada",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Graficas ::= BARPLOT PARIZQ ListaExp PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT= new BarPlot(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Graficas",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Graficas ::= PIE PARIZQ ListaExp PARDER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
                RESULT= new PiePlot(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Graficas",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Ciclos ::= IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new If((Operacion)a,b);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Ciclos ::= IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER ELSE LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new If((Operacion)a,b,c);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Ciclos ::= IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER ELSE IF PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> c = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new IfElse((Operacion)a,(Operacion)d,b,c);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-14)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Ciclos ::= SWITCH PARIZQ expresion PARDER LLAVEIZQ listacase LLAVEDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoCase> b = (LinkedList<NodoCase>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new SwitchCase(b,(Expresion)a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Ciclos ::= BREAK PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT= new Break (a);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Ciclos ::= WHILE PARIZQ expresioncomp PARDER LLAVEIZQ instrucciones LLAVEDER 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
            RESULT = new While((Expresion)a, b);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Ciclos ::= DO LLAVEIZQ instrucciones LLAVEDER WHILE PARIZQ expresioncomp PARDER PTCOMA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		
            RESULT = new DoWhile((Expresion)a,b);
        
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("Ciclos",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // listacase ::= listacase CASES 
            {
              LinkedList<NodoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		LinkedList<NodoCase> a = (LinkedList<NodoCase>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoCase b = (NodoCase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		  
                    RESULT=a;
                    RESULT.add(b);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listacase",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // listacase ::= CASES 
            {
              LinkedList<NodoCase> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		NodoCase a = (NodoCase)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                    RESULT=new LinkedList<>();
                    RESULT.add(a);
                
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listacase",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CASES ::= CASE expresion DOSP instrucciones 
            {
              NodoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> b = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT= new NodoCase((Expresion)a,b);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CASES ::= DEFAULT instrucciones 
            {
              NodoCase RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		LinkedList<Nodo> a = (LinkedList<Nodo>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                RESULT= new NodoCase(a);
            
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CASES",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= MENOS expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.UMENOS,(Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= expresion MAS expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.SUMA,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= expresion MENOS expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.RESTA,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= expresion POR expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MULTIPLICACION,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= expresion DIVIDIDO expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.DIVISION,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= expresion POTENCIA expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.POTENCIA,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= expresion MODULO expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MODULO,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= ENTERO 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.INT));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expresion ::= DECIMAL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.DOUBLE));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expresion ::= CADENA 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.STRING));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expresion ::= TRUE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.BOOLEAN));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expresion ::= FALSE 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.BOOLEAN));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expresion ::= IDENTIFICADOR 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new id(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expresion ::= IDENTIFICADOR CORIZQ expresion CORDER CORIZQ expresion CORDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expresion ::= NULL 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Single(a,new Tipo(Tipo.tipo.STRING));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expresion ::= DEF 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT= new Single(a,new Tipo(Tipo.tipo.DEF));
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expresion ::= LENGHTPAR expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Lenght((Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expresion ::= STRINGLENGHTPAR expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new StringLenght((Expresion) a); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expresion ::= REMOVE PARIZQ expresion COMA expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new Remove((Expresion)a, (Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expresion ::= TOLOWERCASE PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = new toLowerCase((Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expresion ::= TOUPPERCASE PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new toUperCase((Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expresion ::= TRUNK PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Trunk((Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expresion ::= ROUND PARIZQ expresion PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new Round((Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expresion ::= CC PARIZQ ListaExp PARDER 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		ArrayList<Object> a = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		 RESULT = new C (a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expresion ::= IDENTIFICADOR PARIZQ ParametrosLlamada PARDER 
            {
              Nodo RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expresion ::= expresioncomp INTERROGACION expresion DOSP expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo c = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
                                                                 RESULT=new Operacion(Operacion.Tipo_operacion.TERNARIO,(Expresion)a, (Expresion)b,(Expresion)c); 
                                                                    
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expresioncomp ::= expresion IGUALD expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.IGUALIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expresioncomp ::= expresion DESIGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.DESIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expresioncomp ::= expresion MAYOR expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MAYOR,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expresioncomp ::= expresion MENOR expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MENOR,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expresioncomp ::= expresion MAYORIGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MAYORIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expresioncomp ::= expresion MENORIGUAL expresion 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.MENORIGUAL,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expresioncomp ::= expresioncomp AND expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.AND,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresioncomp ::= expresioncomp OR expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.OR,(Expresion)a,(Expresion)b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresioncomp ::= NOT expresioncomp 
            {
              Nodo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Operacion(Operacion.Tipo_operacion.NOT,(Expresion)a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresioncomp",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
