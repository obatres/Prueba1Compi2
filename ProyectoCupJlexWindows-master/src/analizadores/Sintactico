/*
 * Ejemplo desarrollado por Erick Navarro
 * Blog: e-navarro.blogspot.com
 * Julio - 2018
 */

package analizadores; 
import arbol.Expresion;
import arbol.Nodo;
import arbol.Instruccion;
import arbol.Asignacion;
import arbol.Simbolo.*;
import arbol.TablaDeSimbolos;
import java.util.LinkedList;
import arbol.Operacion;
import arbol.Imprimir;
import arbol.Tipo.tipo.*;
import arbol.Tipo;
import arbol.Declaracion;
import arbol.Single;
import arbol.id;
import java_cup.runtime.*;

parser code 
{:

    public LinkedList<Nodo> AST;
    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
    } 

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
    }  
    public LinkedList<Nodo> getAST() {
        return AST;
    }
:} 

terminal String PTCOMA,PARIZQ,PARDER,CORIZQ,CORDER, POTENCIA, MODULO;
terminal String MAS,MENOS,POR,DIVIDIDO;
terminal String ENTERO;
terminal String DECIMAL;
terminal String CADENA;
terminal String UMENOS;
terminal String REVALUAR;
terminal String RDECLARA;
terminal String IDENTIFICADOR;
terminal String IGUAL, ENTEROT, CADENAT;

non terminal ini;
non terminal LinkedList<Nodo> instrucciones;
non terminal Nodo instruccion;
non terminal Nodo expresion;
non terminal Tipo tipovar;


precedence left MAS,MENOS;
precedence left POR,DIVIDIDO;
precedence left POTENCIA;
precedence left MODULO;
precedence right UMENOS; 

start with ini; 

ini::=instrucciones:a
    {:
    parser.AST=a;
    :};

instrucciones ::= 
   instrucciones:a instruccion:b 
    {:
    RESULT= a;
    RESULT.add(b);
    :}
 | instruccion:a 
    {:
    RESULT= new LinkedList<>();
    RESULT.add(a);
    :}; 

instruccion ::= 
   REVALUAR CORIZQ expresion:a CORDER PTCOMA
    {:
    //System.out.println("El valor de la expresión es: "+a);
    RESULT  =  new Imprimir ((Expresion)a);
    :}
 | tipovar:b IDENTIFICADOR:a PTCOMA
    {:
        RESULT = new Declaracion (a, b);       
    :}
 | IDENTIFICADOR:a IGUAL expresion:b PTCOMA 
    {:
        RESULT = new Asignacion(a,(Expresion)b);
    :}
    ;

tipovar::=
     ENTEROT
     {: 
        RESULT= new Tipo(Tipo.tipo.INT);
     :}
    |CADENAT 
    {:
        RESULT= new Tipo(Tipo.tipo.STRING);
    :}
    ;

expresion  ::= 
    MENOS expresion:a                      {:RESULT=new Operacion(Operacion.Tipo_operacion.UMENOS,(Expresion)a);:}%prec UMENOS     
 |  expresion:a MAS        expresion:b     {:RESULT=new Operacion(Operacion.Tipo_operacion.SUMA,(Expresion)a,(Expresion)b);:}
 |  expresion:a MENOS      expresion:b     {:RESULT=new Operacion(Operacion.Tipo_operacion.RESTA,(Expresion)a,(Expresion)b);:}
 |  expresion:a POR        expresion:b     {:RESULT=new Operacion(Operacion.Tipo_operacion.MULTIPLICACION,(Expresion)a,(Expresion)b);:}
 |  expresion:a DIVIDIDO   expresion:b     {:RESULT=new Operacion(Operacion.Tipo_operacion.DIVISION,(Expresion)a,(Expresion)b);:}
 |  expresion:a POTENCIA   expresion:b     {:RESULT=new Operacion(Operacion.Tipo_operacion.POTENCIA,(Expresion)a,(Expresion)b);:}
 |  expresion:a MODULO     expresion:b     {:RESULT=new Operacion(Operacion.Tipo_operacion.MODULO,(Expresion)a,(Expresion)b);:}
 |  ENTERO:a                               {:RESULT=new Single(a,new Tipo(Tipo.tipo.INT));:}
 |  DECIMAL:a                              {:RESULT=new Single(a,new Tipo(Tipo.tipo.DOUBLE));:}
 |  CADENA:a                               {:RESULT=new Single(a,new Tipo(Tipo.tipo.STRING));:} 
 |  IDENTIFICADOR:a                        {:RESULT=new id(a);:}
 |  PARIZQ expresion:a PARDER              {:RESULT=a;:}
;
